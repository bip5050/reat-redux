{"ast":null,"code":"import _objectSpread from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar initialState = {\n  isFetching: false,\n  isError: false,\n  isSuccess: false,\n  isProcessing: false,\n  resetPasswordData: {},\n  errMassage: \"\"\n};\n\nvar resetPasswordReducer = function resetPasswordReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'RESET_PASSWORD':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isProcessing: true,\n        isError: false,\n        isSuccess: false,\n        resetPasswordData: {},\n        errMassage: \"\"\n      });\n\n    case 'RESET_PASSWORD_SUCCESS':\n      console.log('Reducer : ', action.data);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isProcessing: false,\n        isError: false,\n        isSuccess: true,\n        resetPasswordData: action.data,\n        errMassage: \"\"\n      });\n\n    case 'RESET_PASSWORD_ERROR':\n      var msg = action.data.message;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isProcessing: false,\n        isError: true,\n        isSuccess: false,\n        resetPasswordData: {},\n        errMassage: msg\n      });\n\n    case 'RESET_PASSWORD_NOTMATCH':\n      var msgreset = \"Password does not match\";\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isProcessing: false,\n        isError: true,\n        isSuccess: false,\n        resetPasswordData: {},\n        errMassage: msgreset\n      });\n    //Default\n\n    default:\n      return state;\n  }\n};\n\nexport default resetPasswordReducer;","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/ResetPassword/reducer.js"],"names":["initialState","isFetching","isError","isSuccess","isProcessing","resetPasswordData","errMassage","resetPasswordReducer","state","action","type","console","log","data","msg","message","msgreset"],"mappings":";AAAA,IAAMA,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,KADK;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,SAAS,EAAE,KAHM;AAIjBC,EAAAA,YAAY,EAAE,KAJG;AAKjBC,EAAAA,iBAAiB,EAAC,EALD;AAMjBC,EAAAA,UAAU,EAAQ;AAND,CAArB;;AASA,IAAMC,oBAAoB,GAAO,SAA3BA,oBAA2B,GAAgC;AAAA,MAA/BC,KAA+B,uEAAzBR,YAAyB;AAAA,MAAXS,MAAW;;AAE7D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,gBAAL;AACI,6CAAYF,KAAZ;AAAmBJ,QAAAA,YAAY,EAAC,IAAhC;AAAsCF,QAAAA,OAAO,EAAC,KAA9C;AAAqDC,QAAAA,SAAS,EAAC,KAA/D;AAAsEE,QAAAA,iBAAiB,EAAE,EAAzF;AACAC,QAAAA,UAAU,EAAE;AADZ;;AAEJ,SAAK,wBAAL;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,MAAM,CAACI,IAAjC;AACI,6CAAWL,KAAX;AAAkBJ,QAAAA,YAAY,EAAC,KAA/B;AAAsCF,QAAAA,OAAO,EAAC,KAA9C;AAAqDC,QAAAA,SAAS,EAAC,IAA/D;AAAqEE,QAAAA,iBAAiB,EAACI,MAAM,CAACI,IAA9F;AAAoGP,QAAAA,UAAU,EAAE;AAAhH;;AACJ,SAAK,sBAAL;AAEI,UAAIQ,GAAG,GAAGL,MAAM,CAACI,IAAP,CAAYE,OAAtB;AACA,6CAAWP,KAAX;AAAkBJ,QAAAA,YAAY,EAAC,KAA/B;AAAsCF,QAAAA,OAAO,EAAC,IAA9C;AAAoDC,QAAAA,SAAS,EAAC,KAA9D;AAAqEE,QAAAA,iBAAiB,EAAC,EAAvF;AAA2FC,QAAAA,UAAU,EAAEQ;AAAvG;;AAEA,SAAK,yBAAL;AAEI,UAAIE,QAAQ,GAAG,yBAAf;AACA,6CAAWR,KAAX;AAAkBJ,QAAAA,YAAY,EAAC,KAA/B;AAAsCF,QAAAA,OAAO,EAAC,IAA9C;AAAoDC,QAAAA,SAAS,EAAC,KAA9D;AAAqEE,QAAAA,iBAAiB,EAAC,EAAvF;AAA2FC,QAAAA,UAAU,EAAEU;AAAvG;AAER;;AACA;AACA,aAAOR,KAAP;AAnBJ;AAqBH,CAvBD;;AAwBA,eAAeD,oBAAf","sourcesContent":["const initialState = {\n    isFetching: false,\n    isError: false,\n    isSuccess: false,\n    isProcessing: false,\n    resetPasswordData:{},\n    errMassage       :\"\"\n};\n\nconst resetPasswordReducer   =   (state=initialState, action) => {\n   \n    switch(action.type) {\n        case 'RESET_PASSWORD':\n            return { ...state, isProcessing:true, isError:false, isSuccess:false, resetPasswordData: {},\n            errMassage :\"\" };\n        case 'RESET_PASSWORD_SUCCESS':\n        console.log('Reducer : ', action.data);\n            return {...state, isProcessing:false, isError:false, isSuccess:true, resetPasswordData:action.data, errMassage :\"\" };\n        case 'RESET_PASSWORD_ERROR':\n           \n            let msg = action.data.message;\n            return {...state, isProcessing:false, isError:true, isSuccess:false, resetPasswordData:{}, errMassage :msg };\n\n            case 'RESET_PASSWORD_NOTMATCH':\n           \n                let msgreset = \"Password does not match\";\n                return {...state, isProcessing:false, isError:true, isSuccess:false, resetPasswordData:{}, errMassage :msgreset };\n            \n        //Default\n        default:\n        return state;\n    }\n}\nexport default resetPasswordReducer;"]},"metadata":{},"sourceType":"module"}