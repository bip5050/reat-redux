{"ast":null,"code":"import _objectSpread from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{withRouter,Link}from'react-router-dom';import'bootstrap/dist/css/bootstrap.css';import{isEmpty}from'lodash';import Filter from'./filter';import TaskList from'./taskList';import{isEqual}from'lodash';import moment from'moment-timezone';import{getFilter,clearFilter,setFilter}from'../../Helper/common';var TaskHistory=/*#__PURE__*/function(_Component){_inherits(TaskHistory,_Component);var _super=_createSuper(TaskHistory);function TaskHistory(props){var _this;_classCallCheck(this,TaskHistory);_this=_super.call(this,props);_this.getHistory=function(data,selFilterData){_this.setState({filterData:_objectSpread({},data)},function(){data.filter={key:'history',value:JSON.stringify(selFilterData)};//console.log('Data : ', data);\n_this.props.getHistory(data);});};_this.state={org_id:!!_this.props.userData?_this.props.userData.org_id:'',selectedState:null,selectedArea:null,selectedStore:null,filterKeys:{State:[],Area:[],Store:[]},type:'general',searchTxt:'',sOpen:false,selOrder:{},filterData:{}};_this.timings=[];//this.handleTypeChange         =  this.handleTypeChange.bind(this);\n_this.searchFilter=_this.searchFilter.bind(_assertThisInitialized(_this));return _this;}/* handleTypeChange(type, selFilterData) {\n      this.setState({\n         type        :  type\n      }, () => {\n         let filterData                =  {...this.state.filterData};\n         filterData.type               =  type;\n         filterData.pageno             =  1;\n         this.getHistory(filterData, selFilterData);\n      })\n   } */_createClass(TaskHistory,[{key:\"searchFilter\",value:function searchFilter(searchData){this.props.search(_objectSpread(_objectSpread({},searchData),{},{user_type:this.state.type,dateType:'range'}));}},{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(props){// && !isEqual(this.props.userType, props.userType)\n/* if(!!props.userType) {   \n         let type       =  (props.userType === 'admin') ? 'general' : props.userType;\n         let filter\t\t=\tprops.filterData.history || {};\n\t\t\tif(!isEmpty(filter) && filter.user_type === this.props.userType) {\n\t\t\t\ttype        =  filter.type;\n\t\t\t}\n         this.setState({\n            type: type\n         })\n      } */}/* componentWillMount(){      \n      this.props.getSettings();\n   } */},{key:\"componentDidMount\",value:function componentDidMount(){this.props.getLocations();/* if(!!this.props.userType) {\n         let filter\t\t=\tthis.props.filterData.history || {};\n         let type       =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n\t\t\tif(!isEmpty(filter) && filter.user_type === this.props.userType) {\n\t\t\t\ttype        =  filter.type;\n\t\t\t}\n         this.setState({\n            type: type\n         })\n      } */}/* componentWillReceiveProps(props){      \n      console.log('Check Processing : ', this.props.isEditTaskProcessing != props.isEditTaskProcessing && !props.isEditTaskProcessing && !!this.props.isEditTaskProcessing)\n      if(this.props.isEditTaskProcessing != props.isEditTaskProcessing && !props.isEditTaskProcessing && !!this.props.isEditTaskProcessing) {\n         console.log('isEditTaskProcessing : ', this.props.isEditTaskProcessing);\n         console.log('Filter Data : ', this.props.filterData);\n         this.getHistory(this.state.filterData, this.props.filterData);\n      }\n   } */},{key:\"render\",value:function render(){var locationData=this.props.locations||{};var pharmacy=!!locationData.pharmacy?locationData.pharmacy:false;var stores=locationData.stores||[];var locations=locationData.locations||[];var taskType=locationData.taskType||'';var zones=locationData.zones||{};var userType=this.props.userType||'';var filterData=this.props.filterData.history||{};return/*#__PURE__*/React.createElement(\"main\",{className:\"dash right_sec taskp \".concat(userType!=='admin'?' noAdmin':'')},this.props.isFilterLoaded?/*#__PURE__*/React.createElement(Filter//handleTypeChange     =  {this.handleTypeChange}\n,{getHistory:this.getHistory,taskHistory:this.props.taskHistory//type                 =  {this.state.type}\n,stores:stores,zones:zones,handleStateChange:this.handleStateChange,handleAreaChange:this.handleAreaChange,handleStoreChange:this.handleStoreChange,searchFilter:this.searchFilter,resetSearch:this.props.resetSearch,handleRemoveFilter:this.handleRemoveFilter,getLocations:this.props.getLocations,taskType:taskType,locations:locations,pharmacy:pharmacy,timings:this.timings,filterData:this.state.filterData,userData:this.props.userData,settingsData:this.props.settingsData,createTask:this.props.createTask,filteredList:this.props.filteredList,getTaskDetails:this.props.getTaskDetails,taskDetails:this.props.taskDetails,deleteTask:this.props.deleteTask,updateTaskStatus:this.props.updateTaskStatus,editTask:this.props.editTask,getTrackDetails:this.props.getTrackDetails,isTaskProcessing:this.props.isTaskProcessing,exportTaskCsv:this.props.exportTaskCsv,csvUrl:this.props.csvUrl,isTaskCsvExporting:this.props.isTaskCsvExporting,userType:userType,savedFilterData:filterData}):null,!isEmpty(this.state.filterData)?/*#__PURE__*/React.createElement(TaskList,{getHistory:this.getHistory,taskHistory:this.props.taskHistory,type:this.state.type,org_id:this.state.org_id,searchTxt:this.state.searchTxt,taskType:taskType,stores:stores,locations:locations,pharmacy:pharmacy,timings:this.timings,getTaskDetails:this.props.getTaskDetails,taskDetails:this.props.taskDetails,deleteTask:this.props.deleteTask,updateTaskStatus:this.props.updateTaskStatus,editTask:this.props.editTask,settingsData:this.props.settingsData,getTrackDetails:this.props.getTrackDetails,filterData:this.state.filterData,isProcessing:this.props.isProcessing,savedFilterData:this.props.filterData}):/*#__PURE__*/React.createElement(\"div\",{className:\"loader\"},\"Loading....\"));}}]);return TaskHistory;}(Component);TaskHistory.defaultProps={userData:{},isFetching:false,isProcessing:false,isError:false,isSuccess:false,history:{},getHistory:function getHistory(){},exportTaskCsv:function exportTaskCsv(){},isTaskCsvExporting:false};export default withRouter(TaskHistory);","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/TaskHistory/taskHistory.js"],"names":["React","Component","withRouter","Link","isEmpty","Filter","TaskList","isEqual","moment","getFilter","clearFilter","setFilter","TaskHistory","props","getHistory","data","selFilterData","setState","filterData","filter","key","value","JSON","stringify","state","org_id","userData","selectedState","selectedArea","selectedStore","filterKeys","State","Area","Store","type","searchTxt","sOpen","selOrder","timings","searchFilter","bind","searchData","search","user_type","dateType","getLocations","locationData","locations","pharmacy","stores","taskType","zones","userType","history","isFilterLoaded","taskHistory","handleStateChange","handleAreaChange","handleStoreChange","resetSearch","handleRemoveFilter","settingsData","createTask","filteredList","getTaskDetails","taskDetails","deleteTask","updateTaskStatus","editTask","getTrackDetails","isTaskProcessing","exportTaskCsv","csvUrl","isTaskCsvExporting","isProcessing","defaultProps","isFetching","isError","isSuccess"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes as PT } from 'prop-types';\nimport { withRouter, Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {isEmpty} from 'lodash';\nimport Filter from './filter';\nimport TaskList from './taskList';\nimport { isEqual } from 'lodash';\nimport moment from 'moment-timezone';\nimport {getFilter, clearFilter, setFilter} from '../../Helper/common';\n\nclass TaskHistory extends Component {\n   static propTypes  =  {\n      userData       :  PT.object,\n      isFetching     :  PT.bool,\n      isProcessing   :  PT.bool,\n      isError        :  PT.bool,\n      isSuccess      :  PT.bool,\n      history        :  PT.object,\n      getHistory     :  PT.func,\n      exportTaskCsv  :  PT.func,\n      isTaskCsvExporting: PT.bool\n   }\n\n   static defaultProps     =  {\n      userData       :  {},\n      isFetching     :  false,\n      isProcessing   :  false,\n      isError        :  false,\n      isSuccess      :  false,\n      history        :  {},\n      getHistory     :  () => { },\n      exportTaskCsv  :  () => { },\n      isTaskCsvExporting :  false\n   }\n\n   constructor(props) {\n      super(props);\n      this.state                    =  {\n               org_id         :  (!!this.props.userData) ? this.props.userData.org_id : '',\n               selectedState  :  null,\n               selectedArea   :  null,\n               selectedStore  :  null,\n               filterKeys     :  {State:[], Area: [], Store: []},\n               type           :  'general',\n               searchTxt      :  '',\n               sOpen          :  false,\n               selOrder       :  {},\n               filterData     :  {}\n            }\n      this.timings                  =  [];\n      //this.handleTypeChange         =  this.handleTypeChange.bind(this);\n      this.searchFilter             =  this.searchFilter.bind(this);\n   }\n\n   /* handleTypeChange(type, selFilterData) {\n      this.setState({\n         type        :  type\n      }, () => {\n         let filterData                =  {...this.state.filterData};\n         filterData.type               =  type;\n         filterData.pageno             =  1;\n         this.getHistory(filterData, selFilterData);\n      })\n   } */\n\n   searchFilter (searchData) {\n      this.props.search({\n         ...searchData,\n         user_type: this.state.type,\n         dateType: 'range'\n      })\n   }\n   \n   componentWillReceiveProps(props) {\n      // && !isEqual(this.props.userType, props.userType)\n      /* if(!!props.userType) {   \n         let type       =  (props.userType === 'admin') ? 'general' : props.userType;\n         let filter\t\t=\tprops.filterData.history || {};\n\t\t\tif(!isEmpty(filter) && filter.user_type === this.props.userType) {\n\t\t\t\ttype        =  filter.type;\n\t\t\t}\n         this.setState({\n            type: type\n         })\n      } */\n   }\n\n   /* componentWillMount(){      \n      this.props.getSettings();\n   } */\n\n   componentDidMount() {\n      this.props.getLocations();      \n      /* if(!!this.props.userType) {\n         let filter\t\t=\tthis.props.filterData.history || {};\n         let type       =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n\t\t\tif(!isEmpty(filter) && filter.user_type === this.props.userType) {\n\t\t\t\ttype        =  filter.type;\n\t\t\t}\n         this.setState({\n            type: type\n         })\n      } */\n   }\n   \n   /* componentWillReceiveProps(props){      \n      console.log('Check Processing : ', this.props.isEditTaskProcessing != props.isEditTaskProcessing && !props.isEditTaskProcessing && !!this.props.isEditTaskProcessing)\n      if(this.props.isEditTaskProcessing != props.isEditTaskProcessing && !props.isEditTaskProcessing && !!this.props.isEditTaskProcessing) {\n         console.log('isEditTaskProcessing : ', this.props.isEditTaskProcessing);\n         console.log('Filter Data : ', this.props.filterData);\n         this.getHistory(this.state.filterData, this.props.filterData);\n      }\n   } */\n\n   getHistory = (data, selFilterData) => {\n      this.setState({\n         filterData  :  {...data}\n      }, () => {\n         data.filter\t\t=\t{key: 'history', value: JSON.stringify(selFilterData)};\n         //console.log('Data : ', data);\n         this.props.getHistory(data);\n      })\n   }\n\n   render() {\n      let locationData           =  this.props.locations || {};\n      let pharmacy               =  (!!locationData.pharmacy) ? locationData.pharmacy : false;\n      let stores                 =  locationData.stores || [];\n      let locations              =  locationData.locations || [];\n      let taskType               =  locationData.taskType || '';\n      let zones                  =  locationData.zones || {};\n      let userType               =  this.props.userType || '';\n      let filterData             =\tthis.props.filterData.history || {};\n      return (\n         <main className={`dash right_sec taskp ${(userType !== 'admin') ? ' noAdmin' : ''}`}>\n            {\n               (this.props.isFilterLoaded) ? \n               <Filter\n                  //handleTypeChange     =  {this.handleTypeChange}\n                  getHistory           =  {this.getHistory}\n                  taskHistory          =  {this.props.taskHistory}\n                  //type                 =  {this.state.type}\n                  stores               =  {stores}\n                  zones                =  {zones}\n                  handleStateChange    =  {this.handleStateChange}\n                  handleAreaChange     =  {this.handleAreaChange}\n                  handleStoreChange    =  {this.handleStoreChange}\n                  searchFilter         =  {this.searchFilter}\n                  resetSearch          =  {this.props.resetSearch}\n                  handleRemoveFilter   =  {this.handleRemoveFilter}\n                  getLocations         =  {this.props.getLocations}\n                  taskType             =  {taskType}\n                  locations            =  {locations}\n                  pharmacy             =  {pharmacy}\n                  timings              =  {this.timings}\n                  filterData           =  {this.state.filterData}\n                  userData             =  {this.props.userData}\n                  settingsData         =  {this.props.settingsData}\n                  createTask           =  {this.props.createTask}\n                  filteredList         =  {this.props.filteredList}\n                  getTaskDetails       =  {this.props.getTaskDetails}\n                  taskDetails          =  {this.props.taskDetails}\n                  deleteTask           =  {this.props.deleteTask}\n                  updateTaskStatus     =  {this.props.updateTaskStatus}\n                  editTask             =  {this.props.editTask}\n                  getTrackDetails      =  {this.props.getTrackDetails}\n                  isTaskProcessing     =  {this.props.isTaskProcessing}\n                  exportTaskCsv        =  {this.props.exportTaskCsv}\n                  csvUrl               =  {this.props.csvUrl}\n                  isTaskCsvExporting   =  {this.props.isTaskCsvExporting}\n                  userType             =  {userType}\n\t\t\t\t\t\tsavedFilterData      =  {filterData}\n               /> : null\n            }\n            {\n               (!isEmpty(this.state.filterData)) ? \n               <TaskList\n                  getHistory        =  {this.getHistory}\n                  taskHistory       =  {this.props.taskHistory}\n                  type              =  {this.state.type}\n                  org_id            =  {this.state.org_id}\n                  searchTxt         =  {this.state.searchTxt}\n                  taskType          =  {taskType}\n                  stores            =  {stores}\n                  locations         =  {locations}\n                  pharmacy          =  {pharmacy}\n                  timings           =  {this.timings}\n                  getTaskDetails    =  {this.props.getTaskDetails}\n                  taskDetails       =  {this.props.taskDetails}\n                  deleteTask        =  {this.props.deleteTask}\n                  updateTaskStatus  =  {this.props.updateTaskStatus}\n                  editTask          =  {this.props.editTask}\n                  settingsData      =  {this.props.settingsData}\n                  getTrackDetails   =  {this.props.getTrackDetails}\n                  filterData        =  {this.state.filterData}\n                  isProcessing      =  {this.props.isProcessing}\n                  savedFilterData   =  {this.props.filterData}\n               />: <div className=\"loader\">Loading....</div>\n            }\n         </main>\n      )\n   }\n}\nexport default withRouter(TaskHistory);"]},"metadata":{},"sourceType":"module"}