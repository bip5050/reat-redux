{"ast":null,"code":"import _objectSpread from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/biplab/Desktop/foodjets/src/containers/TaskHistory/taskHistory.js\";\nimport React, { Component } from 'react';\nimport { PropTypes as PT } from 'prop-types';\nimport { withRouter, Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { isEmpty } from 'lodash';\nimport Filter from './filter';\nimport TaskList from './taskList';\nimport { isEqual } from 'lodash';\nimport moment from 'moment-timezone';\nimport { getFilter, clearFilter, setFilter } from '../../Helper/common';\n\nvar TaskHistory = /*#__PURE__*/function (_Component) {\n  _inherits(TaskHistory, _Component);\n\n  var _super = _createSuper(TaskHistory);\n\n  function TaskHistory(props) {\n    var _this;\n\n    _classCallCheck(this, TaskHistory);\n\n    _this = _super.call(this, props);\n\n    _this.getHistory = function (data, selFilterData) {\n      _this.setState({\n        filterData: _objectSpread({}, data)\n      }, function () {\n        data.filter = {\n          key: 'history',\n          value: JSON.stringify(selFilterData)\n        }; //console.log('Data : ', data);\n\n        _this.props.getHistory(data);\n      });\n    };\n\n    _this.state = {\n      org_id: !!_this.props.userData ? _this.props.userData.org_id : '',\n      selectedState: null,\n      selectedArea: null,\n      selectedStore: null,\n      filterKeys: {\n        State: [],\n        Area: [],\n        Store: []\n      },\n      type: 'general',\n      searchTxt: '',\n      sOpen: false,\n      selOrder: {},\n      filterData: {}\n    };\n    _this.timings = []; //this.handleTypeChange         =  this.handleTypeChange.bind(this);\n\n    _this.searchFilter = _this.searchFilter.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /* handleTypeChange(type, selFilterData) {\n     this.setState({\n        type        :  type\n     }, () => {\n        let filterData                =  {...this.state.filterData};\n        filterData.type               =  type;\n        filterData.pageno             =  1;\n        this.getHistory(filterData, selFilterData);\n     })\n  } */\n\n\n  _createClass(TaskHistory, [{\n    key: \"searchFilter\",\n    value: function searchFilter(searchData) {\n      this.props.search(_objectSpread(_objectSpread({}, searchData), {}, {\n        user_type: this.state.type,\n        dateType: 'range'\n      }));\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {// && !isEqual(this.props.userType, props.userType)\n\n      /* if(!!props.userType) {   \n         let type       =  (props.userType === 'admin') ? 'general' : props.userType;\n         let filter\t\t=\tprops.filterData.history || {};\n      if(!isEmpty(filter) && filter.user_type === this.props.userType) {\n      type        =  filter.type;\n      }\n         this.setState({\n            type: type\n         })\n      } */\n    }\n    /* componentWillMount(){      \n       this.props.getSettings();\n    } */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getLocations();\n      /* if(!!this.props.userType) {\n         let filter\t\t=\tthis.props.filterData.history || {};\n         let type       =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n      if(!isEmpty(filter) && filter.user_type === this.props.userType) {\n      type        =  filter.type;\n      }\n         this.setState({\n            type: type\n         })\n      } */\n    }\n    /* componentWillReceiveProps(props){      \n       console.log('Check Processing : ', this.props.isEditTaskProcessing != props.isEditTaskProcessing && !props.isEditTaskProcessing && !!this.props.isEditTaskProcessing)\n       if(this.props.isEditTaskProcessing != props.isEditTaskProcessing && !props.isEditTaskProcessing && !!this.props.isEditTaskProcessing) {\n          console.log('isEditTaskProcessing : ', this.props.isEditTaskProcessing);\n          console.log('Filter Data : ', this.props.filterData);\n          this.getHistory(this.state.filterData, this.props.filterData);\n       }\n    } */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var locationData = this.props.locations || {};\n      var pharmacy = !!locationData.pharmacy ? locationData.pharmacy : false;\n      var stores = locationData.stores || [];\n      var locations = locationData.locations || [];\n      var taskType = locationData.taskType || '';\n      var zones = locationData.zones || {};\n      var userType = this.props.userType || '';\n      var filterData = this.props.filterData.history || {};\n      return /*#__PURE__*/React.createElement(\"main\", {\n        className: \"dash right_sec taskp \".concat(userType !== 'admin' ? ' noAdmin' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 10\n        }\n      }, this.props.isFilterLoaded ? /*#__PURE__*/React.createElement(Filter //handleTypeChange     =  {this.handleTypeChange}\n      , {\n        getHistory: this.getHistory,\n        taskHistory: this.props.taskHistory //type                 =  {this.state.type}\n        ,\n        stores: stores,\n        zones: zones,\n        handleStateChange: this.handleStateChange,\n        handleAreaChange: this.handleAreaChange,\n        handleStoreChange: this.handleStoreChange,\n        searchFilter: this.searchFilter,\n        resetSearch: this.props.resetSearch,\n        handleRemoveFilter: this.handleRemoveFilter,\n        getLocations: this.props.getLocations,\n        taskType: taskType,\n        locations: locations,\n        pharmacy: pharmacy,\n        timings: this.timings,\n        filterData: this.state.filterData,\n        userData: this.props.userData,\n        settingsData: this.props.settingsData,\n        createTask: this.props.createTask,\n        filteredList: this.props.filteredList,\n        getTaskDetails: this.props.getTaskDetails,\n        taskDetails: this.props.taskDetails,\n        deleteTask: this.props.deleteTask,\n        updateTaskStatus: this.props.updateTaskStatus,\n        editTask: this.props.editTask,\n        getTrackDetails: this.props.getTrackDetails,\n        isTaskProcessing: this.props.isTaskProcessing,\n        exportTaskCsv: this.props.exportTaskCsv,\n        csvUrl: this.props.csvUrl,\n        isTaskCsvExporting: this.props.isTaskCsvExporting,\n        userType: userType,\n        savedFilterData: filterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 16\n        }\n      }) : null, !isEmpty(this.state.filterData) ? /*#__PURE__*/React.createElement(TaskList, {\n        getHistory: this.getHistory,\n        taskHistory: this.props.taskHistory,\n        type: this.state.type,\n        org_id: this.state.org_id,\n        searchTxt: this.state.searchTxt,\n        taskType: taskType,\n        stores: stores,\n        locations: locations,\n        pharmacy: pharmacy,\n        timings: this.timings,\n        getTaskDetails: this.props.getTaskDetails,\n        taskDetails: this.props.taskDetails,\n        deleteTask: this.props.deleteTask,\n        updateTaskStatus: this.props.updateTaskStatus,\n        editTask: this.props.editTask,\n        settingsData: this.props.settingsData,\n        getTrackDetails: this.props.getTrackDetails,\n        filterData: this.state.filterData,\n        isProcessing: this.props.isProcessing,\n        savedFilterData: this.props.filterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 16\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loader\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 20\n        }\n      }, \"Loading....\"));\n    }\n  }]);\n\n  return TaskHistory;\n}(Component);\n\nTaskHistory.propTypes = {\n  userData: PT.object,\n  isFetching: PT.bool,\n  isProcessing: PT.bool,\n  isError: PT.bool,\n  isSuccess: PT.bool,\n  history: PT.object,\n  getHistory: PT.func,\n  exportTaskCsv: PT.func,\n  isTaskCsvExporting: PT.bool\n};\nTaskHistory.defaultProps = {\n  userData: {},\n  isFetching: false,\n  isProcessing: false,\n  isError: false,\n  isSuccess: false,\n  history: {},\n  getHistory: function getHistory() {},\n  exportTaskCsv: function exportTaskCsv() {},\n  isTaskCsvExporting: false\n};\nexport default withRouter(TaskHistory);","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/TaskHistory/taskHistory.js"],"names":["React","Component","PropTypes","PT","withRouter","Link","isEmpty","Filter","TaskList","isEqual","moment","getFilter","clearFilter","setFilter","TaskHistory","props","getHistory","data","selFilterData","setState","filterData","filter","key","value","JSON","stringify","state","org_id","userData","selectedState","selectedArea","selectedStore","filterKeys","State","Area","Store","type","searchTxt","sOpen","selOrder","timings","searchFilter","bind","searchData","search","user_type","dateType","getLocations","locationData","locations","pharmacy","stores","taskType","zones","userType","history","isFilterLoaded","taskHistory","handleStateChange","handleAreaChange","handleStoreChange","resetSearch","handleRemoveFilter","settingsData","createTask","filteredList","getTaskDetails","taskDetails","deleteTask","updateTaskStatus","editTask","getTrackDetails","isTaskProcessing","exportTaskCsv","csvUrl","isTaskCsvExporting","isProcessing","propTypes","object","isFetching","bool","isError","isSuccess","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes as PT } from 'prop-types';\nimport { withRouter, Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {isEmpty} from 'lodash';\nimport Filter from './filter';\nimport TaskList from './taskList';\nimport { isEqual } from 'lodash';\nimport moment from 'moment-timezone';\nimport {getFilter, clearFilter, setFilter} from '../../Helper/common';\n\nclass TaskHistory extends Component {\n   static propTypes  =  {\n      userData       :  PT.object,\n      isFetching     :  PT.bool,\n      isProcessing   :  PT.bool,\n      isError        :  PT.bool,\n      isSuccess      :  PT.bool,\n      history        :  PT.object,\n      getHistory     :  PT.func,\n      exportTaskCsv  :  PT.func,\n      isTaskCsvExporting: PT.bool\n   }\n\n   static defaultProps     =  {\n      userData       :  {},\n      isFetching     :  false,\n      isProcessing   :  false,\n      isError        :  false,\n      isSuccess      :  false,\n      history        :  {},\n      getHistory     :  () => { },\n      exportTaskCsv  :  () => { },\n      isTaskCsvExporting :  false\n   }\n\n   constructor(props) {\n      super(props);\n      this.state                    =  {\n               org_id         :  (!!this.props.userData) ? this.props.userData.org_id : '',\n               selectedState  :  null,\n               selectedArea   :  null,\n               selectedStore  :  null,\n               filterKeys     :  {State:[], Area: [], Store: []},\n               type           :  'general',\n               searchTxt      :  '',\n               sOpen          :  false,\n               selOrder       :  {},\n               filterData     :  {}\n            }\n      this.timings                  =  [];\n      //this.handleTypeChange         =  this.handleTypeChange.bind(this);\n      this.searchFilter             =  this.searchFilter.bind(this);\n   }\n\n   /* handleTypeChange(type, selFilterData) {\n      this.setState({\n         type        :  type\n      }, () => {\n         let filterData                =  {...this.state.filterData};\n         filterData.type               =  type;\n         filterData.pageno             =  1;\n         this.getHistory(filterData, selFilterData);\n      })\n   } */\n\n   searchFilter (searchData) {\n      this.props.search({\n         ...searchData,\n         user_type: this.state.type,\n         dateType: 'range'\n      })\n   }\n   \n   componentWillReceiveProps(props) {\n      // && !isEqual(this.props.userType, props.userType)\n      /* if(!!props.userType) {   \n         let type       =  (props.userType === 'admin') ? 'general' : props.userType;\n         let filter\t\t=\tprops.filterData.history || {};\n\t\t\tif(!isEmpty(filter) && filter.user_type === this.props.userType) {\n\t\t\t\ttype        =  filter.type;\n\t\t\t}\n         this.setState({\n            type: type\n         })\n      } */\n   }\n\n   /* componentWillMount(){      \n      this.props.getSettings();\n   } */\n\n   componentDidMount() {\n      this.props.getLocations();      \n      /* if(!!this.props.userType) {\n         let filter\t\t=\tthis.props.filterData.history || {};\n         let type       =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n\t\t\tif(!isEmpty(filter) && filter.user_type === this.props.userType) {\n\t\t\t\ttype        =  filter.type;\n\t\t\t}\n         this.setState({\n            type: type\n         })\n      } */\n   }\n   \n   /* componentWillReceiveProps(props){      \n      console.log('Check Processing : ', this.props.isEditTaskProcessing != props.isEditTaskProcessing && !props.isEditTaskProcessing && !!this.props.isEditTaskProcessing)\n      if(this.props.isEditTaskProcessing != props.isEditTaskProcessing && !props.isEditTaskProcessing && !!this.props.isEditTaskProcessing) {\n         console.log('isEditTaskProcessing : ', this.props.isEditTaskProcessing);\n         console.log('Filter Data : ', this.props.filterData);\n         this.getHistory(this.state.filterData, this.props.filterData);\n      }\n   } */\n\n   getHistory = (data, selFilterData) => {\n      this.setState({\n         filterData  :  {...data}\n      }, () => {\n         data.filter\t\t=\t{key: 'history', value: JSON.stringify(selFilterData)};\n         //console.log('Data : ', data);\n         this.props.getHistory(data);\n      })\n   }\n\n   render() {\n      let locationData           =  this.props.locations || {};\n      let pharmacy               =  (!!locationData.pharmacy) ? locationData.pharmacy : false;\n      let stores                 =  locationData.stores || [];\n      let locations              =  locationData.locations || [];\n      let taskType               =  locationData.taskType || '';\n      let zones                  =  locationData.zones || {};\n      let userType               =  this.props.userType || '';\n      let filterData             =\tthis.props.filterData.history || {};\n      return (\n         <main className={`dash right_sec taskp ${(userType !== 'admin') ? ' noAdmin' : ''}`}>\n            {\n               (this.props.isFilterLoaded) ? \n               <Filter\n                  //handleTypeChange     =  {this.handleTypeChange}\n                  getHistory           =  {this.getHistory}\n                  taskHistory          =  {this.props.taskHistory}\n                  //type                 =  {this.state.type}\n                  stores               =  {stores}\n                  zones                =  {zones}\n                  handleStateChange    =  {this.handleStateChange}\n                  handleAreaChange     =  {this.handleAreaChange}\n                  handleStoreChange    =  {this.handleStoreChange}\n                  searchFilter         =  {this.searchFilter}\n                  resetSearch          =  {this.props.resetSearch}\n                  handleRemoveFilter   =  {this.handleRemoveFilter}\n                  getLocations         =  {this.props.getLocations}\n                  taskType             =  {taskType}\n                  locations            =  {locations}\n                  pharmacy             =  {pharmacy}\n                  timings              =  {this.timings}\n                  filterData           =  {this.state.filterData}\n                  userData             =  {this.props.userData}\n                  settingsData         =  {this.props.settingsData}\n                  createTask           =  {this.props.createTask}\n                  filteredList         =  {this.props.filteredList}\n                  getTaskDetails       =  {this.props.getTaskDetails}\n                  taskDetails          =  {this.props.taskDetails}\n                  deleteTask           =  {this.props.deleteTask}\n                  updateTaskStatus     =  {this.props.updateTaskStatus}\n                  editTask             =  {this.props.editTask}\n                  getTrackDetails      =  {this.props.getTrackDetails}\n                  isTaskProcessing     =  {this.props.isTaskProcessing}\n                  exportTaskCsv        =  {this.props.exportTaskCsv}\n                  csvUrl               =  {this.props.csvUrl}\n                  isTaskCsvExporting   =  {this.props.isTaskCsvExporting}\n                  userType             =  {userType}\n\t\t\t\t\t\tsavedFilterData      =  {filterData}\n               /> : null\n            }\n            {\n               (!isEmpty(this.state.filterData)) ? \n               <TaskList\n                  getHistory        =  {this.getHistory}\n                  taskHistory       =  {this.props.taskHistory}\n                  type              =  {this.state.type}\n                  org_id            =  {this.state.org_id}\n                  searchTxt         =  {this.state.searchTxt}\n                  taskType          =  {taskType}\n                  stores            =  {stores}\n                  locations         =  {locations}\n                  pharmacy          =  {pharmacy}\n                  timings           =  {this.timings}\n                  getTaskDetails    =  {this.props.getTaskDetails}\n                  taskDetails       =  {this.props.taskDetails}\n                  deleteTask        =  {this.props.deleteTask}\n                  updateTaskStatus  =  {this.props.updateTaskStatus}\n                  editTask          =  {this.props.editTask}\n                  settingsData      =  {this.props.settingsData}\n                  getTrackDetails   =  {this.props.getTrackDetails}\n                  filterData        =  {this.state.filterData}\n                  isProcessing      =  {this.props.isProcessing}\n                  savedFilterData   =  {this.props.filterData}\n               />: <div className=\"loader\">Loading....</div>\n            }\n         </main>\n      )\n   }\n}\nexport default withRouter(TaskHistory);"]},"metadata":{},"sourceType":"module"}