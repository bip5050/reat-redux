{"ast":null,"code":"import _defineProperty from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/biplab/Desktop/foodjets/src/containers/Modals/editTaskModal.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Button } from 'reactstrap';\nimport { Modal } from 'react-bootstrap';\nimport DatePicker from \"react-datepicker\";\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { addressFormater } from '../../util/helper';\nimport { error as notifyerror, success as notifysuccess } from '../../util/notify';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { isEmpty, isEqual } from 'lodash';\nimport moment from 'moment-timezone';\nimport { getDateTime } from '../../Helper/common';\n\nvar EditTask = /*#__PURE__*/function (_Component) {\n  _inherits(EditTask, _Component);\n\n  var _super = _createSuper(EditTask);\n\n  function EditTask(props) {\n    var _this;\n\n    _classCallCheck(this, EditTask);\n\n    _this = _super.call(this, props);\n\n    _this.onSelectDate = function (date) {\n      _this.setState({\n        formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n          delivery_date: date\n        })\n      });\n    };\n\n    _this.handleMerchantChange = function (merchant_address) {\n      //console.log('Recipient Address', recipient_address);\n      _this.setState({\n        errors: _objectSpread(_objectSpread({}, _this.state.errors), {}, {\n          merchant_address: !!merchant_address ? \"\" : 'Please enter merchant address'\n        }),\n        merchant_address: merchant_address\n      });\n    };\n\n    _this.handleChange = function (recipient_address) {\n      //console.log('Recipient Address', recipient_address);\n      _this.setState({\n        errors: _objectSpread(_objectSpread({}, _this.state.errors), {}, {\n          recipient_address: !!recipient_address ? \"\" : 'Please enter recipient address'\n        }),\n        recipient_address: recipient_address\n      });\n    };\n\n    _this.handleSelect = function (recipient_address) {\n      var self = _assertThisInitialized(_this);\n\n      var data = {\n        zipcode: '',\n        state_code: '',\n        latitude: '',\n        longitude: '',\n        address: ''\n      };\n      geocodeByAddress(recipient_address).then(function (results) {\n        //console.log(recipient_address, results[0], results[0].formatted_address);\n        data.address = results[0].formatted_address || '';\n        return getLatLng(results[0]);\n      }).then(function (_ref) {\n        var lat = _ref.lat,\n            lng = _ref.lng;\n        //console.log(lat, lng, data.address);\n        var matchExp = /(\\d+) (.+?), (.+?), (.+?) ([0-9]{5})/g;\n\n        if (matchExp.test(data.address)) {\n          var delAddData = _this.props.deliveryAddress;\n          var addressArray = addressFormater(data.address);\n          console.log('Address : ', data.address, addressArray);\n\n          if (!isEmpty(addressArray) && addressArray.validAdrs) {\n            data.latitude = lat;\n            data.longitude = lng;\n            data.address = addressArray.address;\n            data.zipcode = addressArray.zipcode;\n            data.state_code = addressArray.state_code;\n            data.city = addressArray.city;\n            data.country = addressArray.country;\n            data.number = addressArray.number;\n            data.street = addressArray.street; //console.log('AddressBox ###########', data);\n            //this.setState({ address: addressArray.address }); \n\n            self.setState({\n              errors: _objectSpread(_objectSpread({}, self.state.error), {}, {\n                recipient_address: \"\"\n              }),\n              recipient_location: data,\n              recipient_address: data.address\n            });\n          } else {\n            notifyerror('Oops, that does not seem like a valid address. Please try again.');\n            self.setState({\n              errors: _objectSpread(_objectSpread({}, self.state.error), {}, {\n                recipient_address: \"Invalid Address\"\n              }),\n              recipient_location: {} //recipient_address: ''\n\n            });\n          }\n        } else {\n          notifyerror('Oops, that does not seem like a valid address. Please try again.');\n          self.setState({\n            errors: _objectSpread(_objectSpread({}, self.state.error), {}, {\n              recipient_address: \"Invalid Address\"\n            }),\n            recipient_location: {} //recipient_address: ''\n\n          });\n        }\n      }).catch(function (error) {\n        self.setState({\n          errors: _objectSpread(_objectSpread({}, self.state.error), {}, {\n            recipient_address: \"Invalid Address\"\n          }),\n          recipient_location: {}\n        });\n        console.log('Error', error);\n      });\n    };\n\n    _this.handleMerchantSelect = function (merchant_address) {\n      var self = _assertThisInitialized(_this);\n\n      var data = {\n        zipcode: '',\n        state_code: '',\n        latitude: '',\n        longitude: '',\n        address: ''\n      };\n      geocodeByAddress(merchant_address).then(function (results) {\n        data.address = results[0].formatted_address || '';\n        return getLatLng(results[0]);\n      }).then(function (_ref2) {\n        var lat = _ref2.lat,\n            lng = _ref2.lng;\n        //console.log(lat, lng, data.address);\n        var matchExp = /(\\d+) (.+?), (.+?), (.+?) ([0-9]{5})/g;\n\n        if (matchExp.test(data.address)) {\n          var delAddData = _this.props.deliveryAddress;\n          var addressArray = addressFormater(data.address);\n\n          if (!isEmpty(addressArray) && addressArray.validAdrs) {\n            data.latitude = lat;\n            data.longitude = lng;\n            data.address = addressArray.address;\n            data.zipcode = addressArray.zipcode;\n            data.state_code = addressArray.state_code;\n            data.city = addressArray.city;\n            data.country = addressArray.country;\n            data.number = addressArray.number;\n            data.street = addressArray.street;\n            self.setState({\n              errors: _objectSpread(_objectSpread({}, self.state.error), {}, {\n                merchant_address: \"\"\n              }),\n              merchant_location: data,\n              merchant_address: data.address\n            });\n          } else {\n            self.setState({\n              errors: _objectSpread(_objectSpread({}, self.state.error), {}, {\n                merchant_address: \"Invalid Address\"\n              }),\n              merchant_location: {} //merchant_address: ''\n\n            });\n          }\n        } else {\n          self.setState({\n            errors: _objectSpread(_objectSpread({}, self.state.error), {}, {\n              merchant_address: \"Invalid Address\"\n            }),\n            merchant_location: {} //merchant_address: ''\n\n          });\n        }\n      }).catch(function (error) {\n        self.setState({\n          errors: _objectSpread(_objectSpread({}, self.state.error), {}, {\n            merchant_address: \"Invalid Address\"\n          }),\n          merchant_location: {}\n        });\n        console.log('Error', error);\n      });\n    };\n\n    _this.onDateSelect = function (date) {\n      _this.setState({\n        formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n          delivery_date: date\n        })\n      });\n    };\n\n    _this.handleEditClick = function (e) {\n      //e.preventDefault();\n      e.stopImmediatePropagation();\n      console.log('Handle Edit Click');\n    };\n\n    _this.state = {\n      show: false,\n      alcohol: false,\n      signature: true,\n      locations: [],\n      formData: {},\n      startDate: new Date(),\n      settingsData: {},\n      recipient_location: {},\n      merchant_location: {},\n      isProcessing: false,\n      errors: {\n        merchant_address: \"\",\n        recipient_address: \"\",\n        delivery_date: \"\",\n        delivery_time: \"\",\n        tip: \"\"\n      }\n    };\n    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_this));\n    _this.handleEditTask = _this.handleEditTask.bind(_assertThisInitialized(_this));\n    _this.validateForm = _this.validateForm.bind(_assertThisInitialized(_this));\n    _this.onChangeHandle = _this.onChangeHandle.bind(_assertThisInitialized(_this));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.handleMerchantChange = _this.handleMerchantChange.bind(_assertThisInitialized(_this));\n    _this.onDateSelect = _this.onDateSelect.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(EditTask, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener(\"click\", this.handleEditClick);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      //console.log(props.show, this.props.show, props.isProcessing, this.props.isProcessing);\n\n      /* if(props.show !== this.props.show) {\n          this.setState({\n              show: props.show\n          })\n      } */\n      if (props.isProcessing !== this.props.isProcessing) {\n        this.setState({\n          isProcessing: false\n        });\n      }\n\n      if (!isEmpty(props.settingsData) && !isEqual(this.state.settingsData, props.settingsData)) {\n        this.timings = this.timing(props.settingsData.start_time, props.settingsData.end_time);\n        var delivery_time = !!this.timings.key && !!!this.state.formData.delivery_time ? this.timings.key : '';\n        this.setState({\n          settingsData: props.settingsData,\n          formData: _objectSpread(_objectSpread({}, this.state.formData), {}, {\n            delivery_time: delivery_time\n          })\n        });\n      }\n\n      if (!isEqual(props.taskDetails, this.props.taskDetails) && !isEmpty(props.taskDetails)) {\n        var taskDetails = props.taskDetails || {};\n        var tskStatus = 'Scheduled';\n\n        if (taskDetails.tskStatus === 'tsk_proc_hld') {\n          tskStatus = 'Scheduled';\n        } else if (taskDetails.tskStatus === 'tsk_proc_mrchnt') {\n          tskStatus = 'Scheduled';\n        } else if (taskDetails.tskStatus === 'tsk_proc_drv' && taskDetails.driverStatus === 'drv_strt_recpnt_tsk') {\n          tskStatus = 'Picked Up';\n        } else if (taskDetails.tskStatus === 'tsk_proc_drv') {\n          tskStatus = 'Processing';\n        } else if (taskDetails.tskStatus === 'tsk_cmp') {\n          tskStatus = 'Completed';\n        } else if (taskDetails.tskStatus === 'tsk_cncling') {\n          tskStatus = 'Deleted';\n        } else if (taskDetails.tskStatus === 'tsk_cncled') {\n          tskStatus = 'Deleted';\n        }\n\n        if (tskStatus !== 'Scheduled') {\n          notifysuccess({\n            message: \"Task is already in \".concat(tskStatus, \" mode.\")\n          });\n          this.handleClose();\n        }\n\n        var toTime = getDateTime(parseInt(props.taskDetails.completeBefore) * 1000, props.taskDetails.time_zone, 'hh:mm A');\n        var fromTime = getDateTime(parseInt(props.taskDetails.completeAfter) * 1000, props.taskDetails.time_zone, 'hh:mm A'); //let delivery_date       =   moment.tz(parseInt(props.taskDetails.completeAfter) * 1000, props.taskDetails.time_zone).unix();\n\n        var fulldate = moment.tz(parseInt(props.taskDetails.completeAfter) * 1000, props.taskDetails.time_zone);\n        var year = fulldate.format('YYYY');\n        var month = fulldate.format('MM');\n        month = month - 1;\n        var date = fulldate.format('DD');\n        var delivery_date = new Date(year, month, date); //console.log(fulldate.format('YYYY-MM-DD'), year, month, date, dateObj, fulldate.format('x'));\n        //console.log(dateObj, parseInt(props.taskDetails.completeAfter), props.taskDetails.time_zone, moment.tz(parseInt(props.taskDetails.completeAfter) * 1000, props.taskDetails.time_zone).format('lll'), moment.tz(parseInt(props.taskDetails.completeAfter) * 1000, props.taskDetails.time_zone).format('YYYY-MM-DD'));\n\n        this.setState({\n          merchant: props.taskDetails.merchant,\n          recipients: props.taskDetails.recipients,\n          recipient_address: !!props.recpnt_address ? props.recpnt_address : '',\n          merchant_address: !!props.mrchnt_address ? props.mrchnt_address : '',\n          time_zone: props.taskDetails.time_zone,\n          formData: {\n            merchant_notes: !!props.taskDetails.merchant && !!props.taskDetails.merchant.notes ? props.taskDetails.merchant.notes : '',\n            recipient_notes: !!props.taskDetails.recipients && !!props.taskDetails.recipients.notes ? props.taskDetails.recipients.notes : '',\n            tip: props.taskDetails.tip,\n            delivery_date: delivery_date,\n            delivery_time: fromTime + '-' + toTime\n          }\n        });\n      }\n    }\n    /* shouldComponentUpdate(nextProps) {\n        console.log('Should Update : ', nextProps);\n        return true;\n    } */\n\n  }, {\n    key: \"handleClose\",\n    value: function handleClose() {\n      this.setState({\n        show: false\n      });\n      this.props.handleClose();\n    }\n  }, {\n    key: \"timing\",\n    value: function timing(start, end) {\n      //console.log('Start End : ', start, end);\n      var today = moment().format('MM/DD/YYYY');\n      var now = moment().unix();\n      var gap = 30 * 60;\n      var key = \"\";\n      var stimestamp = moment(today + ' ' + start, 'MM/DD/YYYY H:mm').unix();\n      var etimestamp = moment(today + ' ' + end, 'MM/DD/YYYY H:mm').unix();\n      var data = [];\n\n      for (var i = stimestamp; i < etimestamp; i = i + gap) {\n        data.push({\n          t: moment(i * 1000).format('hh:mm A') + '-' + moment((i + gap) * 1000).format('hh:mm A')\n        });\n\n        if (now >= i && now <= i + gap) {\n          key = moment(i * 1000).format('hh:mm A') + '-' + moment((i + gap) * 1000).format('hh:mm A');\n        }\n      }\n\n      return {\n        data: data,\n        key: key\n      };\n    }\n  }, {\n    key: \"utc\",\n    value: function utc(date, time, tz) {\n      var datetime = moment(date).format('MM/DD/YYYY') + ' ' + time;\n      return moment.tz(datetime, 'MM/DD/YYYY hh:mm A', tz).utc().unix();\n    }\n  }, {\n    key: \"handleEditTask\",\n    value: function handleEditTask(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      var isError = this.validateForm(); //console.log(this.props.taskDetails);\n\n      if (!!!isError) {\n        var formData = _objectSpread({}, this.state.formData);\n\n        var timeZone = this.state.time_zone;\n        var time = formData.delivery_time.split('-');\n        var from_time = time[0];\n        var to_time = time[1];\n        var completeAfter = this.utc(formData.delivery_date, from_time, timeZone);\n        var completeBefore = this.utc(formData.delivery_date, to_time, timeZone);\n        var recipient = this.state.recipient_location || {};\n        var merchant = this.state.merchant_location || {};\n        var data = {};\n        data.merchant_notes = formData.merchant_notes || '';\n        data.recipient_notes = formData.recipient_notes || '';\n        data.complete_after = completeAfter || '';\n        data.complete_before = completeBefore || '';\n        data.tip = formData.tip || 0;\n\n        if (!isEmpty(recipient)) {\n          data.recipient = {\n            location: [recipient.longitude, recipient.latitude],\n            address: {\n              state: recipient.state_code,\n              postalCode: recipient.zipcode,\n              country: recipient.country,\n              city: recipient.city,\n              street: recipient.street,\n              number: recipient.number\n            }\n          };\n        }\n\n        if (!isEmpty(merchant)) {\n          data.merchant = {\n            location: [merchant.longitude, merchant.latitude],\n            address: {\n              state: merchant.state_code,\n              postalCode: merchant.zipcode,\n              country: merchant.country,\n              city: merchant.city,\n              street: merchant.street,\n              number: merchant.number\n            },\n            store_id: this.props.taskDetails.store_id\n          };\n        }\n\n        this.setState({\n          isProcessing: true\n        });\n        this.props.editTask({\n          uuid: this.props.taskDetails.uuid,\n          params: data\n        });\n        setTimeout(function () {\n          _this2.handleClose();\n        }, 1000);\n      }\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm() {\n      var formData = this.state.formData || {};\n      var errors = this.state.errors || {};\n      var isError = false; //console.log('Errors : ', this.state.recipient_address, errors.recipient_address, (!!!this.state.recipient_address || !!errors.recipient_address));\n\n      if (!!errors.merchant_address || !!errors.recipient_address) {\n        isError = true;\n      }\n\n      if (!!!formData.delivery_date) {\n        errors.delivery_date = \"Please enter the delivery date\";\n        isError = true;\n      }\n\n      if (!!!formData.delivery_time) {\n        errors.delivery_time = \"Please enter the delivery time\";\n        isError = true;\n      }\n\n      if (!!!this.state.merchant_address || !!errors.merchant_address) {\n        errors.merchant_address = \"Please enter merchant address\";\n        isError = true;\n      }\n\n      if (!!!this.state.recipient_address || !!errors.recipient_address) {\n        errors.recipient_address = \"Please enter recipient address\";\n        isError = true;\n      }\n      /* if(formData.tip === '' || formData.tip === null || formData.tip === undefined) {\n          errors.tip                  =   \"Please enter the tip\";\n          isError                     =   true;\n      } */\n\n\n      if (!!formData.tip && isNaN(formData.tip)) {\n        errors.tip = \"Tip amount should be number\";\n        isError = true;\n      }\n\n      this.setState({\n        errors: errors,\n        isError: isError\n      });\n      return isError;\n    }\n  }, {\n    key: \"onChangeHandle\",\n    value: function onChangeHandle(e) {\n      var self = this;\n\n      var formData = _objectSpread({}, this.state.formData);\n\n      var name = e.target.name;\n      var value = e.target.value;\n      formData[name] = value;\n\n      var errors = _objectSpread({}, this.state.errors);\n\n      errors[name] = \"\";\n      this.setState({\n        formData: formData,\n        errors: errors\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      //console.log('Task Details : ', this.props.taskDetails);\n      var taskDetails = this.props.taskDetails || {};\n      var show = this.props.show || false;\n      var errors = this.state.errors || {};\n      var err_merchant_address = errors.merchant_address === \"\" ? null : errors.merchant_address;\n      var err_recipient_address = errors.recipient_address === \"\" ? null : errors.recipient_address;\n      var err_delivery_date = errors.delivery_date === \"\" ? null : errors.delivery_date;\n      var err_delivery_time = errors.delivery_time === \"\" ? null : errors.delivery_time;\n      var err_tip = errors.tip === \"\" ? null : errors.tip;\n      var formData = this.state.formData || {}; //let timings               =   this.timings.data || [];\n\n      var timings = !!this.timings && !!this.timings.data ? this.timings.data : [];\n      var isDisabled = false;\n\n      if (!!err_merchant_address || !!err_recipient_address || !!err_delivery_date || !!err_delivery_time || !!err_tip) {\n        isDisabled = true;\n      } //console.log('Error : ', errors);\n\n\n      var rsSrchStyles = {\n        input: {\n          width: '260px',\n          padding: '0px 15px 0px 35px',\n          color: '#333',\n          margin: '0'\n        },\n        autocompleteContainer: {\n          borderRadius: '0 0 3px 3px',\n          zIndex: '999',\n          background: 'url(/static/images/pow_google.jpg) no-repeat right bottom #fff',\n          position: 'relative',\n          border: '1px solid #e8e8e8',\n          boxShadow: '1px 5px 10px rgba(68,68,68,0.2)'\n        },\n        autocompleteItem: _defineProperty({\n          textAlign: 'left',\n          fontSize: '12px',\n          padding: '5px 8px 5px 30px',\n          lineHeight: '20px',\n          color: '#999',\n          background: '10px 8px #fff',\n          margin: '0',\n          borderTop: 'none',\n          borderBottom: '1px solid #ccc'\n        }, \"background\", 'url(/static/images/location_google.png) no-repeat 10px 8px #fff'),\n        autocompleteItemActive: {\n          color: '#E44500'\n        }\n      }; //const renderFunc    =   ;\n\n      return !isEmpty(this.props.taskDetails) ? /*#__PURE__*/React.createElement(Modal, {\n        size: \"md\",\n        className: \"c-modal\",\n        data: \"ignore-outer-click\",\n        show: show,\n        onHide: this.props.handleClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Header, {\n        closeButton: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 21\n        }\n      }, \"Edit Task\")), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleEditTask,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        noGutters: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        sm: \"12\",\n        className: \"c_info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"delivery\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 37\n        }\n      }, \"Delivery Date\"), /*#__PURE__*/React.createElement(DatePicker, {\n        className: \"t_box\".concat(!!err_delivery_date ? ' error' : ''),\n        selected: formData.delivery_date,\n        onChange: this.onDateSelect,\n        minDate: new Date(),\n        placeholderText: \"Today\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 37\n        }\n      }, \"Time\"), /*#__PURE__*/React.createElement(\"select\", {\n        className: \"s_box\".concat(!!err_delivery_time ? ' error' : ''),\n        name: \"delivery_time\",\n        onChange: this.onChangeHandle,\n        value: formData.delivery_time,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 41\n        }\n      }, \"-- Select --\"), (timings || []).map(function (v, k) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: k,\n          value: v.t,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 53\n          }\n        }, v.t);\n      })), err_delivery_time && /*#__PURE__*/React.createElement(\"small\", {\n        className: \"text-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 59\n        }\n      }, err_delivery_time)), !!!taskDetails.driver_id ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group pr\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 41\n        }\n      }, \"Merchant Address\"), /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n        value: this.state.merchant_address.toString(),\n        onChange: this.handleMerchantChange,\n        onSelect: this.handleMerchantSelect,\n        styles: rsSrchStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 41\n        }\n      }, function (_ref3) {\n        var getInputProps = _ref3.getInputProps,\n            suggestions = _ref3.suggestions,\n            getSuggestionItemProps = _ref3.getSuggestionItemProps,\n            loading = _ref3.loading;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps({\n          placeholder: 'Enter Address',\n          className: !!err_merchant_address ? \"t_box error\" : \"t_box\"\n        }), {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 53\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 53\n          }\n        }, loading && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 65\n          }\n        }, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: '#fafafa',\n            cursor: 'pointer'\n          } : {\n            backgroundColor: '#ffffff',\n            cursor: 'pointer'\n          };\n          return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 61\n            }\n          }, suggestion.description));\n        })));\n      })) : null, !!!taskDetails.driver_id ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group pr\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"raddress\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 41\n        }\n      }, \"Recipient Address\"), /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n        value: this.state.recipient_address.toString(),\n        onChange: this.handleChange,\n        onSelect: this.handleSelect,\n        styles: rsSrchStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 41\n        }\n      }, function (_ref4) {\n        var getInputProps = _ref4.getInputProps,\n            suggestions = _ref4.suggestions,\n            getSuggestionItemProps = _ref4.getSuggestionItemProps,\n            loading = _ref4.loading;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps({\n          placeholder: 'Enter Address',\n          className: !!err_recipient_address ? \"t_box error\" : \"t_box\"\n        }), {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 53\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 53\n          }\n        }, loading && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 65\n          }\n        }, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: '#fafafa',\n            cursor: 'pointer'\n          } : {\n            backgroundColor: '#ffffff',\n            cursor: 'pointer'\n          };\n          return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 61\n            }\n          }, suggestion.description));\n        })));\n      })) : null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"tip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 37\n        }\n      }, \"Tip\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"0.00\",\n        className: \"t_box\".concat(!!err_tip ? ' error' : ''),\n        name: \"tip\",\n        onChange: this.onChangeHandle,\n        value: formData.tip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 37\n        }\n      }), err_tip && /*#__PURE__*/React.createElement(\"small\", {\n        className: \"text-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 49\n        }\n      }, err_tip)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"d-notes\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 37\n        }\n      }, \"Merchant Notes\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"t_box\",\n        name: \"merchant_notes\",\n        onChange: this.onChangeHandle,\n        value: formData.merchant_notes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"notes\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 37\n        }\n      }, \"Recipient Notes\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"t_box\",\n        name: \"recipient_notes\",\n        onChange: this.onChangeHandle,\n        value: formData.recipient_notes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 37\n        }\n      }))))), /*#__PURE__*/React.createElement(Modal.Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        disabled: isDisabled || !!this.state.isProcessing,\n        className: !this.state.isProcessing && !isDisabled ? 'active' : '',\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 25\n        }\n      }, !!this.state.isProcessing ? 'Processing..' : 'Submit')))) : null;\n    }\n  }]);\n\n  return EditTask;\n}(Component);\n\nexport default EditTask;","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/Modals/editTaskModal.js"],"names":["React","Component","Row","Col","Button","Modal","DatePicker","addressFormater","error","notifyerror","success","notifysuccess","PlacesAutocomplete","geocodeByAddress","getLatLng","isEmpty","isEqual","moment","getDateTime","EditTask","props","onSelectDate","date","setState","formData","state","delivery_date","handleMerchantChange","merchant_address","errors","handleChange","recipient_address","handleSelect","self","data","zipcode","state_code","latitude","longitude","address","then","results","formatted_address","lat","lng","matchExp","test","delAddData","deliveryAddress","addressArray","console","log","validAdrs","city","country","number","street","recipient_location","catch","handleMerchantSelect","merchant_location","onDateSelect","handleEditClick","e","stopImmediatePropagation","show","alcohol","signature","locations","startDate","Date","settingsData","isProcessing","delivery_time","tip","handleClose","bind","handleEditTask","validateForm","onChangeHandle","document","addEventListener","timings","timing","start_time","end_time","key","taskDetails","tskStatus","driverStatus","message","toTime","parseInt","completeBefore","time_zone","fromTime","completeAfter","fulldate","tz","year","format","month","merchant","recipients","recpnt_address","mrchnt_address","merchant_notes","notes","recipient_notes","start","end","today","now","unix","gap","stimestamp","etimestamp","i","push","t","time","datetime","utc","preventDefault","isError","timeZone","split","from_time","to_time","recipient","complete_after","complete_before","location","postalCode","store_id","editTask","uuid","params","setTimeout","isNaN","name","target","value","err_merchant_address","err_recipient_address","err_delivery_date","err_delivery_time","err_tip","isDisabled","rsSrchStyles","input","width","padding","color","margin","autocompleteContainer","borderRadius","zIndex","background","position","border","boxShadow","autocompleteItem","textAlign","fontSize","lineHeight","borderTop","borderBottom","autocompleteItemActive","map","v","k","driver_id","toString","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","suggestion","active","style","backgroundColor","cursor","description"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Row,\n    Col,\n    Button\n} from 'reactstrap';\nimport { Modal } from 'react-bootstrap';\nimport DatePicker from \"react-datepicker\";\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { addressFormater } from '../../util/helper';\nimport {error as notifyerror, success as notifysuccess} from '../../util/notify';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport {isEmpty, isEqual} from 'lodash';\nimport moment from 'moment-timezone';\nimport { getDateTime } from '../../Helper/common';\n\nclass EditTask extends Component{\n    constructor(props) {\n        super(props);\n        this.state              =   {\n           show                     :   false,\n           alcohol                  :   false,\n           signature                :   true,\n           locations                :   [],\n           formData                 :   {},\n           startDate                :   new Date(),\n           settingsData             :   {},\n           recipient_location       :   {},\n           merchant_location        :   {},\n           isProcessing             :   false,\n           errors:{\n               merchant_address:\"\",\n               recipient_address:\"\",\n               delivery_date:\"\",\n               delivery_time:\"\",\n               tip:\"\"\n           }\n        }\n        this.handleClose            =   this.handleClose.bind(this);\n        this.handleEditTask         =   this.handleEditTask.bind(this);\n        this.validateForm           =   this.validateForm.bind(this);\n        this.onChangeHandle         =   this.onChangeHandle.bind(this);\n        this.handleChange           =   this.handleChange.bind(this);\n        this.handleMerchantChange   =   this.handleMerchantChange.bind(this);\n        this.onDateSelect           =   this.onDateSelect.bind(this);\n    }    \n\n    onSelectDate = (date) => {\n        this.setState({\n            formData: {...this.state.formData,\n                delivery_date   :  date\n            }\n        })\n    }\n \n    handleMerchantChange = merchant_address => {\n        //console.log('Recipient Address', recipient_address);\n        this.setState({\n            errors: {\n                ...this.state.errors,\n                merchant_address:(!!merchant_address) ? \"\" : 'Please enter merchant address'\n            },\n            merchant_address:merchant_address\n        });\n    };   \n \n    handleChange = recipient_address => {\n        //console.log('Recipient Address', recipient_address);\n        this.setState({\n            errors: {\n                ...this.state.errors,\n                recipient_address:(!!recipient_address) ? \"\" : 'Please enter recipient address'\n            },\n            recipient_address : recipient_address\n        });\n    };\n\n    handleSelect = recipient_address => {\n        let self    =   this;\n        let data = {\n            zipcode: '',\n            state_code: '',\n            latitude: '',\n            longitude: '',\n            address: ''\n        };\n        geocodeByAddress(recipient_address)\n        .then((results) => {\n            //console.log(recipient_address, results[0], results[0].formatted_address);\n            data.address = results[0].formatted_address || '';\n            return getLatLng(results[0]);\n        })\n        .then(({ lat, lng }) => {\n            //console.log(lat, lng, data.address);\n            let matchExp = /(\\d+) (.+?), (.+?), (.+?) ([0-9]{5})/g;\n            if(matchExp.test(data.address)){\n                let delAddData = this.props.deliveryAddress;\n                let addressArray = addressFormater(data.address);\n                console.log('Address : ', data.address, addressArray);\n                if(!isEmpty(addressArray) && addressArray.validAdrs){\n                    data.latitude = lat;\n                    data.longitude = lng;\n                    data.address = addressArray.address;\n                    data.zipcode = addressArray.zipcode;\n                    data.state_code = addressArray.state_code;\n                    data.city = addressArray.city;\n                    data.country = addressArray.country;\n                    data.number = addressArray.number;\n                    data.street = addressArray.street;\n\n                    //console.log('AddressBox ###########', data);\n                    //this.setState({ address: addressArray.address }); \n                    self.setState({\n                        errors: {\n                            ...self.state.error,\n                            recipient_address:\"\"\n                        },\n                        recipient_location: data,\n                        recipient_address: data.address\n                    }); \n                } else {\n                    notifyerror('Oops, that does not seem like a valid address. Please try again.');\n                    self.setState({\n                        errors: {\n                            ...self.state.error,\n                            recipient_address:\"Invalid Address\"\n                        },\n                        recipient_location: {}\n                        //recipient_address: ''\n                    }); \n                }             \n            } else {\n                notifyerror('Oops, that does not seem like a valid address. Please try again.');\n                self.setState({\n                    errors: {\n                        ...self.state.error,\n                        recipient_address:\"Invalid Address\"\n                    },\n                    recipient_location: {}\n                    //recipient_address: ''\n                }); \n            }\n        })\n        .catch(error => {\n            self.setState({\n                errors: {\n                    ...self.state.error,\n                    recipient_address:\"Invalid Address\"\n                },\n                recipient_location: {}\n            });\n            console.log('Error', error);\n        });\n    };    \n\n    handleMerchantSelect = merchant_address => {\n        let self    =   this;\n        let data = {\n            zipcode: '',\n            state_code: '',\n            latitude: '',\n            longitude: '',\n            address: ''\n        };\n        geocodeByAddress(merchant_address)\n        .then((results) => {\n            data.address = results[0].formatted_address || '';\n            return getLatLng(results[0]);\n        })\n        .then(({ lat, lng }) => {\n            //console.log(lat, lng, data.address);\n            let matchExp = /(\\d+) (.+?), (.+?), (.+?) ([0-9]{5})/g;\n            if(matchExp.test(data.address)){\n                let delAddData = this.props.deliveryAddress;\n                let addressArray = addressFormater(data.address);\n                if(!isEmpty(addressArray) && addressArray.validAdrs){\n                    data.latitude = lat;\n                    data.longitude = lng;\n                    data.address = addressArray.address;\n                    data.zipcode = addressArray.zipcode;\n                    data.state_code = addressArray.state_code;\n                    data.city = addressArray.city;\n                    data.country = addressArray.country;\n                    data.number = addressArray.number;\n                    data.street = addressArray.street;\n                    self.setState({\n                        errors: {\n                            ...self.state.error,\n                            merchant_address:\"\"\n                        },\n                        merchant_location: data,\n                        merchant_address: data.address\n                    }); \n                } else {\n                    self.setState({\n                        errors: {\n                            ...self.state.error,\n                            merchant_address:\"Invalid Address\"\n                        },\n                        merchant_location: {}\n                        //merchant_address: ''\n                    }); \n                }          \n            } else {\n                self.setState({\n                    errors: {\n                        ...self.state.error,\n                        merchant_address:\"Invalid Address\"\n                    },\n                    merchant_location: {}\n                    //merchant_address: ''\n                }); \n            }\n        })\n        .catch(error => {\n            self.setState({\n                errors: {\n                    ...self.state.error,\n                    merchant_address:\"Invalid Address\"\n                },\n                merchant_location: {}\n            });\n            console.log('Error', error);\n        });\n    };\n\n    onDateSelect = date => {\n        this.setState({\n            formData: { ...this.state.formData, delivery_date: date}\n        });\n    };\n\n    handleEditClick = (e)  => {\n        //e.preventDefault();\n        e.stopImmediatePropagation()\n        console.log('Handle Edit Click');\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"click\", this.handleEditClick);        \n    }\n\n    componentWillReceiveProps(props) {\n        //console.log(props.show, this.props.show, props.isProcessing, this.props.isProcessing);\n        /* if(props.show !== this.props.show) {\n            this.setState({\n                show: props.show\n            })\n        } */\n        if(props.isProcessing !== this.props.isProcessing) {\n            this.setState({\n                isProcessing: false\n            })\n        }\n        if(!isEmpty(props.settingsData) && !isEqual(this.state.settingsData, props.settingsData)) {\n            this.timings        =   this.timing(props.settingsData.start_time, props.settingsData.end_time);           \n            let delivery_time   =   (!!this.timings.key && !!!this.state.formData.delivery_time) ? this.timings.key : '';\n            this.setState({\n                settingsData:   props.settingsData,\n                formData: { \n                    ...this.state.formData, delivery_time: delivery_time\n                }\n            })\n        }\n        if(!isEqual(props.taskDetails, this.props.taskDetails) && !isEmpty(props.taskDetails)) {\n            let taskDetails =   props.taskDetails || {};\n            let tskStatus = 'Scheduled';\n            if(taskDetails.tskStatus === 'tsk_proc_hld') {\n                tskStatus = 'Scheduled'\n            } else if(taskDetails.tskStatus === 'tsk_proc_mrchnt') {\n                tskStatus = 'Scheduled'\n            } else if(taskDetails.tskStatus === 'tsk_proc_drv' && taskDetails.driverStatus === 'drv_strt_recpnt_tsk') {\n                tskStatus = 'Picked Up';\n            } else if(taskDetails.tskStatus === 'tsk_proc_drv') {\n                tskStatus = 'Processing'\n            } else if(taskDetails.tskStatus === 'tsk_cmp') {\n                tskStatus = 'Completed'\n            } else if(taskDetails.tskStatus === 'tsk_cncling') {\n                tskStatus = 'Deleted'\n            } else if(taskDetails.tskStatus === 'tsk_cncled') {\n                tskStatus = 'Deleted'\n            }\n\n            if(tskStatus !== 'Scheduled') {\n                notifysuccess({message: `Task is already in ${tskStatus} mode.`});\n                this.handleClose();\n            }\n            \n            let toTime              =   getDateTime(parseInt(props.taskDetails.completeBefore) * 1000, props.taskDetails.time_zone, 'hh:mm A');\n            let fromTime            =   getDateTime(parseInt(props.taskDetails.completeAfter) * 1000, props.taskDetails.time_zone, 'hh:mm A');\n            //let delivery_date       =   moment.tz(parseInt(props.taskDetails.completeAfter) * 1000, props.taskDetails.time_zone).unix();\n            let fulldate            =   moment.tz(parseInt(props.taskDetails.completeAfter) * 1000, props.taskDetails.time_zone);\n            let year                =   fulldate.format('YYYY');\n            let month               =   fulldate.format('MM');\n            month                   =   month - 1; \n            let date                =   fulldate.format('DD');\n            let delivery_date       =   new Date(year, month, date);\n            //console.log(fulldate.format('YYYY-MM-DD'), year, month, date, dateObj, fulldate.format('x'));\n            //console.log(dateObj, parseInt(props.taskDetails.completeAfter), props.taskDetails.time_zone, moment.tz(parseInt(props.taskDetails.completeAfter) * 1000, props.taskDetails.time_zone).format('lll'), moment.tz(parseInt(props.taskDetails.completeAfter) * 1000, props.taskDetails.time_zone).format('YYYY-MM-DD'));\n            this.setState({\n                merchant: props.taskDetails.merchant,\n                recipients: props.taskDetails.recipients,\n                recipient_address   :   (!!props.recpnt_address) ? props.recpnt_address : '',\n                merchant_address    :   (!!props.mrchnt_address) ? props.mrchnt_address : '',\n                time_zone           :   props.taskDetails.time_zone,\n                formData : {\n                    merchant_notes      :   (!!props.taskDetails.merchant && !!props.taskDetails.merchant.notes) ? props.taskDetails.merchant.notes : '',\n                    recipient_notes     :   (!!props.taskDetails.recipients && !!props.taskDetails.recipients.notes) ? props.taskDetails.recipients.notes : '',\n                    tip                 :   props.taskDetails.tip,\n                    delivery_date       :   delivery_date,\n                    delivery_time       :   fromTime + '-' + toTime\n                }\n            })\n        }\n    }\n\n    /* shouldComponentUpdate(nextProps) {\n        console.log('Should Update : ', nextProps);\n        return true;\n    } */\n\n    handleClose() {\n        this.setState({show: false});\n        this.props.handleClose();\n    }\n\n    timing(start, end) {\n       //console.log('Start End : ', start, end);\n       let today = moment().format('MM/DD/YYYY');\n       let now = moment().unix();\n       let gap = 30 * 60;\n       let key = \"\";\n       let stimestamp = moment(today+' '+start, 'MM/DD/YYYY H:mm').unix();\n       let etimestamp = moment(today+' '+end, 'MM/DD/YYYY H:mm').unix();\n       let data = [];\n       for(let i=stimestamp; i<etimestamp; i=i+gap) {\n          data.push({\n             t: moment(i*1000).format('hh:mm A')+'-'+moment((i+gap)*1000).format('hh:mm A')\n          });\n          if(now >= i && now <= i+gap ) {\n             key = moment(i*1000).format('hh:mm A')+'-'+moment((i+gap)*1000).format('hh:mm A');\n          }\n       }\n       return {data:data, key: key};\n    }\n\n    utc(date, time, tz) {\n        let datetime = moment(date).format('MM/DD/YYYY')+' '+time;\n        return moment.tz(datetime, 'MM/DD/YYYY hh:mm A', tz).utc().unix();\n    }\n\n    handleEditTask(e) {\n        e.preventDefault();\n        let isError             =   this.validateForm();\n        //console.log(this.props.taskDetails);\n        if(!!!isError) {\n            let formData            =   {...this.state.formData};\n            let timeZone            =   this.state.time_zone;\n            let time                =   formData.delivery_time.split('-');\n            let from_time           =   time[0];\n            let to_time             =   time[1];\n            let completeAfter       =   this.utc(formData.delivery_date,  from_time, timeZone);\n            let completeBefore      =   this.utc(formData.delivery_date, to_time, timeZone);\n            let recipient           =   this.state.recipient_location || {};\n            let merchant            =   this.state.merchant_location || {};\n            let data                =   {};\n            data.merchant_notes     =   formData.merchant_notes || '';\n            data.recipient_notes    =   formData.recipient_notes || '';\n            data.complete_after     =   completeAfter || '';\n            data.complete_before    =   completeBefore || '';\n            data.tip                =   formData.tip || 0;\n            if(!isEmpty(recipient)){\n                data.recipient      =   {\n                    location        :   [recipient.longitude, recipient.latitude],\n                    address         :   {\n                        state       :   recipient.state_code,\n                        postalCode  :   recipient.zipcode,\n                        country     :   recipient.country,\n                        city        :   recipient.city,\n                        street      :   recipient.street,\n                        number      :   recipient.number\n                    }\n                }\n            }\n            \n            if(!isEmpty(merchant)){\n                data.merchant      =   {\n                    location        :   [merchant.longitude, merchant.latitude],\n                    address         :   {\n                        state       :   merchant.state_code,\n                        postalCode  :   merchant.zipcode,\n                        country     :   merchant.country,\n                        city        :   merchant.city,\n                        street      :   merchant.street,\n                        number      :   merchant.number\n                    },\n                    store_id        :   this.props.taskDetails.store_id\n                }\n            }\n            this.setState({isProcessing: true});\n            this.props.editTask({uuid: this.props.taskDetails.uuid, params: data});\n            setTimeout(() => {\n                this.handleClose()\n            }, 1000);\n        }\n    }\n    \n    validateForm(){      \n        let formData                    =   this.state.formData || {};\n        let errors                      =   this.state.errors || {};\n        let isError                     =   false;\n        //console.log('Errors : ', this.state.recipient_address, errors.recipient_address, (!!!this.state.recipient_address || !!errors.recipient_address));\n        if(!!errors.merchant_address || !!errors.recipient_address) {\n            isError                     =   true;\n        }\n\n        if(!!!formData.delivery_date) {\n            errors.delivery_date        =   \"Please enter the delivery date\";\n            isError                     =   true;\n        }\n\n        if(!!!formData.delivery_time) {\n            errors.delivery_time        =   \"Please enter the delivery time\";\n            isError                     =   true;\n        }\n\n        if(!!!this.state.merchant_address || !!errors.merchant_address) {\n            errors.merchant_address     =   \"Please enter merchant address\";\n            isError                     =   true;\n        }\n\n        if(!!!this.state.recipient_address || !!errors.recipient_address) {\n            errors.recipient_address    =   \"Please enter recipient address\";\n            isError                     =   true;\n        }\n\n        /* if(formData.tip === '' || formData.tip === null || formData.tip === undefined) {\n            errors.tip                  =   \"Please enter the tip\";\n            isError                     =   true;\n        } */\n\n        if(!!formData.tip && isNaN(formData.tip)) {\n            errors.tip                  =   \"Tip amount should be number\";\n            isError                     =   true;\n        }\n\n        this.setState({errors:errors, isError: isError});\n        return isError;\n    }\n\n    onChangeHandle(e) {\n        let self                    =   this;\n        let formData                =   { ...this.state.formData};\n        const name                  =   e.target.name;\n        const value\t\t            =   e.target.value\n        formData[name]              =   value;\n        let errors                  =   {...this.state.errors};\n        errors[name]                =   \"\";\n        this.setState({ formData: formData, errors: errors });\n    }\n\n    render() {\n        //console.log('Task Details : ', this.props.taskDetails);\n        let taskDetails             =   this.props.taskDetails || {};\n        let show                    =   this.props.show || false;\n        let errors                  =   this.state.errors || {};\n        const err_merchant_address  =   ( errors.merchant_address === \"\" ) ? null : errors.merchant_address;\n        const err_recipient_address =   ( errors.recipient_address === \"\" ) ? null : errors.recipient_address;\n        const err_delivery_date     =   ( errors.delivery_date === \"\" ) ? null : errors.delivery_date;\n        const err_delivery_time     =   ( errors.delivery_time === \"\" ) ? null : errors.delivery_time;\n        const err_tip               =   ( errors.tip === \"\" ) ? null : errors.tip;\n        let formData                =   this.state.formData || {};\n        //let timings               =   this.timings.data || [];\n        let timings                 =   (!!this.timings && !!this.timings.data) ? this.timings.data : [];\n        let isDisabled          =   false;\n        if(!!err_merchant_address\n            || !!err_recipient_address\n            || !!err_delivery_date\n            || !!err_delivery_time\n            || !!err_tip) {\n            isDisabled          =   true;\n        }\n        //console.log('Error : ', errors);\n        const rsSrchStyles = {\n            input: {\n                width: '260px',\n                padding: '0px 15px 0px 35px',\n                color: '#333',\n                margin:'0'\n            },\n            autocompleteContainer: {\n                borderRadius: '0 0 3px 3px',\n                zIndex: '999',\n                background: 'url(/static/images/pow_google.jpg) no-repeat right bottom #fff',\n                position: 'relative',\n                border: '1px solid #e8e8e8',\n                boxShadow:'1px 5px 10px rgba(68,68,68,0.2)',\n            },\n            autocompleteItem: {\n                textAlign: 'left',\n                fontSize: '12px',\n                padding: '5px 8px 5px 30px',\n                lineHeight:'20px',\n                color: '#999',\n                background: '10px 8px #fff',\n                margin: '0',\n                borderTop:'none',\n                borderBottom: '1px solid #ccc',\n                background: 'url(/static/images/location_google.png) no-repeat 10px 8px #fff'\n            },\n            autocompleteItemActive: { color: '#E44500' }\n        };\n\n        //const renderFunc    =   ;\n        return (\n            (!isEmpty(this.props.taskDetails)) ?\n            <Modal size=\"md\" className=\"c-modal\" data=\"ignore-outer-click\" show={show} onHide={this.props.handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Task</Modal.Title>\n                </Modal.Header>\n                <form onSubmit={this.handleEditTask}>\n                    <Modal.Body>\n                        <Row noGutters>\n                            <Col md=\"12\" sm=\"12\" className=\"c_info\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"delivery\">Delivery Date</label>\n                                    <DatePicker className={`t_box${(!!err_delivery_date) ? ' error' : ''}`}  selected={formData.delivery_date} onChange={this.onDateSelect} minDate={new Date()} placeholderText=\"Today\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"time\">Time</label>\n                                    <select className={`s_box${(!!err_delivery_time) ? ' error' : ''}`} name=\"delivery_time\" onChange={this.onChangeHandle} value={formData.delivery_time}>\n                                        <option >-- Select --</option>\n                                        {\n                                            (timings || []).map((v, k)    =>  {\n                                                return (\n                                                    <option key={k} value={v.t}>{v.t}</option>\n                                                )\n                                            })\n                                        }\n                                    </select>\n                                    {err_delivery_time && <small className=\"text-danger\">{err_delivery_time}</small>}\n                                </div>\n                                {\n                                    (!!!taskDetails.driver_id) ?\n                                    <div className=\"form-group pr\">\n                                        <label htmlFor=\"address\">Merchant Address</label>\n                                        <PlacesAutocomplete\n                                            value={this.state.merchant_address.toString()}\n                                            onChange={this.handleMerchantChange}\n                                            onSelect={this.handleMerchantSelect}\n                                            styles={rsSrchStyles}\n                                        >\n                                            {\n                                                ({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                                                <div>\n                                                    <input\n                                                    {...getInputProps({\n                                                        placeholder: 'Enter Address',\n                                                        className: !!err_merchant_address  ? \"t_box error\" : \"t_box\",\n                                                    })}\n                                                    />\n                                                    <div className=\"autocomplete-dropdown-container\">\n                                                    {loading && <div>Loading...</div>}\n                                                    {suggestions.map(suggestion => {\n                                                        const className = suggestion.active\n                                                        ? 'suggestion-item--active'\n                                                        : 'suggestion-item';\n                                                        // inline style for demonstration purpose\n                                                        const style = suggestion.active\n                                                        ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                                                        : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                                                        return (\n                                                        <div\n                                                            {...getSuggestionItemProps(suggestion, {\n                                                            className,\n                                                            style,\n                                                            })}\n                                                        >\n                                                            <span>{suggestion.description}</span>\n                                                        </div>\n                                                        );\n                                                    })}\n                                                    </div>\n                                                </div>\n                                                )\n                                            }\n                                        </PlacesAutocomplete>\n                                    </div> : null\n                                }\n                                {\n                                    (!!!taskDetails.driver_id) ?\n                                    <div className=\"form-group pr\">\n                                        <label htmlFor=\"raddress\">Recipient Address</label>\n                                        <PlacesAutocomplete\n                                            value={this.state.recipient_address.toString()}\n                                            onChange={this.handleChange}\n                                            onSelect={this.handleSelect}\n                                            styles={rsSrchStyles}\n                                        >\n                                            {\n                                                ({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                                                <div>\n                                                    <input\n                                                    {...getInputProps({\n                                                        placeholder: 'Enter Address',\n                                                        className: !!err_recipient_address  ? \"t_box error\" : \"t_box\",\n                                                    })}\n                                                    />\n                                                    <div className=\"autocomplete-dropdown-container\">\n                                                    {loading && <div>Loading...</div>}\n                                                    {suggestions.map(suggestion => {\n                                                        const className = suggestion.active\n                                                        ? 'suggestion-item--active'\n                                                        : 'suggestion-item';\n                                                        // inline style for demonstration purpose\n                                                        const style = suggestion.active\n                                                        ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                                                        : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                                                        return (\n                                                        <div\n                                                            {...getSuggestionItemProps(suggestion, {\n                                                            className,\n                                                            style,\n                                                            })}\n                                                        >\n                                                            <span>{suggestion.description}</span>\n                                                        </div>\n                                                        );\n                                                    })}\n                                                    </div>\n                                                </div>\n                                                )\n                                            }\n                                        </PlacesAutocomplete>\n                                    </div> : null\n                                }\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"tip\">Tip</label>\n                                    <input type=\"text\" placeholder=\"0.00\" className={`t_box${(!!err_tip) ? ' error' : ''}`} name=\"tip\" onChange={this.onChangeHandle} value={formData.tip}/>\n                                    {err_tip && <small className=\"text-danger\">{err_tip}</small>}\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"d-notes\">Merchant Notes</label>\n                                    <input type=\"text\" className=\"t_box\" name=\"merchant_notes\" onChange={this.onChangeHandle} value={formData.merchant_notes}/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"notes\">Recipient Notes</label>\n                                    <input type=\"text\" className=\"t_box\" name=\"recipient_notes\" onChange={this.onChangeHandle} value={formData.recipient_notes}/>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button type=\"submit\" disabled={isDisabled || !!this.state.isProcessing} className={(!this.state.isProcessing && !isDisabled) ? 'active' : ''} variant=\"primary\">\n                            {(!!this.state.isProcessing) ? 'Processing..' : 'Submit'}\n                        </Button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n            : null\n        )\n    }\n}\nexport default EditTask;"]},"metadata":{},"sourceType":"module"}