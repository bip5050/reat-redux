{"ast":null,"code":"import _defineProperty from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/biplab/Desktop/foodjets/src/containers/Modals/editLocation.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Button } from 'reactstrap';\nimport { Modal } from 'react-bootstrap';\nimport { addressFormater } from '../../util/helper';\nimport { error as notifyerror, success as notifysuccess } from '../../util/notify';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { findIndex as _findIndex, isEmpty, isEqual } from 'lodash';\nimport moment from 'moment-timezone';\n\nvar EditLocation = /*#__PURE__*/function (_Component) {\n  _inherits(EditLocation, _Component);\n\n  var _super = _createSuper(EditLocation);\n\n  function EditLocation(props) {\n    var _this;\n\n    _classCallCheck(this, EditLocation);\n\n    _this = _super.call(this, props);\n\n    _this.handleAddressChange = function (address) {\n      //console.log('Recipient Address', recipient_address);\n      _this.setState({\n        /* errors: {\n            ...this.state.errors,\n            invalidAddress:(!!address) ? false : true\n        }, */\n        invalidAddress: !!address ? false : true,\n        formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n          address: address\n        }),\n        location: {}\n      });\n    };\n\n    _this.handleAddressSelect = function (address) {\n      var timestamp = moment().unix(); //console.log('Timestamp : ', timestamp);\n\n      var self = _assertThisInitialized(_this);\n\n      var data = {\n        zipcode: '',\n        state_code: '',\n        latitude: '',\n        longitude: '',\n        address: ''\n      };\n      geocodeByAddress(address).then(function (results) {\n        //console.log(address, results, results[0].formatted_address);\n        data.address = results[0].formatted_address || '';\n        data.place_id = results[0].place_id;\n        return getLatLng(results[0]);\n      }).then(function (_ref) {\n        var lat = _ref.lat,\n            lng = _ref.lng;\n        //console.log(lat, lng, data.address);\n        var timezone = '';\n        fetch(\"https://maps.googleapis.com/maps/api/timezone/json?location=\".concat(lat, \",\").concat(lng, \"&timestamp=\").concat(timestamp, \"&key=AIzaSyCwMjYiTDbntZTUuxDczjOTH3Mk1vD-9_w\")).then(function (response) {\n          return response.json();\n        }).then(function (res) {\n          //console.log('Data : ', res);\n          timezone = res.timeZoneId;\n          var matchExp = /(\\d+) (.+?), (.+?), (.+?) ([0-9]{5})/g;\n\n          if (matchExp.test(data.address)) {\n            var delAddData = _this.props.deliveryAddress;\n            var addressArray = addressFormater(data.address); //console.log('Address : ', data.address, addressArray);\n\n            if (!isEmpty(addressArray) && addressArray.validAdrs) {\n              data.latitude = lat;\n              data.longitude = lng;\n              data.address = addressArray.address;\n              data.zipcode = addressArray.zipcode;\n              data.state_code = addressArray.state_code;\n              data.city = addressArray.city;\n              data.country = addressArray.country;\n              data.number = addressArray.number;\n              data.street = addressArray.street;\n              data.timezone = timezone; //console.log('AddressBox ###########', data);\n              //this.setState({ address: addressArray.address }); \n\n              self.setState({\n                /* errors: {\n                    ...self.state.errors,\n                    invalidAddress:false\n                }, */\n                invalidAddress: false,\n                location: data,\n                formData: _objectSpread(_objectSpread({}, self.state.formData), {}, {\n                  address: data.address\n                })\n              });\n            } else {\n              notifyerror('Oops, that does not seem like a valid address. Please try again.');\n              self.setState({\n                /* errors: {\n                    ...self.state.errors,\n                    invalidAddress:true\n                }, */\n                location: {},\n                invalidAddress: true,\n                formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n                  address: ''\n                }) //recipient_address: ''\n\n              });\n            }\n          } else {\n            notifyerror('Oops, that does not seem like a valid address. Please try again.');\n            self.setState({\n              /* errors: {\n                  ...self.state.errors,\n                  invalidAddress:true\n              }, */\n              location: {},\n              invalidAddress: true,\n              formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n                address: ''\n              })\n            });\n          }\n        });\n      }).catch(function (error) {\n        self.setState({\n          /* errors: {\n              ...self.state.errors,\n              invalidAddress:true\n          }, */\n          location: {},\n          invalidAddress: true,\n          formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n            address: ''\n          })\n        }); //console.log('Error', error);\n      });\n    };\n\n    _this.onChangeHandle = function (e) {\n      var self = _assertThisInitialized(_this);\n\n      var formData = _objectSpread({}, _this.state.formData);\n\n      var name = e.target.name;\n      var value = e.target.value;\n      formData[name] = value;\n\n      _this.setState({\n        formData: formData\n      });\n    };\n\n    _this.handleEditStore = function (e) {\n      e.preventDefault();\n\n      var location = _objectSpread({}, _this.state.location);\n\n      var formData = _objectSpread({}, _this.state.formData);\n\n      var selStore = _objectSpread({}, _this.props.selStore);\n\n      var data = {\n        address: location.address,\n        number: location.number,\n        street: location.street,\n        city: location.city,\n        state: location.state_code,\n        country: location.country,\n        postalCode: location.zipcode,\n        latitude: location.latitude,\n        longitude: location.longitude,\n        timeZone: location.timezone,\n        phone: formData.phone,\n        store: formData.store,\n        note: formData.note,\n        place_id: location.place_id,\n        store_id: formData.store_id,\n        sms: selStore.sms,\n        id: selStore.id\n      }; //console.log('Store Edit : ', data);\n\n      _this.props.editStore(data);\n    };\n\n    _this.errors = {\n      store: false,\n      address: false,\n      phone: false,\n      store_id: false,\n      note: false,\n      invalidAddress: false\n    };\n    _this.state = {\n      /* errors   :   {\n          store            :   false,\n          address          :   false,\n          phone            :   false,\n          store_id         :   false,\n          note             :   false,\n          invalidAddress   :   false\n      }, */\n      formData: {\n        phone: '',\n        store: '',\n        note: '',\n        store_id: '',\n        address: ''\n      },\n      location: {}\n    };\n    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_this));\n    _this.handleAddressChange = _this.handleAddressChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(EditLocation, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      this.setState({\n        show: props.show\n      });\n\n      if (!isEqual(props.selStore, this.props.selStore)) {\n        //console.log('Store Updated : ', props.selStore);\n        var store = props.selStore || {};\n        this.setState({\n          formData: {\n            phone: store.phone,\n            store: store.store,\n            note: store.note,\n            store_id: store.store_id,\n            address: store.address\n          },\n          location: {\n            longitude: store.longitude,\n            latitude: store.latitude,\n            address: store.address,\n            zipcode: store.postalCode,\n            state_code: store.state,\n            city: store.city,\n            country: store.country,\n            number: store.number,\n            street: store.street,\n            timezone: store.timeZone\n          }\n        });\n      } //console.log('Processing : ', !!!props.isProcessing && props.isProcessing !== this.props.isProcessing);\n\n\n      if (!!!props.isProcessing && props.isProcessing !== this.props.isProcessing) {\n        this.props.handleClose();\n      }\n    }\n  }, {\n    key: \"handleClose\",\n    value: function handleClose() {\n      this.setState({\n        show: false\n      });\n      this.props.handleClose();\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm() {\n      var formData = this.state.formData || {};\n      var errors = {\n        store: false,\n        address: false,\n        phone: false,\n        store_id: false,\n        note: false\n      }; //console.log(this.state.location);\n\n      var isError = false;\n\n      if (!!!formData.store) {\n        errors.store = true;\n        isError = true;\n      }\n\n      if (!!!formData.store_id) {\n        errors.store_id = true;\n        isError = true;\n      }\n\n      if (!!!formData.address || isEmpty(this.state.location)) {\n        errors.address = true;\n        isError = true;\n      }\n\n      if (!!!formData.phone) {\n        errors.phone = true;\n        isError = true;\n      }\n\n      if (!!formData.phone && (formData.phone.length !== 10 || isNaN(formData.phone))) {\n        errors.phone = true;\n        isError = true;\n      }\n\n      if (!!formData.phone && formData.phone < 1) {\n        errors.phone = true;\n        isError = true;\n      }\n\n      return {\n        isError: isError,\n        errors: errors\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var show = this.props.show || false;\n      var formData = this.state.formData || {};\n      var validate = this.validateForm();\n      var isDisabled = validate.isError;\n      var errors = validate.errors || {}; //console.log('Render : ', this.props.isProcessing);\n\n      var rsSrchStyles = {\n        input: {\n          width: '260px',\n          padding: '0px 15px 0px 35px',\n          color: '#333',\n          margin: '0'\n        },\n        autocompleteContainer: {\n          borderRadius: '0 0 3px 3px',\n          zIndex: '999',\n          background: 'url(/static/images/pow_google.jpg) no-repeat right bottom #fff',\n          position: 'relative',\n          border: '1px solid #e8e8e8',\n          boxShadow: '1px 5px 10px rgba(68,68,68,0.2)'\n        },\n        autocompleteItem: _defineProperty({\n          textAlign: 'left',\n          fontSize: '12px',\n          padding: '5px 8px 5px 30px',\n          lineHeight: '20px',\n          color: '#999',\n          background: '10px 8px #fff',\n          margin: '0',\n          borderTop: 'none',\n          borderBottom: '1px solid #ccc'\n        }, \"background\", 'url(/static/images/location_google.png) no-repeat 10px 8px #fff'),\n        autocompleteItemActive: {\n          color: '#E44500'\n        }\n      }; //const renderFunc    =   ;\n\n      return /*#__PURE__*/React.createElement(Modal, {\n        size: \"md\",\n        className: \"c-modal\",\n        data: \"ignore-outer-click\",\n        show: show,\n        onHide: this.props.handleClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Header, {\n        closeButton: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }\n      }, \"Edit Location\")), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleEditStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        noGutters: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        sm: \"12\",\n        className: \"c_info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"delivery\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 37\n        }\n      }, \"Store\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Store\",\n        className: \"t_box\".concat(!!errors.store ? ' error' : ''),\n        name: \"store\",\n        onChange: this.onChangeHandle,\n        value: formData.store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group pr\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 37\n        }\n      }, \"Address\"), /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n        value: formData.address,\n        onChange: this.handleAddressChange,\n        onSelect: this.handleAddressSelect,\n        styles: rsSrchStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 37\n        }\n      }, function (_ref2) {\n        var getInputProps = _ref2.getInputProps,\n            suggestions = _ref2.suggestions,\n            getSuggestionItemProps = _ref2.getSuggestionItemProps,\n            loading = _ref2.loading;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps({\n          placeholder: 'Enter Address',\n          className: \"t_box\".concat(!!errors.address ? ' error' : '')\n        }), {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 49\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 49\n          }\n        }, loading && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 61\n          }\n        }, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: '#fafafa',\n            cursor: 'pointer'\n          } : {\n            backgroundColor: '#ffffff',\n            cursor: 'pointer'\n          };\n          return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 53\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 57\n            }\n          }, suggestion.description));\n        })));\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"phone\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 37\n        }\n      }, \"Phone\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Phone No\",\n        className: \"t_box\".concat(!!errors.phone ? ' error' : ''),\n        name: \"phone\",\n        onChange: this.onChangeHandle,\n        value: formData.phone,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"store-id\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 37\n        }\n      }, \"Store ID\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"t_box\".concat(!!errors.store_id ? ' error' : ''),\n        name: \"store_id\",\n        onChange: this.onChangeHandle,\n        value: formData.store_id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"notes\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 37\n        }\n      }, \"Driver Notes\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"t_box\",\n        name: \"note\",\n        onChange: this.onChangeHandle,\n        value: formData.note,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 37\n        }\n      }))))), /*#__PURE__*/React.createElement(Modal.Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        disabled: isDisabled || !!this.props.isProcessing,\n        className: !this.props.isProcessing && !isDisabled ? 'active' : '',\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 25\n        }\n      }, !!this.props.isProcessing ? 'Processing..' : 'Submit'))));\n    }\n  }]);\n\n  return EditLocation;\n}(Component);\n\nexport default EditLocation;","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/Modals/editLocation.js"],"names":["React","Component","Row","Col","Button","Modal","addressFormater","error","notifyerror","success","notifysuccess","PlacesAutocomplete","geocodeByAddress","getLatLng","findIndex","_findIndex","isEmpty","isEqual","moment","EditLocation","props","handleAddressChange","address","setState","invalidAddress","formData","state","location","handleAddressSelect","timestamp","unix","self","data","zipcode","state_code","latitude","longitude","then","results","formatted_address","place_id","lat","lng","timezone","fetch","response","json","res","timeZoneId","matchExp","test","delAddData","deliveryAddress","addressArray","validAdrs","city","country","number","street","catch","onChangeHandle","e","name","target","value","handleEditStore","preventDefault","selStore","postalCode","timeZone","phone","store","note","store_id","sms","id","editStore","errors","handleClose","bind","show","isProcessing","isError","length","isNaN","validate","validateForm","isDisabled","rsSrchStyles","input","width","padding","color","margin","autocompleteContainer","borderRadius","zIndex","background","position","border","boxShadow","autocompleteItem","textAlign","fontSize","lineHeight","borderTop","borderBottom","autocompleteItemActive","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Row,\n    Col,\n    Button\n} from 'reactstrap';\nimport { Modal } from 'react-bootstrap';\nimport { addressFormater } from '../../util/helper';\nimport {error as notifyerror, success as notifysuccess} from '../../util/notify';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport {findIndex as _findIndex, isEmpty, isEqual} from 'lodash';\nimport moment from 'moment-timezone';\n\nclass EditLocation extends Component{\n    constructor(props) {\n        super(props);\n        this.errors   =   {\n            store            :   false,\n            address          :   false,\n            phone            :   false,\n            store_id         :   false,\n            note             :   false,\n            invalidAddress   :   false\n        }\n        this.state              =   {\n           /* errors   :   {\n               store            :   false,\n               address          :   false,\n               phone            :   false,\n               store_id         :   false,\n               note             :   false,\n               invalidAddress   :   false\n           }, */\n           formData :   {\n                phone           :   '',\n                store           :   '',\n                note            :   '',\n                store_id        :   '',\n                address         :   ''\n           },\n           location     : {}\n        }\n        this.handleClose            =   this.handleClose.bind(this);\n        this.handleAddressChange    =   this.handleAddressChange.bind(this);\n    } \n \n    handleAddressChange = address => {\n        //console.log('Recipient Address', recipient_address);\n        this.setState({\n            /* errors: {\n                ...this.state.errors,\n                invalidAddress:(!!address) ? false : true\n            }, */\n            invalidAddress:(!!address) ? false : true,\n            formData: {...this.state.formData, address:address},\n            location: {}\n        });\n    };\n\n    handleAddressSelect = address => {\n        let timestamp = moment().unix();\n        //console.log('Timestamp : ', timestamp);\n        let self    =   this;\n        let data = {\n            zipcode: '',\n            state_code: '',\n            latitude: '',\n            longitude: '',\n            address: ''\n        };\n        geocodeByAddress(address)\n        .then((results) => {\n            //console.log(address, results, results[0].formatted_address);\n            data.address    =   results[0].formatted_address || '';\n            data.place_id   =   results[0].place_id;\n            return getLatLng(results[0]);\n        })\n        .then(({ lat, lng }) => {\n            //console.log(lat, lng, data.address);\n            let timezone    =   '';\n            fetch(`https://maps.googleapis.com/maps/api/timezone/json?location=${lat},${lng}&timestamp=${timestamp}&key=AIzaSyCwMjYiTDbntZTUuxDczjOTH3Mk1vD-9_w`)\n            .then(response => response.json())\n            .then(res => {\n                //console.log('Data : ', res);\n                timezone    =   res.timeZoneId;\n                let matchExp = /(\\d+) (.+?), (.+?), (.+?) ([0-9]{5})/g;\n                if(matchExp.test(data.address)){\n                    let delAddData = this.props.deliveryAddress;\n                    let addressArray = addressFormater(data.address);\n                    //console.log('Address : ', data.address, addressArray);\n                    if(!isEmpty(addressArray) && addressArray.validAdrs){\n                        data.latitude = lat;\n                        data.longitude = lng;\n                        data.address = addressArray.address;\n                        data.zipcode = addressArray.zipcode;\n                        data.state_code = addressArray.state_code;\n                        data.city = addressArray.city;\n                        data.country = addressArray.country;\n                        data.number = addressArray.number;\n                        data.street = addressArray.street;\n                        data.timezone   =   timezone;\n\n                        //console.log('AddressBox ###########', data);\n                        //this.setState({ address: addressArray.address }); \n                        self.setState({\n                            /* errors: {\n                                ...self.state.errors,\n                                invalidAddress:false\n                            }, */\n                            invalidAddress:false,\n                            location: data,\n                            formData: {...self.state.formData, address:data.address}\n                        }); \n                    } else {\n                        notifyerror('Oops, that does not seem like a valid address. Please try again.');\n                        self.setState({\n                            /* errors: {\n                                ...self.state.errors,\n                                invalidAddress:true\n                            }, */\n                            location: {},\n                            invalidAddress:true,\n                            formData: {...this.state.formData, address:''}\n                            //recipient_address: ''\n                        }); \n                    }             \n                } else {\n                    notifyerror('Oops, that does not seem like a valid address. Please try again.');\n                    self.setState({\n                        /* errors: {\n                            ...self.state.errors,\n                            invalidAddress:true\n                        }, */\n                        location: {},\n                        invalidAddress:true,\n                        formData: {...this.state.formData, address:''}\n                    }); \n                }\n            });\n        })\n        .catch(error => {\n            self.setState({\n                /* errors: {\n                    ...self.state.errors,\n                    invalidAddress:true\n                }, */\n                location: {},\n                invalidAddress:true,\n                formData: {...this.state.formData, address:''}\n            });\n            //console.log('Error', error);\n        });\n    };\n\n    componentWillReceiveProps(props) {\n        this.setState({\n            show: props.show\n        })\n        if(!isEqual(props.selStore, this.props.selStore)) {\n            //console.log('Store Updated : ', props.selStore);\n            let store       =   props.selStore || {};\n            this.setState({                \n                formData :   {\n                    phone           :   store.phone,\n                    store           :   store.store,\n                    note            :   store.note,\n                    store_id        :   store.store_id,\n                    address         :   store.address\n                },\n                location     : {\n                    longitude : store.longitude,\n                    latitude :store.latitude,\n                    address : store.address,\n                    zipcode : store.postalCode,\n                    state_code : store.state,\n                    city : store.city,\n                    country : store.country,\n                    number : store.number,\n                    street : store.street,\n                    timezone: store.timeZone \n                }\n            })\n        }\n        //console.log('Processing : ', !!!props.isProcessing && props.isProcessing !== this.props.isProcessing);\n        if(!!!props.isProcessing && props.isProcessing !== this.props.isProcessing) {\n            this.props.handleClose();\n        }\n    }\n\n    handleClose() {\n        this.setState({show: false});\n        this.props.handleClose();\n    }\n\n    onChangeHandle = (e) => {\n        let self                    =   this;\n        let formData                =   { ...this.state.formData};\n        const name                  =   e.target.name;\n        const value\t\t            =   e.target.value\n        formData[name]              =   value;\n        this.setState({ formData: formData });\n    }\n\n    handleEditStore    =   (e)  =>  {\n        e.preventDefault();\n        let location        =   {...this.state.location};\n        let formData        =   {...this.state.formData};\n        let selStore        =   {...this.props.selStore};\n        let data        =   {\n            address:location.address,\n            number:location.number,\n            street:location.street,\n            city:location.city,\n            state:location.state_code,\n            country:location.country,\n            postalCode:location.zipcode,\n            latitude:location.latitude,\n            longitude:location.longitude,\n            timeZone:location.timezone,\n            phone:formData.phone,\n            store:formData.store,\n            note:formData.note,\n            place_id:location.place_id,\n            store_id:formData.store_id,\n            sms: selStore.sms,\n            id:selStore.id\n        }\n        //console.log('Store Edit : ', data);\n        this.props.editStore(data);\n    }\n\n    validateForm() {\n        let formData        =   this.state.formData || {};\n        let errors          =   {\n            store            :   false,\n            address          :   false,\n            phone            :   false,\n            store_id         :   false,\n            note             :   false\n        };\n        //console.log(this.state.location);\n        let isError         =   false;\n        if(!!!formData.store){\n            errors.store        =   true;\n            isError             =   true;\n        }\n        if(!!!formData.store_id){\n            errors.store_id        =   true;\n            isError             =   true;\n        }\n        if(!!!formData.address || isEmpty(this.state.location)){\n            errors.address        =   true;\n            isError             =   true;\n        }\n        if(!!!formData.phone){\n            errors.phone        =   true;\n            isError             =   true;\n        }\n        if(!!formData.phone && (formData.phone.length !== 10 || isNaN(formData.phone))){\n            errors.phone        =   true;\n            isError             =   true;\n        }\n        if(!!formData.phone && formData.phone < 1){\n            errors.phone        =   true;\n            isError             =   true;\n        }\n        return {isError: isError, errors: errors};\n    }\n\n    render() {\n        let show                    =   this.props.show || false;\n        let formData                =   this.state.formData || {};\n        let validate                =   this.validateForm();\n        let isDisabled              =   validate.isError;\n        let errors                  =   validate.errors || {};\n        //console.log('Render : ', this.props.isProcessing);\n        const rsSrchStyles = {\n            input: {\n                width: '260px',\n                padding: '0px 15px 0px 35px',\n                color: '#333',\n                margin:'0'\n            },\n            autocompleteContainer: {\n                borderRadius: '0 0 3px 3px',\n                zIndex: '999',\n                background: 'url(/static/images/pow_google.jpg) no-repeat right bottom #fff',\n                position: 'relative',\n                border: '1px solid #e8e8e8',\n                boxShadow:'1px 5px 10px rgba(68,68,68,0.2)',\n            },\n            autocompleteItem: {\n                textAlign: 'left',\n                fontSize: '12px',\n                padding: '5px 8px 5px 30px',\n                lineHeight:'20px',\n                color: '#999',\n                background: '10px 8px #fff',\n                margin: '0',\n                borderTop:'none',\n                borderBottom: '1px solid #ccc',\n                background: 'url(/static/images/location_google.png) no-repeat 10px 8px #fff'\n            },\n            autocompleteItemActive: { color: '#E44500' }\n        };\n\n        //const renderFunc    =   ;\n        return (\n            <Modal size=\"md\" className=\"c-modal\" data=\"ignore-outer-click\" show={show} onHide={this.props.handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Location</Modal.Title>\n                </Modal.Header>\n                <form onSubmit={this.handleEditStore}>\n                    <Modal.Body>\n                        <Row noGutters>\n                            <Col md=\"12\" sm=\"12\" className=\"c_info\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"delivery\">Store</label>\n                                    <input type=\"text\" placeholder=\"Enter Store\" className={`t_box${(!!errors.store) ? ' error' : ''}`} name=\"store\" onChange={this.onChangeHandle} value={formData.store}/>\n                                </div>\n                                <div className=\"form-group pr\">\n                                    <label htmlFor=\"address\">Address</label>\n                                    <PlacesAutocomplete\n                                        value={formData.address}\n                                        onChange={this.handleAddressChange}\n                                        onSelect={this.handleAddressSelect}\n                                        styles={rsSrchStyles}\n                                    >\n                                        {\n                                            ({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                                            <div>\n                                                <input\n                                                {...getInputProps({\n                                                    placeholder: 'Enter Address',\n                                                    className:  `t_box${(!!errors.address) ? ' error' : ''}`,\n                                                })}\n                                                />\n                                                <div className=\"autocomplete-dropdown-container\">\n                                                {loading && <div>Loading...</div>}\n                                                {suggestions.map(suggestion => {\n                                                    const className = suggestion.active\n                                                    ? 'suggestion-item--active'\n                                                    : 'suggestion-item';\n                                                    // inline style for demonstration purpose\n                                                    const style = suggestion.active\n                                                    ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                                                    : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                                                    return (\n                                                    <div\n                                                        {...getSuggestionItemProps(suggestion, {\n                                                        className,\n                                                        style,\n                                                        })}\n                                                    >\n                                                        <span>{suggestion.description}</span>\n                                                    </div>\n                                                    );\n                                                })}\n                                                </div>\n                                            </div>\n                                            )\n                                        }\n                                    </PlacesAutocomplete>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"phone\">Phone</label>\n                                    <input type=\"text\" placeholder=\"Enter Phone No\" className={`t_box${(!!errors.phone) ? ' error' : ''}`} name=\"phone\" onChange={this.onChangeHandle} value={formData.phone}/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"store-id\">Store ID</label>\n                                    <input type=\"text\" className={`t_box${(!!errors.store_id) ? ' error' : ''}`} name=\"store_id\" onChange={this.onChangeHandle} value={formData.store_id}/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"notes\">Driver Notes</label>\n                                    <input type=\"text\" className=\"t_box\" name=\"note\" onChange={this.onChangeHandle} value={formData.note}/>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button type=\"submit\" disabled={isDisabled || !!this.props.isProcessing} className={(!this.props.isProcessing && !isDisabled) ? 'active' : ''} variant=\"primary\">\n                            {(!!this.props.isProcessing) ? 'Processing..' : 'Submit'}\n                        </Button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        )\n    }\n}\nexport default EditLocation;"]},"metadata":{},"sourceType":"module"}