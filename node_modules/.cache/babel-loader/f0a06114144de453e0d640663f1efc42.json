{"ast":null,"code":"import React from'react';import{connect}from'react-redux';import{withRouter}from'react-router-dom';import*as actions from'./actions';import*as dashboardActions from'../Dashboard/actions';import*as headerActions from'../Header/actions';import TaskHistory from'./taskHistory';var TaskHistoryContainer=function TaskHistoryContainer(_ref){var userData=_ref.userData,getLocations=_ref.getLocations,locations=_ref.locations,settingsData=_ref.settingsData,userType=_ref.userType,isProcessing=_ref.isProcessing,isError=_ref.isError,isSuccess=_ref.isSuccess,getHistory=_ref.getHistory,taskHistory=_ref.taskHistory,getTaskDetails=_ref.getTaskDetails,taskDetails=_ref.taskDetails,deleteTask=_ref.deleteTask,editTask=_ref.editTask,updateTaskStatus=_ref.updateTaskStatus,getTrackDetails=_ref.getTrackDetails,search=_ref.search,resetSearch=_ref.resetSearch,filteredList=_ref.filteredList,exportTaskCsv=_ref.exportTaskCsv,csvUrl=_ref.csvUrl,isTaskCsvExporting=_ref.isTaskCsvExporting,getSettings=_ref.getSettings,filterData=_ref.filterData,isFilterLoaded=_ref.isFilterLoaded,isEditTaskProcessing=_ref.isEditTaskProcessing;return/*#__PURE__*/React.createElement(TaskHistory,{userData:userData,getLocations:getLocations,locations:locations,settingsData:settingsData,userType:userType,isProcessing:isProcessing,isError:isError,isSuccess:isSuccess,getHistory:getHistory,taskHistory:taskHistory,getTaskDetails:getTaskDetails,taskDetails:taskDetails,deleteTask:deleteTask,editTask:editTask,updateTaskStatus:updateTaskStatus,getTrackDetails:getTrackDetails,search:search,resetSearch:resetSearch,filteredList:filteredList,exportTaskCsv:exportTaskCsv,csvUrl:csvUrl,isTaskCsvExporting:isTaskCsvExporting,getSettings:getSettings,filterData:filterData,isFilterLoaded:isFilterLoaded,isEditTaskProcessing:isEditTaskProcessing});};var mapStateToProps=function mapStateToProps(_ref2,ownProps){var dashboardReducer=_ref2.dashboardReducer,taskHistoryReducer=_ref2.taskHistoryReducer,headerReducer=_ref2.headerReducer;return{userData:ownProps.userData,userType:headerReducer.userType,locations:dashboardReducer.locations,settingsData:headerReducer.settingsData,isProcessing:taskHistoryReducer.isProcessing,isError:taskHistoryReducer.isError,isSuccess:taskHistoryReducer.isSuccess,taskHistory:taskHistoryReducer.taskHistory,taskDetails:dashboardReducer.taskDetails,filteredList:dashboardReducer.filteredList,csvUrl:taskHistoryReducer.csvUrl,isTaskCsvExporting:taskHistoryReducer.isTaskCsvExporting,filterData:headerReducer.filterData,isFilterLoaded:headerReducer.isFilterLoaded,isEditTaskProcessing:dashboardReducer.isEditTaskProcessing};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{updateTaskStatus:function updateTaskStatus(data){return dispatch(dashboardActions.updateTaskStatus(data));},deleteTask:function deleteTask(data){return dispatch(dashboardActions.deleteTask(data));},getLocations:function getLocations(data){return dispatch(dashboardActions.getLocations(data));},editTask:function editTask(data){return dispatch(dashboardActions.editTask(data));},getTaskDetails:function getTaskDetails(data){return dispatch(dashboardActions.getTaskDetails(data));},getTrackDetails:function getTrackDetails(data){return dispatch(dashboardActions.getTrackDetails(data));},search:function search(data){return dispatch(dashboardActions.search(data));},resetSearch:function resetSearch(data){return dispatch(dashboardActions.resetSearch(data));},getSettings:function getSettings(data){return dispatch(headerActions.getSettings(data));},getHistory:function getHistory(data){return dispatch(actions.getHistory(data));},exportTaskCsv:function exportTaskCsv(data){return dispatch(actions.exportTaskCsv(data));}};};export default connect(mapStateToProps,mapDispatchToProps)(withRouter(TaskHistoryContainer));","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/TaskHistory/index.js"],"names":["React","connect","withRouter","actions","dashboardActions","headerActions","TaskHistory","TaskHistoryContainer","userData","getLocations","locations","settingsData","userType","isProcessing","isError","isSuccess","getHistory","taskHistory","getTaskDetails","taskDetails","deleteTask","editTask","updateTaskStatus","getTrackDetails","search","resetSearch","filteredList","exportTaskCsv","csvUrl","isTaskCsvExporting","getSettings","filterData","isFilterLoaded","isEditTaskProcessing","mapStateToProps","ownProps","dashboardReducer","taskHistoryReducer","headerReducer","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {PropTypes as PT} from 'prop-types';\nimport * as actions from './actions';\nimport * as dashboardActions from '../Dashboard/actions';\nimport * as headerActions from '../Header/actions';\nimport TaskHistory from './taskHistory';\n\nconst TaskHistoryContainer = ({\n  userData,\n  getLocations,\n  locations,\n  settingsData,\n  userType,\n  isProcessing,\n  isError,\n  isSuccess,\n  getHistory,\n  taskHistory,\n  getTaskDetails,\n  taskDetails,\n  deleteTask,\n  editTask,\n  updateTaskStatus,\n  getTrackDetails,\n  search,\n  resetSearch,\n  filteredList,\n  exportTaskCsv,\n  csvUrl,\n  isTaskCsvExporting,\n\tgetSettings,\n  filterData,\n  isFilterLoaded,\n  isEditTaskProcessing\n}) => {\n  return (\n    <TaskHistory\n      userData          = {userData}\n      getLocations      = {getLocations}\n      locations         = {locations}\n      settingsData      = {settingsData}\n      userType          = {userType}\n      isProcessing      = {isProcessing}\n      isError           = {isError}\n      isSuccess         = {isSuccess}\n      getHistory        = {getHistory}\n      taskHistory       = {taskHistory}\n      getTaskDetails    = {getTaskDetails}\n      taskDetails       = {taskDetails}\n      deleteTask        = {deleteTask}\n      editTask          = {editTask}\n      updateTaskStatus  = {updateTaskStatus}\n      getTrackDetails   = {getTrackDetails}\n      search            = {search}\n      resetSearch       = {resetSearch}\n      filteredList      = {filteredList}\n      exportTaskCsv     = {exportTaskCsv}\n      csvUrl            = {csvUrl}\n      isTaskCsvExporting= {isTaskCsvExporting}\n\t\t\tgetSettings       = {getSettings}\n\t\t\tfilterData        = {filterData}\n\t\t\tisFilterLoaded    = {isFilterLoaded}\n\t\t\tisEditTaskProcessing    = {isEditTaskProcessing}\n    />\n  )\n};\n\n TaskHistoryContainer.propTypes   = {\n  userData          : PT.object,\n  getLocations      : PT.func,\n  locations         : PT.object,\n  isProcessing      : PT.bool,\n  isError           : PT.bool,\n  isSuccess         : PT.bool,\n  getHistory        : PT.func,\n  settingsData      : PT.object,\n  userType          : PT.string,\n  taskHistory       : PT.object,\n  getTaskDetails    : PT.func,\n  getTrackDetails   : PT.func,\n  deleteTask        : PT.func,\n  editTask          : PT.func,\n  updateTaskStatus  : PT.func,\n  search            : PT.func,\n  resetSearch       : PT.func,\n  exportTaskCsv     : PT.func,\n  csvUrl            : PT.object,\n  isTaskCsvExporting : PT.bool,\n\tgetSettings       : PT.func,\n  filterData        : PT.object,\n  isFilterLoaded    : PT.bool,\n  isEditTaskProcessing    : PT.bool\n }\n\n  const  mapStateToProps   = ({dashboardReducer, taskHistoryReducer, headerReducer}, ownProps) => {\n    return ({\n      userData      : ownProps.userData,\n      userType      : headerReducer.userType,\n      locations     : dashboardReducer.locations,\n      settingsData  : headerReducer.settingsData,\n      isProcessing  : taskHistoryReducer.isProcessing,\n      isError       : taskHistoryReducer.isError,\n      isSuccess     : taskHistoryReducer.isSuccess,\n      taskHistory   : taskHistoryReducer.taskHistory,\n      taskDetails   : dashboardReducer.taskDetails,\n      filteredList  : dashboardReducer.filteredList,\n      csvUrl        : taskHistoryReducer.csvUrl,\n      isTaskCsvExporting : taskHistoryReducer.isTaskCsvExporting,\n      filterData    : headerReducer.filterData,\n      isFilterLoaded    : headerReducer.isFilterLoaded,\n      isEditTaskProcessing    : dashboardReducer.isEditTaskProcessing\n    })\n  }\n\n\nconst mapDispatchToProps  = dispatch => ({\n  updateTaskStatus    : (data) => dispatch(dashboardActions.updateTaskStatus(data)),\n  deleteTask          : (data) => dispatch(dashboardActions.deleteTask(data)),\n  getLocations        : (data) => dispatch(dashboardActions.getLocations(data)),\n  editTask            : (data) => dispatch(dashboardActions.editTask(data)),\n  getTaskDetails      : (data) => dispatch(dashboardActions.getTaskDetails(data)),\n  getTrackDetails     : (data) => dispatch(dashboardActions.getTrackDetails(data)),\n  search              : (data) => dispatch(dashboardActions.search(data)),\n  resetSearch         : (data) => dispatch(dashboardActions.resetSearch(data)),\n  getSettings         : (data) => dispatch(headerActions.getSettings(data)),\n  getHistory          : (data) => dispatch(actions.getHistory(data)),\n  exportTaskCsv       : (data) => dispatch(actions.exportTaskCsv(data))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(TaskHistoryContainer));"]},"metadata":{},"sourceType":"module"}