{"ast":null,"code":"import _defineProperty from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/biplab/Desktop/foodjets/src/containers/Modals/createTaskModal.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Button, Form } from 'reactstrap';\nimport { Modal } from 'react-bootstrap';\nimport DatePicker from \"react-datepicker\";\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { addressFormater } from '../../util/helper';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { findIndex as _findIndex, isEmpty, isEqual } from 'lodash';\nimport moment from 'moment-timezone';\nimport StoreDropdown from '../Filter/storeDropdown';\nimport LocationDropdown from '../Filter/locationDropdown';\n\nvar CreateTask = /*#__PURE__*/function (_Component) {\n  _inherits(CreateTask, _Component);\n\n  var _super = _createSuper(CreateTask);\n\n  function CreateTask(props) {\n    var _this;\n\n    _classCallCheck(this, CreateTask);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function (recipient_address) {\n      //console.log('Recipient Address', recipient_address);\n      _this.setState({\n        recipient_address: recipient_address,\n        formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n          recipient_location: {}\n        })\n        /* errors: {\n            ...this.state.errors,\n            recipient_address:\"\"\n        } */\n\n      });\n    };\n\n    _this.selectStore = function (store, k) {\n      /* let errors                      =   {...this.state.errors};\n      errors['merchant_address']      =   \"\";\n      errors['merchant_phone']        =   \"\"; */\n      var index = (_this.props.locations || []).findIndex(function (item) {\n        return item.id === store.id;\n      });\n\n      if (!!store.id) {\n        //let store       =   this.props.stores[this.state.formData.store];\n        _this.setState({\n          formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n            store: store.id,\n            merchant_address: store.id,\n            merchant_phone: store.data.phone,\n            merchant_notes: store.data.note\n          }) //errors: errors\n\n        });\n      } else {\n        _this.setState({\n          formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n            store: '',\n            merchant_address: '',\n            merchant_phone: '',\n            merchant_notes: ''\n          }) //errors: errors\n\n        });\n      }\n    };\n\n    _this.selectMerchantAddress = function (location, k) {\n      /* let errors                  =   {...this.state.errors};\n      errors['store']             =   \"\";\n      errors['merchant_phone']    =   \"\"; */\n      var index = (_this.props.locations || []).findIndex(function (item) {\n        return item.id === location.id;\n      });\n\n      if (!!location.id) {\n        //let location            =   this.props.locations[this.state.formData.merchant_address];\n        _this.setState({\n          formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n            store: location.id,\n            merchant_address: location.id,\n            merchant_phone: location.data.phone,\n            merchant_notes: location.data.note\n          }) //errors: errors\n\n        });\n      } else {\n        _this.setState({\n          formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n            store: '',\n            merchant_address: '',\n            merchant_phone: '',\n            merchant_notes: ''\n          }) //errors: errors\n\n        });\n      }\n    };\n\n    _this.handleSelect = function (recipient_address) {\n      var self = _assertThisInitialized(_this);\n\n      var data = {\n        zipcode: '',\n        state_code: '',\n        latitude: '',\n        longitude: '',\n        address: ''\n      };\n      geocodeByAddress(recipient_address).then(function (results) {\n        //console.log(recipient_address, results[0], results[0].formatted_address);\n        data.address = results[0].formatted_address || '';\n        return getLatLng(results[0]);\n      }).then(function (_ref) {\n        var lat = _ref.lat,\n            lng = _ref.lng;\n        //console.log(lat, lng, data.address);\n        var matchExp = /(\\d+) (.+?), (.+?), (.+?) ([0-9]{5})/g;\n\n        if (matchExp.test(data.address)) {\n          var delAddData = _this.props.deliveryAddress; //delvAddIndex = _findIndex(delAddData, {address: data.address});\n\n          /* if(delvAddIndex != -1){\n          self.editDelvAdd(delvAddIndex);\n          } else { */\n\n          var addressArray = addressFormater(data.address); //console.log('Address : ', data.address, addressArray);\n\n          if (!isEmpty(addressArray) && addressArray.validAdrs) {\n            data.latitude = lat;\n            data.longitude = lng;\n            data.address = addressArray.address;\n            data.zipcode = addressArray.zipcode;\n            data.state_code = addressArray.state_code;\n            data.city = addressArray.city;\n            data.country = addressArray.country;\n            data.number = addressArray.number;\n            data.street = addressArray.street; //console.log('AddressBox ###########', data);\n            //this.setState({ address: addressArray.address }); \n\n            self.setState({\n              /* errors: {\n                  ...self.state.errors,\n                  recipient_address:\"\"\n              }, */\n              formData: _objectSpread(_objectSpread({}, self.state.formData), {}, {\n                recipient_location: data\n              }),\n              recipient_address: data.address\n            });\n          } else {\n            //notiyerror('Oops, that does not seem like a valid address. Please try again.');\n            self.setState({\n              formData: _objectSpread(_objectSpread({}, self.state.formData), {}, {\n                recipient_location: {}\n              })\n              /* ,\n              errors: {\n                 ...self.state.errors,\n                 recipient_address:\"Invalid Address\"\n              } */\n\n            });\n          } //\n          //}             \n\n        } else {\n          //notiyerror('Oops, that does not seem like a valid address. Please try again.');\n          self.setState({\n            formData: _objectSpread(_objectSpread({}, self.state.formData), {}, {\n              recipient_location: {}\n            })\n            /* ,\n            errors: {\n               ...self.state.errors,\n               recipient_address:\"Invalid Address\"\n            } */\n\n          });\n        }\n      }).catch(function (error) {\n        self.setState({\n          formData: _objectSpread(_objectSpread({}, self.state.formData), {}, {\n            recipient_location: {}\n          })\n          /* ,\n          errors: {\n             ...self.state.errors,\n             recipient_address:\"Invalid Address\"\n          } */\n\n        });\n        console.error('Error', error);\n      });\n    };\n\n    _this.onDateSelect = function (date) {\n      _this.setState({\n        formData: _objectSpread(_objectSpread({}, _this.state.formData), {}, {\n          delivery_date: date\n        })\n        /* ,\n        errors: {\n           ...this.state.errors,\n           delivery_date: ''\n        } */\n\n      });\n    };\n\n    _this.defaultErrors = {\n      merchant_name: \"\",\n      last_name: \"\",\n      merchant_phone: \"\",\n      orderNumber: \"\",\n      store: \"\",\n      merchant_address: \"\",\n      recipient_name: \"\",\n      delivery_date: \"\",\n      recipient_phone: \"\",\n      delivery_time: \"\"\n    };\n    _this.state = {\n      show: false,\n      alcohol: false,\n      signature: true,\n      locations: [],\n      formData: {},\n      settingsData: {},\n      startDate: new Date(),\n      recipient_address: '',\n      recipient_location: {\n        zipcode: '',\n        state_code: '',\n        latitude: '',\n        longitude: '',\n        address: ''\n      }\n      /* errors:{\n          merchant_name: \"\",\n          last_name:  \"\",\n          merchant_phone:\"\",\n          orderNumber:\"\",\n          store:\"\",\n          merchant_address:\"\",\n          recipient_name:\"\",\n          delivery_date:\"\",\n          recipient_phone:\"\",\n          delivery_time:\"\"\n      } */\n\n    };\n    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_this));\n    _this.handleCbox = _this.handleCbox.bind(_assertThisInitialized(_this));\n    _this.handleCreateTask = _this.handleCreateTask.bind(_assertThisInitialized(_this));\n    _this.validateForm = _this.validateForm.bind(_assertThisInitialized(_this));\n    _this.onChangeHandle = _this.onChangeHandle.bind(_assertThisInitialized(_this));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.onDateSelect = _this.onDateSelect.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CreateTask, [{\n    key: \"handleCbox\",\n    value: function handleCbox(e) {\n      var target = e.target;\n      this.setState(_defineProperty({}, e.target.name, !this.state[e.target.name]));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var fullname = this.props.userData.org_name;\n      this.setState({\n        formData: {\n          merchant_name: fullname\n        }\n      });\n      this.props.getLocations();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      var _this2 = this;\n\n      //console.log('Create Task Props : ', props.isTaskProcessing, this.props.isTaskProcessing, !!!props.isTaskProcessing && props.isTaskProcessing !== this.props.isTaskProcessing);\n      if (!!!props.isTaskProcessing && props.isTaskProcessing !== this.props.isTaskProcessing) {\n        this.handleClose();\n      } else {\n        var fullname = this.props.userData.org_name;\n        this.setState({\n          show: props.show,\n          formData: _objectSpread(_objectSpread({}, this.state.formData), {}, {\n            merchant_name: fullname\n          })\n        }, function () {\n          _this2.validateForm();\n        });\n      }\n\n      if (!isEmpty(props.settingsData) && !isEqual(this.state.settingsData, props.settingsData)) {\n        this.timings = this.timing(props.settingsData.start_time, props.settingsData.end_time);\n        var delivery_time = !!this.timings.key && !!!this.state.formData.delivery_time ? this.timings.key : '';\n        this.setState({\n          settingsData: props.settingsData,\n          formData: _objectSpread(_objectSpread({}, this.state.formData), {}, {\n            delivery_time: delivery_time\n          })\n        });\n      }\n    }\n  }, {\n    key: \"handleClose\",\n    value: function handleClose() {\n      var fullname = this.props.userData.org_name;\n      var delivery_time = this.timings.key;\n      this.setState(_defineProperty({\n        //show: false,\n        recipient_location: {},\n        formData: {\n          merchant_name: fullname,\n          delivery_time: delivery_time\n        },\n        recipient_address: '',\n        startDate: new Date()\n      }, \"recipient_location\", {\n        zipcode: '',\n        state_code: '',\n        latitude: '',\n        longitude: '',\n        address: ''\n      }), function () {\n        this.props.handleClose();\n      });\n    }\n  }, {\n    key: \"timing\",\n    value: function timing(start, end) {\n      //console.log('Start End : ', start, end);\n      var today = moment().format('MM/DD/YYYY');\n      var now = moment().unix();\n      var gap = 30 * 60;\n      var key = \"\";\n      var stimestamp = moment(today + ' ' + start, 'MM/DD/YYYY H:mm').unix();\n      var etimestamp = moment(today + ' ' + end, 'MM/DD/YYYY H:mm').unix();\n      var data = [];\n\n      for (var i = stimestamp; i < etimestamp; i = i + gap) {\n        data.push({\n          t: moment(i * 1000).format('hh:mm A') + '-' + moment((i + gap) * 1000).format('hh:mm A')\n        });\n\n        if (now >= i && now <= i + gap) {\n          key = moment(i * 1000).format('hh:mm A') + '-' + moment((i + gap) * 1000).format('hh:mm A');\n        }\n      }\n\n      return {\n        data: data,\n        key: key\n      };\n    }\n  }, {\n    key: \"utc\",\n    value: function utc(date, time, tz) {\n      var datetime = moment(date).format('MM/DD/YYYY') + ' ' + time; //console.log('Date Time : ', datetime);\n\n      return moment.tz(datetime, 'MM/DD/YYYY hh:mm A', tz).utc().unix();\n    }\n  }, {\n    key: \"handleCreateTask\",\n    value: function handleCreateTask(e) {\n      //console.log('Task Type : ', this.props.type);\n      e.preventDefault();\n      var validate = this.validateForm();\n      var isError = validate.isError; //console.log('Is Error : ', isError)\n\n      if (isError) {\n        return false;\n      } else {\n        var formData = _objectSpread({}, this.state.formData);\n\n        var storeId = formData.store;\n        var storeIndex = (this.props.stores || []).findIndex(function (item) {\n          return item.id === storeId;\n        });\n        var store = this.props.stores[storeIndex];\n        var timeZone = store.data.timeZone;\n        var time = formData.delivery_time.split('-');\n        var from_time = time[0];\n        var to_time = time[1];\n        var completeAfter = this.utc(formData.delivery_date, from_time, timeZone);\n        var completeBefore = this.utc(formData.delivery_date, to_time, timeZone); //console.log('Stores : ', store, completeAfter, completeBefore);\n\n        var data = {\n          storeId: store.data.store_id,\n          merchant: {\n            name: formData.merchant_name,\n            phone: formData.merchant_phone,\n            location: [store.data.longitude, store.data.latitude],\n            address: {\n              state: store.data.state,\n              postalCode: store.data.postalCode,\n              country: store.data.country,\n              city: store.data.city,\n              street: store.data.street,\n              number: store.data.number\n            },\n            notes: formData.merchant_notes\n          },\n          recipient: {\n            email: formData.recipient_email,\n            name: formData.recipient_name,\n            phone: formData.recipient_phone,\n            location: [formData.recipient_location.longitude, formData.recipient_location.latitude],\n            address: {\n              state: formData.recipient_location.state_code,\n              postalCode: formData.recipient_location.zipcode,\n              country: formData.recipient_location.country,\n              city: formData.recipient_location.city,\n              street: formData.recipient_location.street,\n              number: formData.recipient_location.number\n            },\n            notes: formData.recipient_notes\n          },\n          orderNumber: formData.orderNumber,\n          store: store.data.store,\n          completeAfter: completeAfter,\n          completeBefore: completeBefore,\n          timezone: timeZone,\n          alcohol: this.state.alcohol,\n          //taskType: (!!this.props.pharmacy) ? 'pharmacy' : 'general',//this.props.taskType,\n          taskType: this.props.type,\n          metadata: null,\n          signature: true,\n          tip: !!formData.tip ? formData.tip : 0,\n          sms: {\n            merchantStart: store.data.sms.merchant_start,\n            merchantEta: store.data.sms.merchant_eta,\n            recipientStart: store.data.sms.recipient_start,\n            recipientEta: store.data.sms.recipient_eta\n          }\n        }; //console.log('Form Submitted : ', data);\n\n        this.props.createTask(data); //this.handleClose();\n      }\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm() {\n      var formData = this.state.formData || {}; //let errors                  =   this.state.errors || {};\n\n      var errors = _objectSpread({}, this.defaultErrors);\n\n      var isError = false;\n\n      if (!!!formData.merchant_name) {\n        errors.merchant_name = true;\n        isError = true;\n      }\n\n      if (!!!formData.merchant_phone) {\n        errors.merchant_phone = true;\n        isError = true;\n      } else {\n        if (formData.merchant_phone.length != 10 && !isNaN(formData.merchant_phone)) {\n          errors.merchant_phone = true;\n          isError = true;\n        }\n      }\n\n      if (!!!formData.orderNumber) {\n        errors.orderNumber = true;\n        isError = true;\n      }\n\n      if (!!!formData.store) {\n        errors.store = true;\n        isError = true;\n      }\n\n      if (!!!formData.merchant_address) {\n        //console.log(\"here\",!!!formData.merchant_address, formData.merchant_address); \n        errors.merchant_address = true;\n        isError = true;\n      }\n\n      if (!!!formData.recipient_name) {\n        errors.recipient_name = true;\n        isError = true;\n      }\n\n      if (!!!formData.delivery_date) {\n        errors.delivery_date = true;\n        isError = true;\n      }\n\n      if (!!!formData.delivery_time) {\n        errors.delivery_time = true;\n        isError = true;\n      }\n\n      if (!!!formData.recipient_phone) {\n        errors.recipient_phone = true;\n        isError = true;\n      } else {\n        if (formData.recipient_phone.length != 10 || isNaN(formData.recipient_phone)) {\n          errors.recipient_phone = true;\n          isError = true;\n        }\n      }\n\n      if (isEmpty(formData.recipient_location) || !!errors.recipient_address) {\n        errors.recipient_address = true;\n        isError = true;\n      }\n\n      if (!!formData.tip && isNaN(formData.tip)) {\n        errors.tip = true;\n        isError = true;\n      }\n\n      return {\n        isError: isError,\n        errors: errors\n      };\n    }\n  }, {\n    key: \"onChangeHandle\",\n    value: function onChangeHandle(e) {\n      var self = this;\n\n      var formData = _objectSpread({}, this.state.formData); //console.log('Form Data : ', formData, e.target.name, e.target.value, e.target.checked);\n\n\n      var name = e.target.name;\n      var value = e.target.value;\n      formData[name] = value;\n\n      var errors = _objectSpread({}, this.state.errors);\n\n      errors[name] = \"\"; //console.log(\"from dta\",formData);\n\n      this.setState({\n        formData: formData,\n        errors: errors\n      }, function () {\n        if (name === \"store\") self.selectStore(); //console.log(name);\n\n        if (name === \"merchant_address\") self.selectMerchantAddress();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var show = this.state.show || false;\n      var locationData = this.props.locations || {};\n      var pharmacy = this.props.pharmacy || false;\n      var stores = this.props.stores || [];\n      var locations = this.props.locations || [];\n      var taskType = this.props.taskType || '';\n      var formData = this.state.formData || {}; //let timings             =   this.timings.data || [];\n\n      var timings = !!this.timings && !!this.timings.data ? this.timings.data : [];\n      var currentTime = !!this.props.timings ? this.props.timings.key : [];\n      var validate = this.validateForm(); //let errors              =  this.state.errors ;\n\n      var errors = validate.errors;\n      var isDisabled = validate.isError;\n      /* if(!!errors.merchant_name\n          || !!errors.orderNumber\n          || !!errors.store\n          || !!errors.merchant_address\n          || !!errors.merchant_phone\n          || !!errors.delivery_date\n          || !!errors.delivery_time\n          || !!errors.recipient_name\n          || !!errors.recipient_address\n          || !!errors.recipient_phone\n          || !!errors.tip) {\n          isDisabled          =   true;\n      } */\n      //console.log('Pharmacy : ', this.props.pharmacy);\n      //console.log('Form data : ', this.state.formData);\n      //console.log('Errors ', errors);\n\n      var rsSrchStyles = {\n        input: {\n          width: '260px',\n          padding: '0px 15px 0px 35px',\n          color: '#333',\n          margin: '0'\n        },\n        autocompleteContainer: {\n          borderRadius: '0 0 3px 3px',\n          zIndex: '999',\n          background: 'url(/static/images/pow_google.jpg) no-repeat right bottom #fff',\n          position: 'relative',\n          border: '1px solid #e8e8e8',\n          boxShadow: '1px 5px 10px rgba(68,68,68,0.2)'\n        },\n        autocompleteItem: _defineProperty({\n          textAlign: 'left',\n          fontSize: '12px',\n          padding: '5px 8px 5px 30px',\n          lineHeight: '20px',\n          color: '#999',\n          background: '10px 8px #fff',\n          margin: '0',\n          borderTop: 'none',\n          borderBottom: '1px solid #ccc'\n        }, \"background\", 'url(/static/images/location_google.png) no-repeat 10px 8px #fff'),\n        autocompleteItemActive: {\n          color: '#E44500'\n        }\n      };\n      var inputProps = {\n        type: \"text\",\n        id: \"del_add_name_hdr\",\n        value: this.state.address ? this.state.address : '',\n        //onChange: this.addHandleChange,\n        placeholder: 'Where are you?',\n        autoFocus: true\n      }; //console.log('Errors : ', errors);\n      //console.log('Stores : ', this.props.stores);\n      //console.log('Locations : ', this.props.locations);\n\n      return /*#__PURE__*/React.createElement(Modal, {\n        size: \"lg\",\n        className: \"c-modal boxmod\",\n        show: show,\n        onHide: this.handleClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Header, {\n        closeButton: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 21\n        }\n      }, \"Create Task\")), /*#__PURE__*/React.createElement(Form, {\n        autoComplete: \"off\",\n        onSubmit: this.handleCreateTask,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        noGutters: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        sm: \"12\",\n        className: \"l_col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"merchant_box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 33\n        }\n      }, \"Merchant\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 37\n        }\n      }, \"Name\"), formData.merchant_name), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"store\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 37\n        }\n      }, \"Store\"), /*#__PURE__*/React.createElement(StoreDropdown, {\n        stores: this.props.stores,\n        selected: formData.store,\n        className: !!errors.store ? \"error\" : \"\",\n        handleStoreChange: this.selectStore\n        /* handleRemoveFilter={this.handleRemoveFilter} */\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 37\n        }\n      }, \"Address\"), /*#__PURE__*/React.createElement(LocationDropdown, {\n        locations: this.props.locations,\n        selected: formData.merchant_address,\n        className: !!errors.merchant_address ? \"error\" : \"\",\n        handleLocationChange: this.selectMerchantAddress\n        /* handleRemoveFilter={this.handleRemoveFilter} */\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"order-number\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 37\n        }\n      }, \"Order Number\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter order number\",\n        className: !!errors.orderNumber ? \"t_box error\" : \"t_box\",\n        name: \"orderNumber\",\n        onChange: this.onChangeHandle,\n        value: formData.orderNumber,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"phone\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 37\n        }\n      }, \"Phone\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter phone number\",\n        className: !!errors.merchant_phone ? \"t_box error\" : \"t_box\",\n        name: \"merchant_phone\",\n        onChange: this.onChangeHandle,\n        value: formData.merchant_phone,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 37\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"merchant_box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 33\n        }\n      }, \"Delivery\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"delivery\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 37\n        }\n      }, \"Delivery Date\"), /*#__PURE__*/React.createElement(DatePicker, {\n        className: !!errors.delivery_date ? \"t_box error\" : \"t_box\",\n        selected: formData.delivery_date,\n        onChange: this.onDateSelect,\n        minDate: new Date(),\n        placeholderText: \"Today\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 37\n        }\n      }, \"Time\"), /*#__PURE__*/React.createElement(\"select\", {\n        className: !!errors.delivery_time ? \"t_box error\" : \"t_box\",\n        selected: formData.delivery_date,\n        name: \"delivery_time\",\n        onChange: this.onChangeHandle,\n        value: formData.delivery_time,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 41\n        }\n      }, \"-- Select --\"), (timings || []).map(function (v, k) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: k,\n          value: v.t,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 49\n          }\n        }, v.t);\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"d-notes\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 37\n        }\n      }, \"Driver Notes\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"t_box\",\n        name: \"merchant_notes\",\n        onChange: this.onChangeHandle,\n        value: formData.merchant_notes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 37\n        }\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        sm: \"12\",\n        className: \"r_col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"merchant_box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 33\n        }\n      }, \"Recipient\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"rname\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 37\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        placeholder: \"Enter Name\",\n        className: !!errors.recipient_name ? \"t_box error\" : \"t_box\",\n        name: \"recipient_name\",\n        onChange: this.onChangeHandle,\n        value: formData.recipient_name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"raddress\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 37\n        }\n      }, \"Address\"), /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n        value: this.state.recipient_address,\n        onChange: this.handleChange,\n        onSelect: this.handleSelect,\n        styles: rsSrchStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 37\n        }\n      }, function (_ref2) {\n        var getInputProps = _ref2.getInputProps,\n            suggestions = _ref2.suggestions,\n            getSuggestionItemProps = _ref2.getSuggestionItemProps,\n            loading = _ref2.loading;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pRelative error\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n          autoComplete: \"off\"\n        }, getInputProps({\n          placeholder: 'Enter Address',\n          className: !!errors.recipient_address ? \"t_box error\" : \"t_box\"\n        }), {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 45\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 45\n          }\n        }, loading && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 57\n          }\n        }, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: '#fafafa',\n            cursor: 'pointer'\n          } : {\n            backgroundColor: '#ffffff',\n            cursor: 'pointer'\n          };\n          return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 49\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 731,\n              columnNumber: 53\n            }\n          }, suggestion.description));\n        })));\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"rphone\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 37\n        }\n      }, \"Phone\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter phone number\",\n        className: !!errors.recipient_phone ? \"t_box error\" : \"t_box\",\n        name: \"recipient_phone\",\n        onChange: this.onChangeHandle,\n        value: formData.recipient_phone,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"remail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 37\n        }\n      }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"email\",\n        placeholder: \"Enter email\",\n        className: \"t_box\",\n        name: \"recipient_email\",\n        onChange: this.onChangeHandle,\n        value: formData.recipient_email,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"notes\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 37\n        }\n      }, \"Add notes\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"t_box\",\n        name: \"recipient_notes\",\n        onChange: this.onChangeHandle,\n        value: formData.recipient_notes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"c_boxgroup\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"alcohol\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 41\n        }\n      }, \"Alcohol\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"alcohol\",\n        name: \"alcohol\",\n        className: \"c_box\",\n        checked: this.state.alcohol,\n        onChange: function onChange(e) {\n          return _this3.handleCbox(e);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 41\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"merchant_box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 33\n        }\n      }, \"Optional\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"tip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 37\n        }\n      }, \"Tip\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"0.00\",\n        className: !!errors.tip ? \"t_box error\" : \"t_box\",\n        name: \"tip\",\n        onChange: this.onChangeHandle,\n        value: formData.tip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 37\n        }\n      })))))), /*#__PURE__*/React.createElement(Modal.Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        disabled: isDisabled || !!this.props.isTaskProcessing,\n        className: !this.props.isTaskProcessing && !isDisabled ? 'active' : '',\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 25\n        }\n      }, !!this.props.isTaskProcessing ? 'Processing..' : 'Submit'))));\n    }\n  }]);\n\n  return CreateTask;\n}(Component);\n\nexport default CreateTask;","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/Modals/createTaskModal.js"],"names":["React","Component","Row","Col","Button","Form","Modal","DatePicker","addressFormater","PlacesAutocomplete","geocodeByAddress","getLatLng","findIndex","_findIndex","isEmpty","isEqual","moment","StoreDropdown","LocationDropdown","CreateTask","props","handleChange","recipient_address","setState","formData","state","recipient_location","selectStore","store","k","index","locations","item","id","merchant_address","merchant_phone","data","phone","merchant_notes","note","selectMerchantAddress","location","handleSelect","self","zipcode","state_code","latitude","longitude","address","then","results","formatted_address","lat","lng","matchExp","test","delAddData","deliveryAddress","addressArray","validAdrs","city","country","number","street","catch","error","console","onDateSelect","date","delivery_date","defaultErrors","merchant_name","last_name","orderNumber","recipient_name","recipient_phone","delivery_time","show","alcohol","signature","settingsData","startDate","Date","handleClose","bind","handleCbox","handleCreateTask","validateForm","onChangeHandle","e","target","name","fullname","userData","org_name","getLocations","isTaskProcessing","timings","timing","start_time","end_time","key","start","end","today","format","now","unix","gap","stimestamp","etimestamp","i","push","t","time","tz","datetime","utc","preventDefault","validate","isError","storeId","storeIndex","stores","timeZone","split","from_time","to_time","completeAfter","completeBefore","store_id","merchant","postalCode","notes","recipient","email","recipient_email","recipient_notes","timezone","taskType","type","metadata","tip","sms","merchantStart","merchant_start","merchantEta","merchant_eta","recipientStart","recipient_start","recipientEta","recipient_eta","createTask","errors","length","isNaN","value","locationData","pharmacy","currentTime","isDisabled","rsSrchStyles","input","width","padding","color","margin","autocompleteContainer","borderRadius","zIndex","background","position","border","boxShadow","autocompleteItem","textAlign","fontSize","lineHeight","borderTop","borderBottom","autocompleteItemActive","inputProps","placeholder","autoFocus","map","v","getInputProps","suggestions","getSuggestionItemProps","loading","className","suggestion","active","style","backgroundColor","cursor","description"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Row,\n    Col,\n    Button,\n    Form\n} from 'reactstrap';\nimport { Modal } from 'react-bootstrap';\nimport DatePicker from \"react-datepicker\";\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { addressFormater } from '../../util/helper';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport {findIndex as _findIndex, isEmpty, isEqual} from 'lodash';\nimport moment from 'moment-timezone';\nimport StoreDropdown from '../Filter/storeDropdown';\nimport LocationDropdown from '../Filter/locationDropdown';\n\nclass CreateTask extends Component{\n    constructor(props) {\n        super(props);\n        this.defaultErrors      =   {\n            merchant_name: \"\",\n            last_name:  \"\",\n            merchant_phone:\"\",\n            orderNumber:\"\",\n            store:\"\",\n            merchant_address:\"\",\n            recipient_name:\"\",\n            delivery_date:\"\",\n            recipient_phone:\"\",\n            delivery_time:\"\"\n        }\n        this.state              =   {\n           show         :   false,\n           alcohol      :   false,\n           signature    :   true,\n           locations    :   [],\n           formData     :   {},\n           settingsData :   {},\n           startDate    :   new Date(),\n           recipient_address    :   '',\n           recipient_location   :   {\n                zipcode: '',\n                state_code: '',\n                latitude: '',\n                longitude: '',\n                address: ''\n            },\n            /* errors:{\n                merchant_name: \"\",\n                last_name:  \"\",\n                merchant_phone:\"\",\n                orderNumber:\"\",\n                store:\"\",\n                merchant_address:\"\",\n                recipient_name:\"\",\n                delivery_date:\"\",\n                recipient_phone:\"\",\n                delivery_time:\"\"\n            } */\n        }\n        this.handleClose        =   this.handleClose.bind(this);\n        this.handleCbox         =   this.handleCbox.bind(this);\n        this.handleCreateTask   =   this.handleCreateTask.bind(this);\n        this.validateForm       =   this.validateForm.bind(this);\n        this.onChangeHandle     =   this.onChangeHandle.bind(this);\n        this.handleChange       =   this.handleChange.bind(this);\n        this.onDateSelect       =   this.onDateSelect.bind(this);\n    }    \n \n    handleChange = recipient_address => {\n        //console.log('Recipient Address', recipient_address);\n        this.setState({\n            recipient_address: recipient_address,\n            formData: {\n                ...this.state.formData,\n                recipient_location: {}\n            },\n            /* errors: {\n                ...this.state.errors,\n                recipient_address:\"\"\n            } */\n        });\n    };   \n        \n    selectStore = (store, k) => {\n        /* let errors                      =   {...this.state.errors};\n        errors['merchant_address']      =   \"\";\n        errors['merchant_phone']        =   \"\"; */\n        let index                       =   (this.props.locations || []).findIndex((item) => item.id === store.id);\n        if(!!store.id) {\n            //let store       =   this.props.stores[this.state.formData.store];\n            this.setState({\n                formData: {\n                    ...this.state.formData,\n                    store               :   store.id,\n                    merchant_address    :   store.id,\n                    merchant_phone      :   store.data.phone,\n                    merchant_notes      :   store.data.note\n                },\n                //errors: errors\n            })\n        } else {\n            this.setState({\n                formData: {\n                    ...this.state.formData,\n                    store               :   '',\n                    merchant_address    :   '',\n                    merchant_phone      :   '',\n                    merchant_notes      :   ''\n                },\n                //errors: errors\n            })\n        }\n       \n    };\n\n    selectMerchantAddress = (location, k) =>{\n        /* let errors                  =   {...this.state.errors};\n        errors['store']             =   \"\";\n        errors['merchant_phone']    =   \"\"; */\n        let index                       =   (this.props.locations || []).findIndex((item) => item.id === location.id);\n        if(!!location.id) {\n            //let location            =   this.props.locations[this.state.formData.merchant_address];\n            this.setState({\n                formData: {\n                    ...this.state.formData,\n                    store               :   location.id,\n                    merchant_address    :   location.id,\n                    merchant_phone      :   location.data.phone,\n                    merchant_notes      :   location.data.note\n                },\n                //errors: errors\n            })\n        } else {\n            this.setState({\n                formData: {\n                    ...this.state.formData,\n                    store               :   '',\n                    merchant_address    :   '',\n                    merchant_phone      :   '',\n                    merchant_notes      :   ''\n                },\n                //errors: errors\n            })\n        }\n    };\n\n    handleSelect = recipient_address => {\n        let self    =   this;\n        let data = {\n            zipcode: '',\n            state_code: '',\n            latitude: '',\n            longitude: '',\n            address: ''\n        };\n        geocodeByAddress(recipient_address)\n        .then((results) => {\n            //console.log(recipient_address, results[0], results[0].formatted_address);\n            data.address = results[0].formatted_address || '';\n            return getLatLng(results[0]);\n        })\n        .then(({ lat, lng }) => {\n            //console.log(lat, lng, data.address);\n            let matchExp = /(\\d+) (.+?), (.+?), (.+?) ([0-9]{5})/g;\n            if(matchExp.test(data.address)){\n                let delAddData = this.props.deliveryAddress;\n                //delvAddIndex = _findIndex(delAddData, {address: data.address});\n                /* if(delvAddIndex != -1){\n                self.editDelvAdd(delvAddIndex);\n                } else { */\n                    let addressArray = addressFormater(data.address);\n                    //console.log('Address : ', data.address, addressArray);\n                    if(!isEmpty(addressArray) && addressArray.validAdrs){\n                        data.latitude = lat;\n                        data.longitude = lng;\n                        data.address = addressArray.address;\n                        data.zipcode = addressArray.zipcode;\n                        data.state_code = addressArray.state_code;\n                        data.city = addressArray.city;\n                        data.country = addressArray.country;\n                        data.number = addressArray.number;\n                        data.street = addressArray.street;\n\n                        //console.log('AddressBox ###########', data);\n                        //this.setState({ address: addressArray.address }); \n                        self.setState({\n                            /* errors: {\n                                ...self.state.errors,\n                                recipient_address:\"\"\n                            }, */\n                            formData: {\n                                ...self.state.formData,\n                                recipient_location: data\n                            },\n                            recipient_address: data.address }); \n                    } else {\n                        //notiyerror('Oops, that does not seem like a valid address. Please try again.');\n                        self.setState({\n                            formData: {\n                                ...self.state.formData,\n                                recipient_location: {}\n                            }/* ,\n                            errors: {\n                                ...self.state.errors,\n                                recipient_address:\"Invalid Address\"\n                            } */\n                        });\n                    }//\n                //}             \n            } else {\n                //notiyerror('Oops, that does not seem like a valid address. Please try again.');\n                self.setState({\n                    formData: {\n                        ...self.state.formData,\n                        recipient_location: {}\n                    }/* ,\n                    errors: {\n                        ...self.state.errors,\n                        recipient_address:\"Invalid Address\"\n                    } */\n                });\n            }\n        })\n        .catch((error) => {\n            self.setState({\n                formData: {\n                    ...self.state.formData,\n                    recipient_location: {}\n                }/* ,\n                errors: {\n                    ...self.state.errors,\n                    recipient_address:\"Invalid Address\"\n                } */\n            });\n            console.error('Error', error)\n        });\n    };\n\n    onDateSelect = date => {\n        this.setState({\n            formData: {\n                ...this.state.formData,\n                delivery_date: date\n            }/* ,\n            errors: {\n                ...this.state.errors,\n                delivery_date: ''\n            } */\n        });\n    };\n\n    handleCbox(e) {\n        let target  =    e.target;\n        this.setState({\n            [e.target.name]: !this.state[e.target.name],\n        });\n    }\n\n    componentDidMount() {\n        let fullname        =   this.props.userData.org_name;\n        this.setState({formData: {merchant_name: fullname}});\n        this.props.getLocations();\n    }\n\n    componentWillReceiveProps(props) {\n        //console.log('Create Task Props : ', props.isTaskProcessing, this.props.isTaskProcessing, !!!props.isTaskProcessing && props.isTaskProcessing !== this.props.isTaskProcessing);\n        if(!!!props.isTaskProcessing && props.isTaskProcessing !== this.props.isTaskProcessing) {\n            this.handleClose();\n        } else {\n            let fullname        =   this.props.userData.org_name;\n            this.setState({\n                show: props.show,\n                formData     :   {\n                    ...this.state.formData,\n                    merchant_name   :   fullname\n                }\n            }, () => {\n                this.validateForm()\n            })\n        }\n        if(!isEmpty(props.settingsData) && !isEqual(this.state.settingsData, props.settingsData)) {\n           this.timings    =   this.timing(props.settingsData.start_time, props.settingsData.end_time);           \n            let delivery_time   =   (!!this.timings.key && !!!this.state.formData.delivery_time) ? this.timings.key : '';\n            this.setState({\n                settingsData:   props.settingsData,\n                formData: { ...this.state.formData, delivery_time: delivery_time}\n            })\n        }\n    }\n\n    handleClose() {\n        let fullname        =   this.props.userData.org_name;\n        let delivery_time   =   this.timings.key;\n        this.setState({\n            //show: false,\n            recipient_location : {},\n            formData     :   {\n                merchant_name   :   fullname,\n                delivery_time   :   delivery_time\n            },\n            recipient_address   :   '',\n            startDate    :   new Date(),\n            recipient_location   :   {\n                zipcode: '',\n                state_code: '',\n                latitude: '',\n                longitude: '',\n                address: ''\n            }/* ,\n            errors:{\n                merchant_name: \"\",\n                last_name:  \"\",\n                merchant_phone:\"\",\n                orderNumber:\"\",\n                store:\"\",\n                merchant_address:\"\",\n                recipient_name:\"\",\n                delivery_date:\"\",\n                recipient_phone:\"\",\n                delivery_time:\"\"\n            } */\n        }, function(){\n            this.props.handleClose();\n        });\n    }\n\n    timing(start, end) {\n       //console.log('Start End : ', start, end);\n       let today = moment().format('MM/DD/YYYY');\n       let now = moment().unix();\n       let gap = 30 * 60;\n       let key = \"\";\n       let stimestamp = moment(today+' '+start, 'MM/DD/YYYY H:mm').unix();\n       let etimestamp = moment(today+' '+end, 'MM/DD/YYYY H:mm').unix();\n       let data = [];\n       for(let i=stimestamp; i<etimestamp; i=i+gap) {\n          data.push({\n             t: moment(i*1000).format('hh:mm A')+'-'+moment((i+gap)*1000).format('hh:mm A')\n          });\n          if(now >= i && now <= i+gap ) {\n             key = moment(i*1000).format('hh:mm A')+'-'+moment((i+gap)*1000).format('hh:mm A');\n          }\n       }\n       return {data:data, key: key};\n    }\n\n    utc(date, time, tz) {\n        let datetime = moment(date).format('MM/DD/YYYY')+' '+time;\n        //console.log('Date Time : ', datetime);\n        return moment.tz(datetime, 'MM/DD/YYYY hh:mm A', tz).utc().unix();\n    }\n\n    handleCreateTask(e) { \n        //console.log('Task Type : ', this.props.type);\n        e.preventDefault();\n        let validate        =   this.validateForm();\n        let isError         =   validate.isError;\n        //console.log('Is Error : ', isError)\n        if(isError) {\n            return false;\n\n        } else{\n\n        let formData        =   {...this.state.formData};\n        let storeId         =   formData.store;\n        let storeIndex      =   (this.props.stores || []).findIndex(item => item.id === storeId);\n        let store           =   this.props.stores[storeIndex];\n        let timeZone        =   store.data.timeZone;\n        let time            =   formData.delivery_time.split('-');\n        let from_time       =   time[0];\n        let to_time         =   time[1];\n        let completeAfter   =   this.utc(formData.delivery_date,  from_time, timeZone);\n\t    let completeBefore  =   this.utc(formData.delivery_date, to_time, timeZone);\n        //console.log('Stores : ', store, completeAfter, completeBefore);\n        let data    =   {\n            storeId     :   store.data.store_id,\n            merchant: {\n                name: formData.merchant_name,\n                phone: formData.merchant_phone,\n                location: [\n                    store.data.longitude,\n                    store.data.latitude\n                ],\n                address: {\n                    state: store.data.state,\n                    postalCode: store.data.postalCode,\n                    country: store.data.country,\n                    city: store.data.city,\n                    street: store.data.street,\n                    number: store.data.number\n                },\n                notes: formData.merchant_notes\n            },\n            recipient: {\n                email: formData.recipient_email,\n                name: formData.recipient_name,\n                phone: formData.recipient_phone,\n                location: [\n                    formData.recipient_location.longitude,\n                    formData.recipient_location.latitude\n                ],\n                address: {\n                    state: formData.recipient_location.state_code,\n                    postalCode: formData.recipient_location.zipcode,\n                    country: formData.recipient_location.country,\n                    city: formData.recipient_location.city,\n                    street: formData.recipient_location.street,\n                    number: formData.recipient_location.number\n                },\n                notes: formData.recipient_notes\n            },\n            orderNumber: formData.orderNumber,\n            store: store.data.store,\n            completeAfter: completeAfter,\n            completeBefore: completeBefore,\n            timezone: timeZone,\n            alcohol: this.state.alcohol,\n            //taskType: (!!this.props.pharmacy) ? 'pharmacy' : 'general',//this.props.taskType,\n            taskType: this.props.type,\n            metadata: null,\n            signature: true,\n            tip: (!!formData.tip) ? formData.tip : 0,\n            sms: {\n                merchantStart: store.data.sms.merchant_start,\n                merchantEta: store.data.sms.merchant_eta,\n                recipientStart: store.data.sms.recipient_start,\n                recipientEta: store.data.sms.recipient_eta\n            }\n        }\n        //console.log('Form Submitted : ', data);\n        this.props.createTask(data);\n        //this.handleClose();\n    }\n    }\n    \n    validateForm(){\n        let formData                =   this.state.formData || {};\n        //let errors                  =   this.state.errors || {};\n        let errors                  =   {...this.defaultErrors};\n        let isError                 =   false;\n        if(!!!formData.merchant_name){\n            errors.merchant_name    =   true;\n            isError                 =   true;\n        }        \n        if(!!!formData.merchant_phone){\n            errors.merchant_phone   =   true;\n            isError                 =   true;\n        }\n        else {\n            if(formData.merchant_phone.length!=10 && !isNaN(formData.merchant_phone)) {\n                errors.merchant_phone   =   true;\n                isError                 =   true;\n            }\n        }       \n        if(!!!formData.orderNumber){\n            errors.orderNumber      =   true;\n            isError                 =   true;\n        }        \n        if(!!!formData.store){\n            errors.store            =   true;\n            isError                 =   true;\n        }     \n        if(!!!formData.merchant_address){\n            //console.log(\"here\",!!!formData.merchant_address, formData.merchant_address); \n            errors.merchant_address     =   true;\n            isError                     =   true;\n        }\n        if(!!!formData.recipient_name) {\n            errors.recipient_name   =   true;\n            isError                 =   true;\n        }\n        if(!!!formData.delivery_date) {\n            errors.delivery_date    =   true;\n            isError                 =   true;\n        }\n        if(!!!formData.delivery_time) {\n            errors.delivery_time    =   true;\n            isError                 =   true;\n        }\n        if(!!!formData.recipient_phone) {\n           \n            errors.recipient_phone  =   true;\n            isError                 =   true;\n        } else {\n            if(formData.recipient_phone.length!=10 || isNaN(formData.recipient_phone)) {\n                errors.recipient_phone  =   true;\n                isError                 =   true;\n            }\n        }\n        if(isEmpty(formData.recipient_location) || !!errors.recipient_address) {\n            errors.recipient_address    =   true;\n            isError                     =   true;\n        }\n        if(!!formData.tip && isNaN(formData.tip)) {\n            errors.tip              =   true;\n            isError                 =   true;\n        }\n        return {isError: isError, errors: errors};\n    }\n\n    onChangeHandle(e) {\n        let self                    =   this;\n        let formData                =   { ...this.state.formData};\n        //console.log('Form Data : ', formData, e.target.name, e.target.value, e.target.checked);\n        const name                  =   e.target.name;\n        const value\t\t            =   e.target.value\n        formData[name]              =   value;\n        let errors                  =   {...this.state.errors};\n        errors[name]                =   \"\";\n        //console.log(\"from dta\",formData);\n        this.setState({ formData: formData, errors: errors }, function(){\n            if(name === \"store\")\n                self.selectStore();\n                //console.log(name);\n            if(name === \"merchant_address\")\n                self.selectMerchantAddress();\n        });\n    }\n\n    render() {\n        let show                =   this.state.show || false;\n        let locationData        =   this.props.locations || {};\n        let pharmacy            =   this.props.pharmacy || false;\n        let stores              =   this.props.stores || [];\n        let locations           =   this.props.locations || [];\n        let taskType            =   this.props.taskType || '';\n        let formData            =   this.state.formData || {};\n        //let timings             =   this.timings.data || [];\n        let timings             =   (!!this.timings && !!this.timings.data) ? this.timings.data : [];\n        let currentTime         =   (!!this.props.timings) ? this.props.timings.key : [];\n        let validate            =   this.validateForm();\n        //let errors              =  this.state.errors ;\n        let errors              =   validate.errors;\n        let isDisabled          =   validate.isError;\n        /* if(!!errors.merchant_name\n            || !!errors.orderNumber\n            || !!errors.store\n            || !!errors.merchant_address\n            || !!errors.merchant_phone\n            || !!errors.delivery_date\n            || !!errors.delivery_time\n            || !!errors.recipient_name\n            || !!errors.recipient_address\n            || !!errors.recipient_phone\n            || !!errors.tip) {\n            isDisabled          =   true;\n        } */\n        //console.log('Pharmacy : ', this.props.pharmacy);\n        //console.log('Form data : ', this.state.formData);\n        //console.log('Errors ', errors);\n        const rsSrchStyles = {\n            input: {\n                width: '260px',\n                padding: '0px 15px 0px 35px',\n                color: '#333',\n                margin:'0'\n            },\n            autocompleteContainer: {\n                borderRadius: '0 0 3px 3px',\n                zIndex: '999',\n                background: 'url(/static/images/pow_google.jpg) no-repeat right bottom #fff',\n                position: 'relative',\n                border: '1px solid #e8e8e8',\n                boxShadow:'1px 5px 10px rgba(68,68,68,0.2)',\n            },\n            autocompleteItem: {\n                textAlign: 'left',\n                fontSize: '12px',\n                padding: '5px 8px 5px 30px',\n                lineHeight:'20px',\n                color: '#999',\n                background: '10px 8px #fff',\n                margin: '0',\n                borderTop:'none',\n                borderBottom: '1px solid #ccc',\n                background: 'url(/static/images/location_google.png) no-repeat 10px 8px #fff'\n            },\n            autocompleteItemActive: { color: '#E44500' }\n        };\n\n        const inputProps = {\n            type: \"text\",\n            id: \"del_add_name_hdr\",\n            value: this.state.address ? this.state.address: '',\n            //onChange: this.addHandleChange,\n            placeholder: 'Where are you?',\n            autoFocus: true\n        };\n        //console.log('Errors : ', errors);\n        //console.log('Stores : ', this.props.stores);\n        //console.log('Locations : ', this.props.locations);\n        return (\n            <Modal size=\"lg\" className=\"c-modal boxmod\" show={show} onHide={this.handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Create Task</Modal.Title>\n                </Modal.Header>\n                <Form autoComplete=\"off\" onSubmit={this.handleCreateTask}>\n                    <Modal.Body>\n                        <Row noGutters>\n                            <Col md=\"6\" sm=\"12\" className=\"l_col\"> \n                                <div className=\"merchant_box\">\n                                <h4>Merchant</h4>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"name\">Name</label>\n                                    {/* <input type=\"text\" placeholder=\"Enter Name\" className={!!errors.merchant_name  ? \"t_box error\" : \"t_box\" } name=\"merchant_name\" onChange={this.onChangeHandle} value={formData.merchant_name}/> */}\n                                    {formData.merchant_name}\n                                </div>\n                                \n                                <div className=\"form-group\">\n                                    <label htmlFor=\"store\">Store</label>\n                                    {/* <select className={!!errors.store ? \"s_box error\" : \"s_box\"} name=\"store\" onChange={this.onChangeHandle} value={formData.store}>\n                                        <option value=\"\">-- Select --</option>\n                                        {\n                                            stores.map((v, k)    =>  {\n                                                return (\n                                                    <option key={k} value={k}>{v.label}</option>\n                                                )\n                                            })\n                                        }\n                                    </select> */}\n                                    \n                                    <StoreDropdown\n                                        stores              =   {this.props.stores}\n                                        selected            =   {formData.store}\n                                        className           =   {!!errors.store ? \"error\" : \"\"}\n                                        handleStoreChange   =   {this.selectStore}\n                                        /* handleRemoveFilter={this.handleRemoveFilter} */\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"address\">Address</label>\n                                    {/* <select className={!!errors.merchant_address ? \"s_box error\" : \"s_box\"} name=\"merchant_address\" onChange={this.onChangeHandle} value={formData.merchant_address}>\n                                        <option value=\"\">-- Select --</option>\n                                        {\n                                            locations.map((v, k)    =>  {\n                                                return (\n                                                <option key={k} value={k}>{v.label}</option>\n                                                )\n                                            })\n                                        }\n                                    </select> */}                              \n                                    \n                                    <LocationDropdown\n                                        locations               =   {this.props.locations}\n                                        selected                =   {formData.merchant_address}\n                                        className               =   {!!errors.merchant_address ? \"error\" : \"\"}\n                                        handleLocationChange    =   {this.selectMerchantAddress}\n                                        /* handleRemoveFilter={this.handleRemoveFilter} */\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"order-number\">Order Number</label>\n                                    <input type=\"text\" placeholder=\"Enter order number\"  className={!!errors.orderNumber  ? \"t_box error\" : \"t_box\" } name=\"orderNumber\" onChange={this.onChangeHandle} value={formData.orderNumber}/>\n                                </div>                                \n                                <div className=\"form-group\">\n                                    <label htmlFor=\"phone\">Phone</label>\n                                    <input type=\"text\" placeholder=\"Enter phone number\" className={!!errors.merchant_phone ? \"t_box error\" : \"t_box\" } name=\"merchant_phone\" onChange={this.onChangeHandle} value={formData.merchant_phone}/>\n                                </div>\n                                </div>\n                                <div className=\"merchant_box\">\n                                <h4>Delivery</h4>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"delivery\">Delivery Date</label>\n                                    {/* <input type=\"text\" placeholder=\"Today\" className=\"t_box\" id=\"delivery\" /> */}\n                                    <DatePicker className={!!errors.delivery_date ? \"t_box error\" : \"t_box\" }  selected={formData.delivery_date} onChange={this.onDateSelect} minDate={new Date()} placeholderText=\"Today\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"time\">Time</label>\n                                    {/* <input type=\"text\" placeholder=\"02:00pm – 2:30pm\" className=\"t_box\" id=\"time\" /> */}\n                                    <select className={!!errors.delivery_time ? \"t_box error\" : \"t_box\" }  selected={formData.delivery_date} name=\"delivery_time\" onChange={this.onChangeHandle} value={formData.delivery_time}>\n                                        <option>-- Select --</option>\n                                        {\n                                            (timings || []).map((v, k)    =>  {\n                                                return (\n                                                <option key={k} value={v.t}>{v.t}</option>\n                                                )\n                                            })\n                                        }\n                                    </select>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"d-notes\">Driver Notes</label>\n                                    <input type=\"text\" className=\"t_box\" name=\"merchant_notes\" onChange={this.onChangeHandle} value={formData.merchant_notes}/>\n                                </div>\n                                </div>\n                            </Col>\n                            <Col md=\"6\" sm=\"12\" className=\"r_col\">\n                                <div className=\"merchant_box\">\n                                <h4>Recipient</h4>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"rname\">Name</label>\n                                    <input type=\"text\" autoComplete=\"off\" placeholder=\"Enter Name\" className={!!errors.recipient_name  ? \"t_box error\" : \"t_box\" } name=\"recipient_name\" onChange={this.onChangeHandle} value={formData.recipient_name}/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"raddress\">Address</label>\n                                    {/* <input type=\"text\" placeholder=\"Enter address\" className=\"t_box\" id=\"rddress\" /> */}\n                                    <PlacesAutocomplete\n                                        value={this.state.recipient_address}\n                                        onChange={this.handleChange}\n                                        onSelect={this.handleSelect}\n                                        styles={rsSrchStyles}\n                                    >\n                                        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                                        <div className=\"pRelative error\">\n                                            <input\n                                            autoComplete=\"off\"\n                                            {...getInputProps({\n                                                placeholder: 'Enter Address',\n                                                className: !!errors.recipient_address  ? \"t_box error\" : \"t_box\",\n                                            })}\n                                            />\n                                            <div className=\"autocomplete-dropdown-container\">\n                                            {loading && <div>Loading...</div>}\n                                            {suggestions.map(suggestion => {\n                                                const className = suggestion.active\n                                                ? 'suggestion-item--active'\n                                                : 'suggestion-item';\n                                                // inline style for demonstration purpose\n                                                const style = suggestion.active\n                                                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                                                : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                                                return (\n                                                <div\n                                                    {...getSuggestionItemProps(suggestion, {\n                                                    className,\n                                                    style,\n                                                    })}\n                                                >\n                                                    <span>{suggestion.description}</span>\n                                                </div>\n                                                );\n                                            })}\n                                            </div>\n                                        </div>\n                                        )}\n                                    </PlacesAutocomplete>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"rphone\">Phone</label>\n                                    <input type=\"text\" placeholder=\"Enter phone number\" className={!!errors.recipient_phone ? \"t_box error\" : \"t_box\" } name=\"recipient_phone\" onChange={this.onChangeHandle} value={formData.recipient_phone}/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"remail\">Email</label>\n                                    <input type=\"email\" placeholder=\"Enter email\" className=\"t_box\" name=\"recipient_email\" onChange={this.onChangeHandle} value={formData.recipient_email}/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"notes\">Add notes</label>\n                                    <input type=\"text\" className=\"t_box\" name=\"recipient_notes\" onChange={this.onChangeHandle} value={formData.recipient_notes}/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <span className=\"c_boxgroup\">\n                                        <label htmlFor=\"alcohol\">Alcohol</label>\n                                        <input type=\"checkbox\" id=\"alcohol\" name=\"alcohol\" className=\"c_box\" checked={this.state.alcohol} onChange={(e)=>this.handleCbox(e)}/>\n                                    </span>\n                                    {/* <span className=\"c_boxgroup\">\n                                        <label htmlFor=\"signature\">Signature</label>\n                                        <input type=\"checkbox\" id=\"signature\" name=\"signature\" className=\"c_box\" checked={this.state.signature} onChange={(e)=>this.handleCbox(e)}/>\n                                    </span> */}\n                                </div>\n                                </div>\n                                <div className=\"merchant_box\">\n                                <h4>Optional</h4>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"tip\">Tip</label>\n                                    <input type=\"text\" placeholder=\"0.00\" className={!!errors.tip ? \"t_box error\" : \"t_box\" } name=\"tip\" onChange={this.onChangeHandle} value={formData.tip}/>\n                                </div>\n                                {/* <div className=\"form-group\">\n                                    <label htmlFor=\"store-id\">Store ID</label>\n                                    <input type=\"email\" placeholder=\"Enter Store ID\" className=\"t_box\" id=\"store-id\" />\n                                </div> */}\n                                </div>\n                            </Col>\n                        </Row>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button type=\"submit\" disabled={isDisabled || !!this.props.isTaskProcessing} className={(!this.props.isTaskProcessing && !isDisabled) ? 'active' : ''} variant=\"primary\">\n                            {(!!this.props.isTaskProcessing)? 'Processing..' : 'Submit'}\n                        </Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal>\n        )\n    }\n}\nexport default CreateTask;"]},"metadata":{},"sourceType":"module"}