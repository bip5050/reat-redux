{"ast":null,"code":"import _objectSpread from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/biplab/Desktop/foodjets/src/containers/ResetPassword/resetPassword.js\";\nimport React, { Component } from 'react';\nimport { PropTypes as PT } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\nvar RsetpasswordForm = /*#__PURE__*/function (_Component) {\n  _inherits(RsetpasswordForm, _Component);\n\n  var _super = _createSuper(RsetpasswordForm);\n\n  function RsetpasswordForm(props) {\n    var _this;\n\n    _classCallCheck(this, RsetpasswordForm);\n\n    _this = _super.call(this, props);\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      if (_this.password.value != _this.confirmpassword.value && e.type == \"submit\") {\n        _this.props.passwordnotmatch();\n\n        return;\n      }\n\n      var password = _this.password.value;\n      var confirmpassword = _this.confirmpassword.value;\n      var key = _this.state.key;\n      var data = {\n        password: password,\n        key: key\n      };\n      if (!_this.validate({\n        password: password,\n        confirmpassword: confirmpassword\n      }).errors.password && !_this.validate({\n        password: password,\n        confirmpassword: confirmpassword\n      }).errors.Confirmpass && e.type == \"submit\") _this.props.resetPassword(data);\n    };\n\n    _this.validate = function (data) {\n      var formData = data || {};\n\n      var errors = _objectSpread({}, _this.state.defaultError);\n\n      var isError = false;\n\n      if (!!!formData.password) {\n        errors.password = true;\n        isError = true;\n      } else {\n        errors.password = false;\n        isError = false;\n      }\n\n      if (!!!formData.confirmpassword) {\n        errors.Confirmpass = true;\n        isError = true;\n      } else {\n        errors.Confirmpass = false;\n        isError = false;\n      }\n\n      console.log(\"errors\", errors);\n\n      _this.setState({\n        defaultError: errors\n      });\n\n      return {\n        isError: isError,\n        errors: errors\n      };\n    };\n\n    _this.state = {\n      msg: '',\n      key: \"\",\n      match: false,\n      defaultError: {\n        password: false,\n        Confirmpass: false\n      }\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(RsetpasswordForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props);\n      this.setState({\n        key: window.location.href.split('/').slice(-2)[1]\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      console.log(\"recive\", props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var errors = _objectSpread({}, this.state.defaultError);\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login_p\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 10\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"log_left forgot-l\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }\n      }, !!!this.props.isSuccess ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 22\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }\n      }, \"Reset Password\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }\n      }, \"Set your new password for your account\"), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        className: \"t-pass ltbox \".concat(!!errors.password ? ' error' : ''),\n        type: \"password\",\n        ref: function ref(input) {\n          return _this2.password = input;\n        },\n        onChange: function onChange(e) {\n          return _this2.handleSubmit(e);\n        },\n        placeholder: \"New password\"\n        /*defaultValue=\"admin\"*/\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 31\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        className: \"t-pass ltbox \".concat(!!errors.Confirmpass ? ' error' : ''),\n        type: \"password\",\n        ref: function ref(input) {\n          return _this2.confirmpassword = input;\n        },\n        onChange: function onChange(e) {\n          return _this2.handleSubmit(e);\n        },\n        placeholder: \"Confirm password\"\n        /*defaultValue=\"admin\"*/\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 31\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sbtn_pan\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"sbtn\",\n        disabled: !!this.props.isProcessing,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 31\n        }\n      }, !!this.props.isProcessing ? 'Processing....' : 'Reset My Password')), this.props.isError ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"aleart_pan\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 51\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"alert_box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 33\n        }\n      }, this.props.errMassage)) : \"\")) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"aftersend\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 22\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }\n      }, \"Password successfully changed!\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sbtn_pan\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        className: \"sbtn\",\n        to: \"/login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 28\n        }\n      }, \"Back to Login\")))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"log_right forgot-r\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: \"/assets/unlock.svg\",\n        alt: \"login_img\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 16\n        }\n      })));\n    }\n  }]);\n\n  return RsetpasswordForm;\n}(Component);\n\nRsetpasswordForm.propTypes = {\n  isProcessing: PT.bool,\n  isError: PT.bool,\n  isSuccess: PT.bool,\n  forgotPasswordData: PT.object,\n  forgotPassword: PT.func\n};\nRsetpasswordForm.defaultProps = {\n  isFetching: false,\n  isProcessing: false,\n  isError: false,\n  isSuccess: false,\n  states: [],\n  forgotPassword: function forgotPassword() {}\n};\nexport default withRouter(RsetpasswordForm);","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/ResetPassword/resetPassword.js"],"names":["React","Component","PropTypes","PT","withRouter","Link","RsetpasswordForm","props","handleSubmit","e","preventDefault","password","value","confirmpassword","type","passwordnotmatch","key","state","data","validate","errors","Confirmpass","resetPassword","formData","defaultError","isError","console","log","setState","msg","match","bind","window","location","href","split","slice","isSuccess","input","isProcessing","errMassage","propTypes","bool","forgotPasswordData","object","forgotPassword","func","defaultProps","isFetching","states"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {PropTypes as PT} from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\nclass RsetpasswordForm extends Component{\n   static propTypes = {\n\t\tisProcessing         :  PT.bool,\n\t\tisError              :  PT.bool,\n\t\tisSuccess            :  PT.bool,\n\t\tforgotPasswordData   :  PT.object,\n\t\tforgotPassword       :  PT.func\n\t}\n\n\tstatic defaultProps = {\n\t\tisFetching           :  false,\n\t\tisProcessing         :  false,\n\t\tisError              :  false,\n\t\tisSuccess            :  false,\n\t\tstates               :  [],\n\t\tforgotPassword       :  () => {}\n\t}\n\n   constructor(props){\n      super(props);\n      this.state          =   {\n         msg             :   '',\n         key             :\"\",\n         match           : false,\n         defaultError:{\n            password\t:\tfalse,\n            Confirmpass\t:\tfalse\n         }\n      }\n      this.handleSubmit          =  this.handleSubmit.bind(this);\n   }\n\n   componentDidMount() {\n      console.log(this.props);\n     this.setState({\n      key: window.location.href.split('/').slice(-2)[1]\n     });\n     \n   }\n    \n   handleSubmit = (e) => {\n      e.preventDefault();\n     \n      if(this.password.value != this.confirmpassword.value && e.type==\"submit\" ) {\n       \n            this.props.passwordnotmatch();\n            return;\n            \n      }\n      const password         =   this.password.value;\n      const confirmpassword         =   this.confirmpassword.value;\n      const  key             =     this.state.key;\n      const data          =   {\n                                password,\n                                key\n                              }\n          if(!this.validate({password,confirmpassword}).errors.password && !this.validate({password,confirmpassword}).errors.Confirmpass && e.type==\"submit\"  )\n      this.props.resetPassword(data);\n   }\n\n   validate = (data) => {\n\t\tlet formData\t=\tdata || {};\n\t\tlet errors\t\t=\t{...this.state.defaultError};\n\t\tlet isError\t\t=\tfalse;\n\t\tif(!!!formData.password) {\n\t\t\terrors.password\t\t=\ttrue;\n\t\t\tisError\t\t\t\t=\ttrue;\n      } \n    \n      else {\n         errors.password\t\t=\tfalse;\n\t\t\tisError\t\t\t\t=\tfalse;\n      }\n\n\t\tif(!!!formData.confirmpassword) {\n\t\t\terrors.Confirmpass=\ttrue;\n\t\t\tisError\t\t\t\t=\ttrue;\n      }\n     \n      else {\n         errors.Confirmpass=\tfalse;\n\t\t\tisError\t\t\t\t=\tfalse;\n      }\n\n      console.log(\"errors\",errors);\n      this.setState({\n         defaultError: errors\n      });\n\t\treturn {isError: isError, errors: errors};\n   }\n\n   componentWillReceiveProps (props) {\n      console.log(\"recive\",props);\n   }\n\n   render(){\n      let errors\t\t=\t{...this.state.defaultError};\n      return (\n         <div className=\"login_p\">\n            <div className=\"log_left forgot-l\">               \n               {\n                     (!!!this.props.isSuccess) ?  \n                     <div>\n                        <h4>Reset Password</h4>\n                        <p>Set your new password for your account</p>\n                        <form onSubmit={this.handleSubmit}>\n                           <div className=\"input-group\">\n                              <input className={`t-pass ltbox ${(!!errors.password) ? ' error' : ''}`}type=\"password\" ref={(input) => this.password = input} onChange={(e)=>this.handleSubmit(e)} placeholder=\"New password\" /*defaultValue=\"admin\"*/ />\n                           </div>\n                           <div className=\"input-group\">\n                              <input className={`t-pass ltbox ${(!!errors.Confirmpass) ? ' error' : ''}`} type=\"password\" ref={(input) => this.confirmpassword = input} onChange={(e)=>this.handleSubmit(e)} placeholder=\"Confirm password\" /*defaultValue=\"admin\"*/ />\n                           </div>\n                           <div className=\"sbtn_pan\">\n                              <button className=\"sbtn\" disabled={!!this.props.isProcessing}>{(!!this.props.isProcessing) ? 'Processing....' : 'Reset My Password'}</button>\n                           </div>\n                           {this.props.isError ?  <div className=\"aleart_pan\">\n                                \n                                <div className=\"alert_box\">\n                              {this.props.errMassage}\n                                </div>\n                                {/* <div className={`alert_box${(this.props.loginData.message === \"We can't find an account with that email.\") ? '' : ' hide'}`}>\n                                Sorry, that email isn’t right. We can help you <Link to='/forgot-password'>recover your email address.</Link>\n                                </div> */}\n  \n                                </div> :\"\" }\n                             \n                             \n                        </form>\n                     </div> : \n                     <div className=\"aftersend\">\n                        <h4>Password successfully changed!</h4>\n                        <div className=\"sbtn_pan\">\n                           <Link className=\"sbtn\" to='/login'>Back to Login</Link>\n                        </div>\n                     </div>\n               }\n            </div>\n            <div className=\"log_right forgot-r\">\n               <img src=\"/assets/unlock.svg\" alt=\"login_img\" />\n            </div>\n         </div>               \n      )\n   }\n}\nexport default withRouter(RsetpasswordForm);"]},"metadata":{},"sourceType":"module"}