{"ast":null,"code":"import _regeneratorRuntime from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(reset_password),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchRsetPasswordStore);import{takeEvery,put,call,takeLatest}from'redux-saga/effects';import*as resetpasswordConstant from'../constants';import{error as notifyerror,success as notifysuccess}from'../../../util/notify';import*as resetPasswordAction from'../actions';import{callApi}from'../../../Helper/api';//Do Login\nexport function reset_password(action){var url,payload,result;return _regeneratorRuntime.wrap(function reset_password$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;url='';url=\"auth/reset-password\";_context.next=5;return call(callApi,'POST',url,action.data);case 5:payload=_context.sent;if(!payload.data.error){_context.next=9;break;}_context.next=9;return put(resetPasswordAction.listenresetPasswordError(payload.data.error));case 9:if(!payload.data.result){_context.next=13;break;}result=payload.data.result;//notifysuccess({message: 'Login Successful'});\n_context.next=13;return put(resetPasswordAction.listenresetPasswordSuccess(result));case 13:_context.next=19;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](0);notifyerror(_context.t0);console.log(_context.t0.message);case 19:case\"end\":return _context.stop();}}},_marked,null,[[0,15]]);}export function watchRsetPasswordStore(){return _regeneratorRuntime.wrap(function watchRsetPasswordStore$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return takeLatest(resetpasswordConstant.RESET_PASSWORD,reset_password);case 3:_context2.next=8;break;case 5:_context2.prev=5;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 8:case\"end\":return _context2.stop();}}},_marked2,null,[[0,5]]);}","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/ResetPassword/Saga/index.js"],"names":["reset_password","watchRsetPasswordStore","takeEvery","put","call","takeLatest","resetpasswordConstant","error","notifyerror","success","notifysuccess","resetPasswordAction","callApi","action","url","data","payload","listenresetPasswordError","result","listenresetPasswordSuccess","console","log","message","RESET_PASSWORD"],"mappings":"6LAOiBA,c,iDAsBAC,sB,EA7BjB,OAASC,SAAT,CAAoBC,GAApB,CAAyBC,IAAzB,CAA+BC,UAA/B,KAAiD,oBAAjD,CACA,MAAO,GAAKC,CAAAA,qBAAZ,KAAuC,cAAvC,CACA,OAAQC,KAAK,GAAIC,CAAAA,WAAjB,CAA8BC,OAAO,GAAIC,CAAAA,aAAzC,KAA6D,sBAA7D,CACA,MAAO,GAAKC,CAAAA,mBAAZ,KAAqC,YAArC,CACA,OAAQC,OAAR,KAAsB,qBAAtB,CAEA;AACA,MAAO,SAAUZ,CAAAA,cAAV,CAAyBa,MAAzB,gKAEKC,GAFL,CAEwB,EAFxB,CAGCA,GAAG,sBAAH,CAHD,gBAIiB,MAAMV,CAAAA,IAAI,CAACQ,OAAD,CAAU,MAAV,CAAkBE,GAAlB,CAAuBD,MAAM,CAACE,IAA9B,CAAV,CAJjB,OAIOC,OAJP,mBAMIA,OAAO,CAACD,IAAR,CAAaR,KANjB,yCAOK,MAAMJ,CAAAA,GAAG,CAACQ,mBAAmB,CAACM,wBAApB,CAA6CD,OAAO,CAACD,IAAR,CAAaR,KAA1D,CAAD,CAAT,CAPL,WAWIS,OAAO,CAACD,IAAR,CAAaG,MAXjB,0BAYSA,MAZT,CAYkBF,OAAO,CAACD,IAAR,CAAaG,MAZ/B,CAaK;AAbL,iBAcK,MAAMf,CAAAA,GAAG,CAACQ,mBAAmB,CAACQ,0BAApB,CAA+CD,MAA/C,CAAD,CAAT,CAdL,yFAiBCV,WAAW,aAAX,CACAY,OAAO,CAACC,GAAR,CAAY,YAAEC,OAAd,EAlBD,qEAsBP,MAAO,SAAUrB,CAAAA,sBAAV,uKAEC,MAAMI,CAAAA,UAAU,CAAEC,qBAAqB,CAACiB,cAAxB,CAAwCvB,cAAxC,CAAhB,CAFD,yFAICoB,OAAO,CAACC,GAAR,eAJD","sourcesContent":["import { takeEvery, put, call, takeLatest } from 'redux-saga/effects';\nimport * as resetpasswordConstant from '../constants';\nimport {error as notifyerror, success as notifysuccess} from '../../../util/notify';\nimport * as resetPasswordAction from '../actions';\nimport {callApi} from '../../../Helper/api';\n\n//Do Login\nexport function* reset_password(action){\n    try {\n        let url             =  '';\n        url                 =  `auth/reset-password`;\n        const payload = yield call(callApi, 'POST', url, action.data);\n        // check for error\n        if(payload.data.error){\n            yield put(resetPasswordAction.listenresetPasswordError(payload.data.error));\n        }\n\n        // handle success result\n        if(payload.data.result){\n            let result = payload.data.result;\n            //notifysuccess({message: 'Login Successful'});\n            yield put(resetPasswordAction.listenresetPasswordSuccess(result));\n        }\n    } catch (e) {\n        notifyerror(e);\n        console.log(e.message);\n    }\n}\n\nexport function* watchRsetPasswordStore() {\n    try{\n        yield takeLatest( resetpasswordConstant.RESET_PASSWORD, reset_password );\n    } catch(e){\n        console.log(e)\n    }\n}"]},"metadata":{},"sourceType":"module"}