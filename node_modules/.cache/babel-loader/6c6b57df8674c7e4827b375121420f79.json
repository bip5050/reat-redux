{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/biplab/Desktop/foodjets/src/containers/ResetPassword/index.js\";\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { PropTypes as PT } from 'prop-types';\nimport * as actions from './actions';\nimport RsetpasswordForm from './resetPassword';\n\nvar ResetPassword = function ResetPassword(_ref) {\n  var isProcessing = _ref.isProcessing,\n      isError = _ref.isError,\n      isSuccess = _ref.isSuccess,\n      resetPassword = _ref.resetPassword,\n      passwordnotmatch = _ref.passwordnotmatch,\n      resetPasswordData = _ref.resetPasswordData,\n      errMassage = _ref.errMassage;\n  return /*#__PURE__*/React.createElement(RsetpasswordForm, {\n    isProcessing: isProcessing,\n    isError: isError,\n    isSuccess: isSuccess,\n    resetPassword: resetPassword,\n    passwordnotmatch: passwordnotmatch,\n    resetPasswordData: resetPasswordData,\n    errMassage: errMassage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  });\n};\n\nResetPassword.propTypes = {\n  isProcessing: PT.bool,\n  isError: PT.bool,\n  isSuccess: PT.bool,\n  resetPassword: PT.func,\n  passwordnotmatch: PT.func,\n  resetPasswordData: PT.object,\n  errMassage: PT.string\n};\n\nvar mapStateToProps = function mapStateToProps(_ref2) {\n  var resetPasswordReducer = _ref2.resetPasswordReducer;\n  console.log(resetPasswordReducer);\n  return {\n    isProcessing: resetPasswordReducer.isProcessing,\n    isError: resetPasswordReducer.isError,\n    isSuccess: resetPasswordReducer.isSuccess,\n    forgotPasswordData: resetPasswordReducer.resetPasswordData,\n    errMassage: resetPasswordReducer.errMassage\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    resetPassword: function resetPassword(data) {\n      return dispatch(actions.resetPassword(data));\n    },\n    passwordnotmatch: function passwordnotmatch() {\n      return dispatch(actions.passwordnotmatch());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ResetPassword));","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/ResetPassword/index.js"],"names":["React","connect","withRouter","PropTypes","PT","actions","RsetpasswordForm","ResetPassword","isProcessing","isError","isSuccess","resetPassword","passwordnotmatch","resetPasswordData","errMassage","propTypes","bool","func","object","string","mapStateToProps","resetPasswordReducer","console","log","forgotPasswordData","mapDispatchToProps","dispatch","data"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAAQC,SAAS,IAAIC,EAArB,QAA8B,YAA9B;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,OAAOC,gBAAP,MAA6B,iBAA7B;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAQd;AAAA,MAPcC,YAOd,QAPcA,YAOd;AAAA,MANcC,OAMd,QANcA,OAMd;AAAA,MALcC,SAKd,QALcA,SAKd;AAAA,MAJcC,aAId,QAJcA,aAId;AAAA,MAHcC,gBAGd,QAHcA,gBAGd;AAAA,MAFcC,iBAEd,QAFcA,iBAEd;AAAA,MADcC,UACd,QADcA,UACd;AACJ,sBACE,oBAAC,gBAAD;AACE,IAAA,YAAY,EAAEN,YADhB;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,SAAS,EAAEC,SAHb;AAIE,IAAA,aAAa,EAAEC,aAJjB;AAKE,IAAA,gBAAgB,EAAIC,gBALtB;AAME,IAAA,iBAAiB,EAAEC,iBANrB;AAOE,IAAA,UAAU,EAAIC,UAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWF,CApBF;;AAsBCP,aAAa,CAACQ,SAAd,GAA4B;AAC3BP,EAAAA,YAAY,EAAEJ,EAAE,CAACY,IADU;AAE3BP,EAAAA,OAAO,EAAEL,EAAE,CAACY,IAFe;AAG3BN,EAAAA,SAAS,EAAEN,EAAE,CAACY,IAHa;AAI3BL,EAAAA,aAAa,EAACP,EAAE,CAACa,IAJU;AAK3BL,EAAAA,gBAAgB,EAACR,EAAE,CAACa,IALO;AAM3BJ,EAAAA,iBAAiB,EAACT,EAAE,CAACc,MANM;AAO3BJ,EAAAA,UAAU,EAAEV,EAAE,CAACe;AAPY,CAA5B;;AAUA,IAAOC,eAAe,GAAK,SAApBA,eAAoB,QAA4B;AAAA,MAA1BC,oBAA0B,SAA1BA,oBAA0B;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,oBAAZ;AACA,SAAQ;AACLb,IAAAA,YAAY,EAAEa,oBAAoB,CAACb,YAD9B;AAELC,IAAAA,OAAO,EAAEY,oBAAoB,CAACZ,OAFzB;AAGLC,IAAAA,SAAS,EAAEW,oBAAoB,CAACX,SAH3B;AAILc,IAAAA,kBAAkB,EAAEH,oBAAoB,CAACR,iBAJpC;AAKLC,IAAAA,UAAU,EAAEO,oBAAoB,CAACP;AAL5B,GAAR;AAOA,CATF;;AAYD,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACtCf,IAAAA,aAAa,EAAE,uBAACgB,IAAD;AAAA,aAAUD,QAAQ,CAACrB,OAAO,CAACM,aAAR,CAAsBgB,IAAtB,CAAD,CAAlB;AAAA,KADuB;AAEtCf,IAAAA,gBAAgB,EAAE;AAAA,aAAOc,QAAQ,CAACrB,OAAO,CAACO,gBAAR,EAAD,CAAf;AAAA;AAFoB,GAAL;AAAA,CAAnC;;AAIA,eAAeX,OAAO,CAACmB,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CvB,UAAU,CAACK,aAAD,CAAvD,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {PropTypes as PT} from 'prop-types';\nimport * as actions from './actions';\nimport RsetpasswordForm from './resetPassword';\n\nconst ResetPassword = ({\n                      isProcessing,\n                      isError,\n                      isSuccess,\n                      resetPassword,\n                      passwordnotmatch,\n                      resetPasswordData,\n                      errMassage\n  }) => {\n    return (\n      <RsetpasswordForm\n        isProcessing={isProcessing}\n        isError={isError}\n        isSuccess={isSuccess}\n        resetPassword={resetPassword}\n        passwordnotmatch = {passwordnotmatch}\n        resetPasswordData={resetPasswordData}\n        errMassage = {errMassage}\n      />\n    )\n };\n\n ResetPassword.propTypes   = {\n  isProcessing: PT.bool,\n  isError: PT.bool,\n  isSuccess: PT.bool,\n  resetPassword:PT.func,\n  passwordnotmatch:PT.func,\n  resetPasswordData:PT.object,\n  errMassage: PT.string\n }\n\n const  mapStateToProps   = ({resetPasswordReducer}) => {\n   console.log(resetPasswordReducer);\n   return ({\n      isProcessing: resetPasswordReducer.isProcessing,\n      isError: resetPasswordReducer.isError,\n      isSuccess: resetPasswordReducer.isSuccess,\n      forgotPasswordData: resetPasswordReducer.resetPasswordData,\n      errMassage: resetPasswordReducer.errMassage\n    })\n  }\n\n\nconst mapDispatchToProps = dispatch => ({\n  resetPassword: (data) => dispatch(actions.resetPassword(data)),\n  passwordnotmatch: () =>  dispatch(actions.passwordnotmatch())\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ResetPassword));"]},"metadata":{},"sourceType":"module"}