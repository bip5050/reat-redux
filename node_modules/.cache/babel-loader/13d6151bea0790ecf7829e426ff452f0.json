{"ast":null,"code":"import React from'react';import{connect}from'react-redux';import{withRouter}from'react-router-dom';import*as actions from'./actions';import DashboardComponent from'./dashboard';var Dashboard=function Dashboard(_ref){var userData=_ref.userData,getLocations=_ref.getLocations,locations=_ref.locations,settingsData=_ref.settingsData,userType=_ref.userType,createTask=_ref.createTask,getTaskDetails=_ref.getTaskDetails,taskDetails=_ref.taskDetails,deleteTask=_ref.deleteTask,editTask=_ref.editTask,updateTaskStatus=_ref.updateTaskStatus,getTrackDetails=_ref.getTrackDetails,search=_ref.search,resetSearch=_ref.resetSearch,filteredList=_ref.filteredList,isTaskProcessing=_ref.isTaskProcessing,updateFilter=_ref.updateFilter,filterData=_ref.filterData,isFilterLoaded=_ref.isFilterLoaded,getShoppedLate=_ref.getShoppedLate,shoppedLate=_ref.shoppedLate;return/*#__PURE__*/React.createElement(DashboardComponent,{userData:userData,getLocations:getLocations,locations:locations,settingsData:settingsData,userType:userType,createTask:createTask,getTaskDetails:getTaskDetails,taskDetails:taskDetails,deleteTask:deleteTask,editTask:editTask,updateTaskStatus:updateTaskStatus,getTrackDetails:getTrackDetails,search:search,resetSearch:resetSearch,filteredList:filteredList,isTaskProcessing:isTaskProcessing,updateFilter:updateFilter,filterData:filterData,isFilterLoaded:isFilterLoaded,getShoppedLate:getShoppedLate,shoppedLate:shoppedLate});};var mapStateToProps=function mapStateToProps(_ref2,ownProps){var dashboardReducer=_ref2.dashboardReducer,headerReducer=_ref2.headerReducer;//console.log('Header Reducer : ', headerReducer.filterData);\nreturn{userData:ownProps.userData,isTaskProcessing:dashboardReducer.isTaskProcessing,locations:dashboardReducer.locations,userType:headerReducer.userType,settingsData:headerReducer.settingsData,taskDetails:dashboardReducer.taskDetails,filteredList:dashboardReducer.filteredList,filterData:headerReducer.filterData,isFilterLoaded:headerReducer.isFilterLoaded,shoppedLate:dashboardReducer.shoppedLate};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{updateFilter:function updateFilter(data){return dispatch(actions.updateFilter(data));},updateTaskStatus:function updateTaskStatus(data){return dispatch(actions.updateTaskStatus(data));},deleteTask:function deleteTask(data){return dispatch(actions.deleteTask(data));},getLocations:function getLocations(data){return dispatch(actions.getLocations(data));},createTask:function createTask(data){return dispatch(actions.createTask(data));},editTask:function editTask(data){return dispatch(actions.editTask(data));},getTaskDetails:function getTaskDetails(data){return dispatch(actions.getTaskDetails(data));},getTrackDetails:function getTrackDetails(data){return dispatch(actions.getTrackDetails(data));},search:function search(data){return dispatch(actions.search(data));},resetSearch:function resetSearch(data){return dispatch(actions.resetSearch(data));},getShoppedLate:function getShoppedLate(data){return dispatch(actions.getShoppedLate(data));}};};export default connect(mapStateToProps,mapDispatchToProps)(withRouter(Dashboard));","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/Dashboard/index.js"],"names":["React","connect","withRouter","actions","DashboardComponent","Dashboard","userData","getLocations","locations","settingsData","userType","createTask","getTaskDetails","taskDetails","deleteTask","editTask","updateTaskStatus","getTrackDetails","search","resetSearch","filteredList","isTaskProcessing","updateFilter","filterData","isFilterLoaded","getShoppedLate","shoppedLate","mapStateToProps","ownProps","dashboardReducer","headerReducer","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {PropTypes as PT} from 'prop-types';\nimport * as actions from './actions';\nimport DashboardComponent from './dashboard';\n\nconst Dashboard   = ({\n                        userData,\n                        getLocations,\n                        locations,\n                        settingsData,\n                        userType,\n                        createTask,\n                        getTaskDetails,\n                        taskDetails,\n                        deleteTask,\n                        editTask,\n                        updateTaskStatus,\n                        getTrackDetails,\n                        search,\n                        resetSearch,\n                        filteredList,\n                        isTaskProcessing,\n                        updateFilter,\n                        filterData,\n                        isFilterLoaded,\n                        getShoppedLate,\n                        shoppedLate\n    }) => {\n    return (\n      <DashboardComponent\n        userData={userData}\n        getLocations={getLocations}\n        locations={locations}\n        settingsData={settingsData}\n        userType={userType}\n        createTask={createTask}\n        getTaskDetails={getTaskDetails}\n        taskDetails={taskDetails}\n        deleteTask={deleteTask}\n        editTask={editTask}\n        updateTaskStatus={updateTaskStatus}\n        getTrackDetails={getTrackDetails}\n        search={search}\n        resetSearch={resetSearch}\n        filteredList={filteredList}\n        isTaskProcessing={isTaskProcessing}\n        updateFilter={updateFilter}\n        filterData={filterData}\n        isFilterLoaded={isFilterLoaded}\n        getShoppedLate={getShoppedLate}\n        shoppedLate={shoppedLate}\n      />\n    )\n };\n\n Dashboard.propTypes   = {\n  userData: PT.object,\n  getLocations: PT.func,\n  createTask: PT.func,\n  getTaskDetails: PT.func,\n  getTrackDetails: PT.func,\n  deleteTask: PT.func,\n  editTask: PT.func,\n  updateTaskStatus: PT.func,\n  search: PT.func,\n  resetSearch: PT.func,\n  locations: PT.object,\n  taskDetails: PT.object,\n  settingsData: PT.object,\n  userType: PT.string,\n  isTaskProcessing: PT.bool,\n  updateFilter: PT.func,\n\tfilterData: PT.object,\n\tisFilterLoaded: PT.bool,\n  getShoppedLate: PT.func,\n\tshoppedLate: PT.object,\n }\n\n const  mapStateToProps   = ({dashboardReducer, headerReducer}, ownProps) => {\n    //console.log('Header Reducer : ', headerReducer.filterData);\n    return ({\n            userData: ownProps.userData,\n            isTaskProcessing: dashboardReducer.isTaskProcessing,\n            locations: dashboardReducer.locations,\n            userType: headerReducer.userType,\n            settingsData: headerReducer.settingsData,\n            taskDetails: dashboardReducer.taskDetails,\n            filteredList: dashboardReducer.filteredList,\n            filterData: headerReducer.filterData,\n            isFilterLoaded: headerReducer.isFilterLoaded,\n            shoppedLate: dashboardReducer.shoppedLate\n        })\n    }\n\n\nconst mapDispatchToProps = dispatch => ({\n  updateFilter: (data) => dispatch(actions.updateFilter(data)),\n  updateTaskStatus: (data) => dispatch(actions.updateTaskStatus(data)),\n  deleteTask: (data) => dispatch(actions.deleteTask(data)),\n  getLocations: (data) => dispatch(actions.getLocations(data)),\n  createTask: (data) => dispatch(actions.createTask(data)),\n  editTask: (data) => dispatch(actions.editTask(data)),\n  getTaskDetails: (data) => dispatch(actions.getTaskDetails(data)),\n  getTrackDetails: (data) => dispatch(actions.getTrackDetails(data)),\n  search: (data) => dispatch(actions.search(data)),\n  resetSearch: (data) => dispatch(actions.resetSearch(data)),\n  getShoppedLate: (data) => dispatch(actions.getShoppedLate(data))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Dashboard));"]},"metadata":{},"sourceType":"module"}