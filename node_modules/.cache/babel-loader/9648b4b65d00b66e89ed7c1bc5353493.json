{"ast":null,"code":"import React from'react';import{connect}from'react-redux';import{withRouter}from'react-router-dom';import*as actions from'./actions';import RsetpasswordForm from'./resetPassword';var ResetPassword=function ResetPassword(_ref){var isProcessing=_ref.isProcessing,isError=_ref.isError,isSuccess=_ref.isSuccess,resetPassword=_ref.resetPassword,passwordnotmatch=_ref.passwordnotmatch,resetPasswordData=_ref.resetPasswordData,errMassage=_ref.errMassage;return/*#__PURE__*/React.createElement(RsetpasswordForm,{isProcessing:isProcessing,isError:isError,isSuccess:isSuccess,resetPassword:resetPassword,passwordnotmatch:passwordnotmatch,resetPasswordData:resetPasswordData,errMassage:errMassage});};var mapStateToProps=function mapStateToProps(_ref2){var resetPasswordReducer=_ref2.resetPasswordReducer;console.log(resetPasswordReducer);return{isProcessing:resetPasswordReducer.isProcessing,isError:resetPasswordReducer.isError,isSuccess:resetPasswordReducer.isSuccess,forgotPasswordData:resetPasswordReducer.resetPasswordData,errMassage:resetPasswordReducer.errMassage};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{resetPassword:function resetPassword(data){return dispatch(actions.resetPassword(data));},passwordnotmatch:function passwordnotmatch(){return dispatch(actions.passwordnotmatch());}};};export default connect(mapStateToProps,mapDispatchToProps)(withRouter(ResetPassword));","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/ResetPassword/index.js"],"names":["React","connect","withRouter","actions","RsetpasswordForm","ResetPassword","isProcessing","isError","isSuccess","resetPassword","passwordnotmatch","resetPasswordData","errMassage","mapStateToProps","resetPasswordReducer","console","log","forgotPasswordData","mapDispatchToProps","dispatch","data"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,UAAT,KAA2B,kBAA3B,CAEA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,WAAzB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,iBAA7B,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAQd,IAPcC,CAAAA,YAOd,MAPcA,YAOd,CANcC,OAMd,MANcA,OAMd,CALcC,SAKd,MALcA,SAKd,CAJcC,aAId,MAJcA,aAId,CAHcC,gBAGd,MAHcA,gBAGd,CAFcC,iBAEd,MAFcA,iBAEd,CADcC,UACd,MADcA,UACd,CACJ,mBACE,oBAAC,gBAAD,EACE,YAAY,CAAEN,YADhB,CAEE,OAAO,CAAEC,OAFX,CAGE,SAAS,CAAEC,SAHb,CAIE,aAAa,CAAEC,aAJjB,CAKE,gBAAgB,CAAIC,gBALtB,CAME,iBAAiB,CAAEC,iBANrB,CAOE,UAAU,CAAIC,UAPhB,EADF,CAWF,CApBF,CAgCC,GAAOC,CAAAA,eAAe,CAAK,QAApBA,CAAAA,eAAoB,OAA4B,IAA1BC,CAAAA,oBAA0B,OAA1BA,oBAA0B,CACrDC,OAAO,CAACC,GAAR,CAAYF,oBAAZ,EACA,MAAQ,CACLR,YAAY,CAAEQ,oBAAoB,CAACR,YAD9B,CAELC,OAAO,CAAEO,oBAAoB,CAACP,OAFzB,CAGLC,SAAS,CAAEM,oBAAoB,CAACN,SAH3B,CAILS,kBAAkB,CAAEH,oBAAoB,CAACH,iBAJpC,CAKLC,UAAU,CAAEE,oBAAoB,CAACF,UAL5B,CAAR,CAOA,CATF,CAYD,GAAMM,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,QAAK,CACtCV,aAAa,CAAE,uBAACW,IAAD,QAAUD,CAAAA,QAAQ,CAAChB,OAAO,CAACM,aAAR,CAAsBW,IAAtB,CAAD,CAAlB,EADuB,CAEtCV,gBAAgB,CAAE,kCAAOS,CAAAA,QAAQ,CAAChB,OAAO,CAACO,gBAAR,EAAD,CAAf,EAFoB,CAAL,EAAnC,CAIA,cAAeT,CAAAA,OAAO,CAACY,eAAD,CAAkBK,kBAAlB,CAAP,CAA6ChB,UAAU,CAACG,aAAD,CAAvD,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {PropTypes as PT} from 'prop-types';\nimport * as actions from './actions';\nimport RsetpasswordForm from './resetPassword';\n\nconst ResetPassword = ({\n                      isProcessing,\n                      isError,\n                      isSuccess,\n                      resetPassword,\n                      passwordnotmatch,\n                      resetPasswordData,\n                      errMassage\n  }) => {\n    return (\n      <RsetpasswordForm\n        isProcessing={isProcessing}\n        isError={isError}\n        isSuccess={isSuccess}\n        resetPassword={resetPassword}\n        passwordnotmatch = {passwordnotmatch}\n        resetPasswordData={resetPasswordData}\n        errMassage = {errMassage}\n      />\n    )\n };\n\n ResetPassword.propTypes   = {\n  isProcessing: PT.bool,\n  isError: PT.bool,\n  isSuccess: PT.bool,\n  resetPassword:PT.func,\n  passwordnotmatch:PT.func,\n  resetPasswordData:PT.object,\n  errMassage: PT.string\n }\n\n const  mapStateToProps   = ({resetPasswordReducer}) => {\n   console.log(resetPasswordReducer);\n   return ({\n      isProcessing: resetPasswordReducer.isProcessing,\n      isError: resetPasswordReducer.isError,\n      isSuccess: resetPasswordReducer.isSuccess,\n      forgotPasswordData: resetPasswordReducer.resetPasswordData,\n      errMassage: resetPasswordReducer.errMassage\n    })\n  }\n\n\nconst mapDispatchToProps = dispatch => ({\n  resetPassword: (data) => dispatch(actions.resetPassword(data)),\n  passwordnotmatch: () =>  dispatch(actions.passwordnotmatch())\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ResetPassword));"]},"metadata":{},"sourceType":"module"}