{"ast":null,"code":"import _objectSpread from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getLocations),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getTaskDetails),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(getTrackDetails),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(createTask),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(deleteTask),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(updateTaskStatus),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(editTask),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(search),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(updateFilter),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(getShoppedLate),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchDashboardStore);\n\nimport { takeEvery, put, call, all } from 'redux-saga/effects';\nimport * as dashboardConstant from '../constants';\nimport { error as notifyerror, success as notifysuccess } from '../../../util/notify';\nimport * as dashboardAction from '../actions';\nimport * as headerAction from '../../Header/actions';\nimport { callApi, callApiV2, callOnFleetApi } from '../../../Helper/api';\nimport moment from 'moment-timezone';\nimport * as _ from 'lodash';\nimport { isEmpty, compact } from 'lodash';\nimport { getDateTime, getSysDateTime, getFilter } from '../../../Helper/common'; //Get Locations & Zones\n\nexport function getLocations(action) {\n  var url, statesLocalStorage, states, res, payload, zone, zoneList, taskType, pharmacy, locations, stores, result, user;\n  return _regeneratorRuntime.wrap(function getLocations$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          url = '';\n          statesLocalStorage = JSON.parse(localStorage.getItem('states') || '[]');\n          states = statesLocalStorage.map(function (item) {\n            return item.id;\n          });\n          url = \"location/all\";\n          _context.next = 7;\n          return all([call(callApi, 'GET', url), call(callApiV2, 'POST', 'location/zones', {\n            \"state\": states\n          })]);\n\n        case 7:\n          res = _context.sent;\n\n          if (!res) {\n            _context.next = 29;\n            break;\n          }\n\n          payload = res[0];\n          zone = res[1]; // check for error    \n\n          if (!payload.data.error) {\n            _context.next = 14;\n            break;\n          }\n\n          _context.next = 14;\n          return put(dashboardAction.listenGetLocationsError());\n\n        case 14:\n          if (!payload.data.result) {\n            _context.next = 29;\n            break;\n          }\n\n          zoneList = {};\n          taskType = '';\n          pharmacy = false;\n          locations = [];\n          stores = [];\n          result = payload.data.result;\n          user = payload.data.user;\n\n          if (user.user_type === 'pharmacy') {\n            taskType = \"pharmacy\";\n            pharmacy = true;\n          } else if (user.user_type === 'general') {\n            taskType = \"general\";\n            pharmacy = false;\n          } else {\n            taskType = \"admin\";\n            pharmacy = false;\n          }\n\n          result.map(function (v, k) {\n            locations[k] = {\n              id: v.id,\n              value: k,\n              label: v.address,\n              data: v\n            };\n\n            if (v.store !== '' && v.store !== null) {\n              stores[k] = {\n                id: v.id,\n                zone_id: v.zone_id,\n                value: k,\n                label: v.store,\n                data: v\n              };\n            }\n          });\n          stores = compact(stores);\n          locations = compact(locations);\n\n          if (!!zone.data) {\n            zoneList = zone.data || {};\n          }\n\n          _context.next = 29;\n          return put(dashboardAction.listenGetLocationsSuccess({\n            taskType: taskType,\n            pharmacy: pharmacy,\n            locations: locations,\n            stores: stores,\n            zones: zoneList\n          }));\n\n        case 29:\n          _context.next = 35;\n          break;\n\n        case 31:\n          _context.prev = 31;\n          _context.t0 = _context[\"catch\"](0);\n          notifyerror(_context.t0);\n          console.log(_context.t0.message);\n\n        case 35:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 31]]);\n} //Get Locations & Zones\n\nexport function getTaskDetails(action) {\n  var url, payload;\n  return _regeneratorRuntime.wrap(function getTaskDetails$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          url = '';\n          url = \"tasks/\".concat(action.data.uuid);\n          _context2.next = 5;\n          return call(callApiV2, 'GET', url);\n\n        case 5:\n          payload = _context2.sent;\n\n          if (!payload.data.error) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.next = 9;\n          return put(dashboardAction.listenGetTaskDetailsError());\n\n        case 9:\n          if (!payload.data) {\n            _context2.next = 12;\n            break;\n          }\n\n          _context2.next = 12;\n          return put(dashboardAction.listenGetTaskDetailsSuccess(payload.data));\n\n        case 12:\n          _context2.next = 18;\n          break;\n\n        case 14:\n          _context2.prev = 14;\n          _context2.t0 = _context2[\"catch\"](0);\n          notifyerror(_context2.t0.message);\n          console.log(_context2.t0.message);\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 14]]);\n} //Get Track Details\n\nexport function getTrackDetails(action) {\n  var url, payload;\n  return _regeneratorRuntime.wrap(function getTrackDetails$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          url = '';\n          url = \"tasks/\".concat(action.data.uuid);\n          _context3.next = 5;\n          return call(callOnFleetApi, 'GET', url);\n\n        case 5:\n          payload = _context3.sent;\n\n          // check for error    \n          if (payload.data.error) {//yield put(dashboardAction.listenGetTaskDetailsError());\n          } // handle success result\n\n\n          if (payload.data) {//yield put(dashboardAction.listenGetTaskDetailsSuccess(payload.data));\n          }\n\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          notifyerror(_context3.t0.message);\n          console.log(_context3.t0.message);\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n} //Create Task\n\nexport function createTask(action) {\n  var url, payload;\n  return _regeneratorRuntime.wrap(function createTask$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          url = '';\n          url = \"tasks\";\n          _context4.next = 5;\n          return call(callApi, 'POST', url, action.data);\n\n        case 5:\n          payload = _context4.sent;\n\n          if (!payload.data.error) {\n            _context4.next = 10;\n            break;\n          }\n\n          console.log(payload.data.error);\n          _context4.next = 10;\n          return put(dashboardAction.listenCreateTaskError());\n\n        case 10:\n          if (!payload.data) {\n            _context4.next = 14;\n            break;\n          }\n\n          notifysuccess({\n            message: 'Task has been created successfully'\n          });\n          _context4.next = 14;\n          return put(dashboardAction.listenCreateTaskSuccess({}));\n\n        case 14:\n          _context4.next = 20;\n          break;\n\n        case 16:\n          _context4.prev = 16;\n          _context4.t0 = _context4[\"catch\"](0);\n          notifyerror(_context4.t0.message);\n          console.log(_context4.t0.message);\n\n        case 20:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 16]]);\n} //Delete Task\n\nexport function deleteTask(action) {\n  var url, data, payload;\n  return _regeneratorRuntime.wrap(function deleteTask$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          url = '';\n          url = \"tasks/\".concat(action.data.uuid);\n          data = {\n            \"timestamp\": moment().format('X')\n          };\n          _context5.next = 6;\n          return call(callApi, 'DELETE', url, data);\n\n        case 6:\n          payload = _context5.sent;\n\n          if (!payload.data.error) {\n            _context5.next = 10;\n            break;\n          }\n\n          _context5.next = 10;\n          return put(dashboardAction.listenDeleteTaskError());\n\n        case 10:\n          if (!payload.data) {\n            _context5.next = 14;\n            break;\n          }\n\n          notifysuccess({\n            message: 'Task deleted successfully'\n          });\n          _context5.next = 14;\n          return put(dashboardAction.listenDeleteTaskSuccess({}));\n\n        case 14:\n          _context5.next = 20;\n          break;\n\n        case 16:\n          _context5.prev = 16;\n          _context5.t0 = _context5[\"catch\"](0);\n          notifyerror(_context5.t0.message);\n          console.log(_context5.t0.message);\n\n        case 20:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 16]]);\n} //Update Task Status\n\nexport function updateTaskStatus(action) {\n  var url, data, payload;\n  return _regeneratorRuntime.wrap(function updateTaskStatus$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          url = '';\n          url = \"tasks/status/\".concat(action.data.uuid);\n          data = {\n            orderStatus: {\n              status: action.data.status\n            }\n          };\n          _context6.next = 6;\n          return call(callApi, 'PUT', url, data);\n\n        case 6:\n          payload = _context6.sent;\n\n          if (!payload.data.error) {\n            _context6.next = 10;\n            break;\n          }\n\n          _context6.next = 10;\n          return put(dashboardAction.listenUpdateTaskStatusError());\n\n        case 10:\n          if (!payload.data) {\n            _context6.next = 14;\n            break;\n          }\n\n          notifysuccess({\n            message: 'Task status updated successfully'\n          });\n          _context6.next = 14;\n          return put(dashboardAction.listenUpdateTaskStatusSuccess({}));\n\n        case 14:\n          _context6.next = 20;\n          break;\n\n        case 16:\n          _context6.prev = 16;\n          _context6.t0 = _context6[\"catch\"](0);\n          notifyerror(_context6.t0.message);\n          console.log(_context6.t0.message);\n\n        case 20:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 16]]);\n} //Edit Task\n\nexport function editTask(action) {\n  var url, data, payload;\n  return _regeneratorRuntime.wrap(function editTask$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          url = '';\n          url = \"tasks/\".concat(action.data.uuid);\n          data = _objectSpread({}, action.data.params);\n          _context7.next = 6;\n          return call(callApi, 'PUT', url, data);\n\n        case 6:\n          payload = _context7.sent;\n\n          if (!payload.data.error) {\n            _context7.next = 10;\n            break;\n          }\n\n          _context7.next = 10;\n          return put(dashboardAction.listenEditTaskError());\n\n        case 10:\n          if (!payload.data) {\n            _context7.next = 14;\n            break;\n          }\n\n          //console.log('Success : ', payload.data);\n          notifysuccess({\n            message: 'Task updated successfully'\n          });\n          _context7.next = 14;\n          return put(dashboardAction.listenEditTaskSuccess({}));\n\n        case 14:\n          _context7.next = 20;\n          break;\n\n        case 16:\n          _context7.prev = 16;\n          _context7.t0 = _context7[\"catch\"](0);\n\n          //console.log('Catch : ', e, e.response, e.response.data, e.message.cause);\n          if (_context7.t0.response && !!_context7.t0.response.data) {\n            notifyerror({\n              message: _context7.t0.response.data.message.cause\n            });\n          } else {\n            notifyerror({\n              message: _context7.t0.message\n            });\n          }\n\n          console.log(_context7.t0.message);\n\n        case 20:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 16]]);\n} //Get Search\n\nexport function search(action) {\n  var url, data, payload, result, tasks, temp;\n  return _regeneratorRuntime.wrap(function search$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          url = '';\n          url = \"tasks/search\";\n          data = {\n            userType: action.data.user_type,\n            valueOne: action.data.type,\n            valueTwo: action.data.value\n          };\n\n          if (!!action.data.dateType) {\n            data.dateType = action.data.dateType;\n          }\n\n          _context8.next = 7;\n          return call(callApiV2, 'POST', url, data);\n\n        case 7:\n          payload = _context8.sent;\n\n          if (!payload.data.error) {\n            _context8.next = 11;\n            break;\n          }\n\n          _context8.next = 11;\n          return put(dashboardAction.listenSearchError());\n\n        case 11:\n          if (!payload.data.result) {\n            _context8.next = 20;\n            break;\n          }\n\n          result = payload.data.result;\n          tasks = {};\n\n          if (result.tasks.length > 0) {\n            result.tasks.map(function (val, key) {\n              var recipient_sig = false;\n              var track_driver = '';\n              var current_url = '';\n              var tskStatus = 'Scheduled';\n\n              if (val.tskStatus === 'tsk_proc_hld') {\n                tskStatus = 'Scheduled';\n              } else if (val.tskStatus === 'tsk_proc_mrchnt') {\n                tskStatus = 'Scheduled';\n              } else if (val.tskStatus === 'tsk_proc_drv' && val.driverStatus === 'drv_strt_recpnt_tsk') {\n                tskStatus = 'Picked Up';\n              } else if (val.tskStatus === 'tsk_proc_drv') {\n                tskStatus = 'Processing';\n              } else if (val.tskStatus === 'tsk_cmp') {\n                tskStatus = 'Completed';\n              } else if (val.tskStatus === 'tsk_cncling') {\n                tskStatus = 'Deleted';\n              } else if (val.tskStatus === 'tsk_cncled') {\n                tskStatus = 'Deleted';\n              }\n\n              var dt = val.timeCreated.split('T');\n              var d = dt[0].split('-');\n              var created_at = d[1] + '/' + d[2] + '/' + d[0];\n              var completeafter = '';\n              var completebefore = '';\n\n              if (val.timezone !== '') {\n                completeafter = getDateTime(parseInt(val.completeAfter) * 1000, val.timezone, 'MM/DD · hh:mma');\n                completebefore = getDateTime(parseInt(val.completeBefore) * 1000, val.timezone, 'hh:mma');\n              } else {\n                completeafter = getSysDateTime(parseInt(val.completeAfter) * 1000, 'MM/DD · hh:mma');\n                completebefore = getSysDateTime(parseInt(val.completeBefore) * 1000, 'hh:mma');\n              }\n\n              if (!isEmpty(val.completionDetails.events) && !!val.completionDetails.events.onflt_recpnt_sig) {\n                recipient_sig = true;\n              }\n\n              if (!isEmpty(val.completionDetails.events) && !!val.completionDetails.events.onflt_recpnt_sig) {\n                recipient_sig = true;\n              }\n\n              if (!!val.pickup_onfleet_url) {\n                track_driver = 'Driver to Merchant';\n                current_url = val.pickup_onfleet_url;\n              }\n\n              if (!!val.drop_onfleet_url) {\n                track_driver = 'Driver to Recipient';\n                current_url = val.drop_onfleet_url;\n              }\n\n              if (!!!tasks[val.state_code]) {\n                tasks[val.state_code] = {};\n                tasks[val.state_code][val.mkt_ofc_cty_del_zne_id] = {\n                  name: val.mkt_ofc_cty_del_zne_name,\n                  id: val.state_code + val.mkt_ofc_cty_del_zne_id,\n                  orders: []\n                };\n              } else {\n                if (!!!tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]) {\n                  tasks[val.state_code][val.mkt_ofc_cty_del_zne_id] = {\n                    name: val.mkt_ofc_cty_del_zne_name,\n                    id: val.state_code + val.mkt_ofc_cty_del_zne_id,\n                    orders: []\n                  };\n                }\n              }\n\n              tasks[val.state_code][val.mkt_ofc_cty_del_zne_id].orders.push({\n                created_at: created_at,\n                complete_after: completeafter,\n                complete_before: completebefore,\n                recpnt_address: val.recipients.address,\n                mrchnt_address: val.merchant.address,\n                mrchnt_notes: val.merchant.notes,\n                recpnt_notes: val.recipients.notes,\n                tsk_status: tskStatus,\n                uuid: val.uuid,\n                order_number: val.orderNumber,\n                driver_name: val.driver_name,\n                recipient_sig: recipient_sig,\n                timezone: val.timezone,\n                mrchnt_location: val.merchant.location,\n                recpnt_location: val.recipients.location,\n                drop_onfleet_url: val.drop_onfleet_url || '',\n                pickup_onfleet_url: val.pickup_onfleet_url || '',\n                track_driver: track_driver,\n                current_url: current_url,\n                tip: val.tip,\n                state_code: val.state_code,\n                mkt_ofc_cty_del_zne_id: val.mkt_ofc_cty_del_zne_id\n              });\n            });\n          }\n\n          temp = {};\n\n          _.each(tasks, function (val, key) {\n            _.each(val, function (vz, kz) {\n              tasks[key][kz].orders = _.sortBy(tasks[key][kz].orders, function (o) {\n                return o.timestamp;\n              });\n            });\n\n            temp[key] = _.sortBy(tasks[key], function (o) {\n              return o.name;\n            });\n          });\n\n          tasks = temp;\n          _context8.next = 20;\n          return put(dashboardAction.listenSearchSuccess({\n            count: result.tasks.length,\n            tasks: tasks\n          }));\n\n        case 20:\n          _context8.next = 26;\n          break;\n\n        case 22:\n          _context8.prev = 22;\n          _context8.t0 = _context8[\"catch\"](0);\n          notifyerror(_context8.t0.message);\n          console.log(_context8.t0.message);\n\n        case 26:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 22]]);\n} //Update filter\n\nexport function updateFilter(action) {\n  var url, data, payload, filterData, filterKeys, _data, states, zones, store;\n\n  return _regeneratorRuntime.wrap(function updateFilter$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          url = '';\n          url = \"tasks/filter\";\n          data = {\n            filter: {\n              key: 'dashboard',\n              value: JSON.stringify(action.data)\n            }\n          };\n          _context9.next = 6;\n          return put(headerAction.syncFilter({\n            key: 'dashboard',\n            value: action.data\n          }));\n\n        case 6:\n          _context9.next = 8;\n          return call(callApiV2, 'POST', url, data);\n\n        case 8:\n          payload = _context9.sent;\n\n          // check for error    \n          if (payload.data.error) {//yield put(dashboardAction.listenSearchError());\n          } // handle success result\n\n\n          if (!payload.data) {\n            _context9.next = 17;\n            break;\n          }\n\n          //console.log('Filtered Saved')\n          filterData = action.data || {};\n          filterKeys = filterData.filterKeys || {};\n          _data = {\n            user_type: filterData.type,\n            type: 'default'\n          };\n\n          if (!isEmpty(filterKeys)) {\n            if (filterKeys.Store.length === 0 && filterKeys.Area.length === 0 && filterKeys.State.length > 0) {\n              states = (filterKeys.State || []).map(function (item) {\n                //return {state: item.value, zone_id: []};\n                return item.value;\n              });\n\n              if (states.length > 0) {\n                _data = {\n                  type: 'state',\n                  state: states\n                }; //value_one         =  'state';\n                //value_two         =  states;\n              }\n            }\n\n            if (filterKeys.Store.length === 0 && filterKeys.Area.length > 0) {\n              zones = [];\n              (filterKeys.Area || []).map(function (item) {\n                var index = zones.findIndex(function (z) {\n                  return z.state === item.state;\n                }); //console.log(filterKeys.Area, index);\n\n                if (index > -1) {\n                  zones[index].zone_id.push(item.id);\n                } else {\n                  zones.push({\n                    state: item.state,\n                    zone_id: [item.id]\n                  });\n                }\n              });\n\n              if (zones.length > 0) {\n                _data = {\n                  type: 'place',\n                  place: zones\n                }; //type         \t\t=  'place';\n                //place         \t=  zones; \n              }\n            }\n\n            if (filterKeys.Store.length > 0) {\n              store = [];\n              (filterKeys.Store || []).forEach(function (item) {\n                store.push(item.store_id.toString());\n              });\n\n              if (store.length > 0) {\n                _data = {\n                  type: 'store',\n                  store_id: store\n                }; //type         \t\t=  'store';\n                //store_id         \t=  store;\n              }\n            }\n\n            _data.user_type = filterData.type;\n\n            if (!!!_data.type) {\n              _data.type = 'default';\n            }\n          }\n\n          _context9.next = 17;\n          return put(dashboardAction.getShoppedLate(_data));\n\n        case 17:\n          _context9.next = 23;\n          break;\n\n        case 19:\n          _context9.prev = 19;\n          _context9.t0 = _context9[\"catch\"](0);\n          notifyerror(_context9.t0);\n          console.log(_context9.t0.message);\n\n        case 23:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 19]]);\n} //Get Search\n\nexport function getShoppedLate(action) {\n  var url, payload, result, shoppedLateSummary, states, zones, store;\n  return _regeneratorRuntime.wrap(function getShoppedLate$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          url = '';\n          url = \"tasks/summary\";\n          _context10.next = 5;\n          return call(callApiV2, 'POST', url, action.data);\n\n        case 5:\n          payload = _context10.sent;\n\n          if (!payload.data.error) {\n            _context10.next = 9;\n            break;\n          }\n\n          _context10.next = 9;\n          return put(dashboardAction.listenShoppedLateError());\n\n        case 9:\n          if (!payload.data.result) {\n            _context10.next = 15;\n            break;\n          }\n\n          result = payload.data.result || [];\n          shoppedLateSummary = {};\n\n          if (result.length > 0) {\n            if (action.data.type === 'default') {\n              shoppedLateSummary = _objectSpread({}, result[0]);\n            }\n\n            if (action.data.type === 'state') {\n              states = {};\n              result.map(function (item) {\n                states[item.state_code] = {\n                  shopped_late: item.shopped_late,\n                  shopping_late_percent: item.shopping_late_percent,\n                  total_orders: item.total_orders\n                };\n              });\n              shoppedLateSummary = _objectSpread({}, states);\n            }\n\n            if (action.data.type === 'place') {\n              zones = {};\n              result.map(function (item) {\n                if (!!zones[item.state_code]) {\n                  zones[item.state_code][item.mkt_ofc_cty_del_zne_id] = {\n                    shopped_late: item.shopped_late,\n                    shopping_late_percent: item.shopping_late_percent,\n                    total_orders: item.total_orders\n                  };\n                } else {\n                  zones[item.state_code] = {};\n                  zones[item.state_code][item.mkt_ofc_cty_del_zne_id] = {\n                    shopped_late: item.shopped_late,\n                    shopping_late_percent: item.shopping_late_percent,\n                    total_orders: item.total_orders\n                  };\n                }\n              });\n              shoppedLateSummary = _objectSpread({}, zones);\n            }\n\n            if (action.data.type === 'store') {\n              store = {};\n              result.map(function (item) {\n                store[item.store_id] = {\n                  shopped_late: item.shopped_late,\n                  shopping_late_percent: item.shopping_late_percent,\n                  total_orders: item.total_orders\n                };\n              });\n              shoppedLateSummary = _objectSpread({}, store);\n            }\n          } //console.log(shoppedLateSummary);\n\n\n          _context10.next = 15;\n          return put(dashboardAction.listenShoppedLateSuccess({\n            summary: _objectSpread({}, shoppedLateSummary),\n            type: action.data.type\n          }));\n\n        case 15:\n          _context10.next = 21;\n          break;\n\n        case 17:\n          _context10.prev = 17;\n          _context10.t0 = _context10[\"catch\"](0);\n          notifyerror(_context10.t0.message);\n          console.log(_context10.t0.message);\n\n        case 21:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 17]]);\n}\nexport function watchDashboardStore() {\n  return _regeneratorRuntime.wrap(function watchDashboardStore$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return takeEvery(dashboardConstant.GET_TRACK_DETAILS, getTrackDetails);\n\n        case 3:\n          _context11.next = 5;\n          return takeEvery(dashboardConstant.GET_TASK_DETAILS, getTaskDetails);\n\n        case 5:\n          _context11.next = 7;\n          return takeEvery(dashboardConstant.GET_LOCATIONS, getLocations);\n\n        case 7:\n          _context11.next = 9;\n          return takeEvery(dashboardConstant.DELETE_TASK, deleteTask);\n\n        case 9:\n          _context11.next = 11;\n          return takeEvery(dashboardConstant.UPDATE_TASK_STATUS, updateTaskStatus);\n\n        case 11:\n          _context11.next = 13;\n          return takeEvery(dashboardConstant.CREATE_TASK, createTask);\n\n        case 13:\n          _context11.next = 15;\n          return takeEvery(dashboardConstant.EDIT_TASK, editTask);\n\n        case 15:\n          _context11.next = 17;\n          return takeEvery(dashboardConstant.TASK_SEARCH, search);\n\n        case 17:\n          _context11.next = 19;\n          return takeEvery(dashboardConstant.UPDATE_FILTER, updateFilter);\n\n        case 19:\n          _context11.next = 21;\n          return takeEvery(dashboardConstant.GET_SHOPPEDLATE, getShoppedLate);\n\n        case 21:\n          _context11.next = 26;\n          break;\n\n        case 23:\n          _context11.prev = 23;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.log(_context11.t0);\n\n        case 26:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 23]]);\n}","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/Dashboard/Saga/index.js"],"names":["getLocations","getTaskDetails","getTrackDetails","createTask","deleteTask","updateTaskStatus","editTask","search","updateFilter","getShoppedLate","watchDashboardStore","takeEvery","put","call","all","dashboardConstant","error","notifyerror","success","notifysuccess","dashboardAction","headerAction","callApi","callApiV2","callOnFleetApi","moment","_","isEmpty","compact","getDateTime","getSysDateTime","getFilter","action","url","statesLocalStorage","JSON","parse","localStorage","getItem","states","map","item","id","res","payload","zone","data","listenGetLocationsError","result","zoneList","taskType","pharmacy","locations","stores","user","user_type","v","k","value","label","address","store","zone_id","listenGetLocationsSuccess","zones","console","log","message","uuid","listenGetTaskDetailsError","listenGetTaskDetailsSuccess","listenCreateTaskError","listenCreateTaskSuccess","format","listenDeleteTaskError","listenDeleteTaskSuccess","orderStatus","status","listenUpdateTaskStatusError","listenUpdateTaskStatusSuccess","params","listenEditTaskError","listenEditTaskSuccess","response","cause","userType","valueOne","type","valueTwo","dateType","listenSearchError","tasks","length","val","key","recipient_sig","track_driver","current_url","tskStatus","driverStatus","dt","timeCreated","split","d","created_at","completeafter","completebefore","timezone","parseInt","completeAfter","completeBefore","completionDetails","events","onflt_recpnt_sig","pickup_onfleet_url","drop_onfleet_url","state_code","mkt_ofc_cty_del_zne_id","name","mkt_ofc_cty_del_zne_name","orders","push","complete_after","complete_before","recpnt_address","recipients","mrchnt_address","merchant","mrchnt_notes","notes","recpnt_notes","tsk_status","order_number","orderNumber","driver_name","mrchnt_location","location","recpnt_location","tip","temp","each","vz","kz","sortBy","o","timestamp","listenSearchSuccess","count","filter","stringify","syncFilter","filterData","filterKeys","Store","Area","State","state","index","findIndex","z","place","forEach","store_id","toString","listenShoppedLateError","shoppedLateSummary","shopped_late","shopping_late_percent","total_orders","listenShoppedLateSuccess","summary","GET_TRACK_DETAILS","GET_TASK_DETAILS","GET_LOCATIONS","DELETE_TASK","UPDATE_TASK_STATUS","CREATE_TASK","EDIT_TASK","TASK_SEARCH","UPDATE_FILTER","GET_SHOPPEDLATE"],"mappings":";;;oDAaiBA,Y;qDAiFAC,c;qDAsBAC,e;qDAsBAC,U;qDAwBAC,U;qDAwBAC,gB;qDAwBAC,Q;qDA8BAC,M;qDAyIAC,Y;sDAsGAC,c;sDAuEAC,mB;;AAtiBjB,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,GAA/B,QAA0C,oBAA1C;AACA,OAAO,KAAKC,iBAAZ,MAAmC,cAAnC;AACA,SAAQC,KAAK,IAAIC,WAAjB,EAA8BC,OAAO,IAAIC,aAAzC,QAA6D,sBAA7D;AACA,OAAO,KAAKC,eAAZ,MAAiC,YAAjC;AACA,OAAO,KAAKC,YAAZ,MAA8B,sBAA9B;AACA,SAAQC,OAAR,EAAiBC,SAAjB,EAA4BC,cAA5B,QAAiD,qBAAjD;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AACA,SAAQC,OAAR,EAAiBC,OAAjB,QAA+B,QAA/B;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,SAAtC,QAAuD,wBAAvD,C,CAGA;;AACA,OAAO,SAAU/B,YAAV,CAAuBgC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAE6B,EAF7B;AAGKC,UAAAA,kBAHL,GAG6BC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,KAAkC,IAA7C,CAH7B;AAIKC,UAAAA,MAJL,GAI6BL,kBAAkB,CAACM,GAAnB,CAAuB,UAAAC,IAAI;AAAA,mBAAIA,IAAI,CAACC,EAAT;AAAA,WAA3B,CAJ7B;AAKCT,UAAAA,GAAG,iBAAH;AALD;AAMiB,iBAAMnB,GAAG,CAAC,CACMD,IAAI,CAACS,OAAD,EAAU,KAAV,EAAiBW,GAAjB,CADV,EAEMpB,IAAI,CAACU,SAAD,EAAY,MAAZ,EAAoB,gBAApB,EAAsC;AAAC,qBAAQgB;AAAT,WAAtC,CAFV,CAAD,CAAT;;AANjB;AAMOI,UAAAA,GANP;;AAAA,eAYIA,GAZJ;AAAA;AAAA;AAAA;;AAaSC,UAAAA,OAbT,GAayBD,GAAG,CAAC,CAAD,CAb5B;AAcSE,UAAAA,IAdT,GAcyBF,GAAG,CAAC,CAAD,CAd5B,EAgBK;;AAhBL,eAiBQC,OAAO,CAACE,IAAR,CAAa9B,KAjBrB;AAAA;AAAA;AAAA;;AAAA;AAkBS,iBAAMJ,GAAG,CAACQ,eAAe,CAAC2B,uBAAhB,EAAD,CAAT;;AAlBT;AAAA,eAsBQH,OAAO,CAACE,IAAR,CAAaE,MAtBrB;AAAA;AAAA;AAAA;;AAuBaC,UAAAA,QAvBb,GAuB6B,EAvB7B;AAwBaC,UAAAA,QAxBb,GAwB6B,EAxB7B;AAyBaC,UAAAA,QAzBb,GAyB6B,KAzB7B;AA0BaC,UAAAA,SA1Bb,GA0B6B,EA1B7B;AA2BaC,UAAAA,MA3Bb,GA2B6B,EA3B7B;AA4BaL,UAAAA,MA5Bb,GA4B6BJ,OAAO,CAACE,IAAR,CAAaE,MA5B1C;AA6BaM,UAAAA,IA7Bb,GA6B6BV,OAAO,CAACE,IAAR,CAAaQ,IA7B1C;;AA8BS,cAAGA,IAAI,CAACC,SAAL,KAAmB,UAAtB,EAAkC;AAC9BL,YAAAA,QAAQ,GAAQ,UAAhB;AACAC,YAAAA,QAAQ,GAAQ,IAAhB;AACH,WAHD,MAGO,IAAGG,IAAI,CAACC,SAAL,KAAmB,SAAtB,EAAgC;AACnCL,YAAAA,QAAQ,GAAQ,SAAhB;AACAC,YAAAA,QAAQ,GAAQ,KAAhB;AACH,WAHM,MAGA;AACHD,YAAAA,QAAQ,GAAQ,OAAhB;AACAC,YAAAA,QAAQ,GAAQ,KAAhB;AACH;;AACDH,UAAAA,MAAM,CAACR,GAAP,CAAW,UAACgB,CAAD,EAAIC,CAAJ,EAAU;AACjBL,YAAAA,SAAS,CAACK,CAAD,CAAT,GAAe;AACXf,cAAAA,EAAE,EAAUc,CAAC,CAACd,EADH;AAEXgB,cAAAA,KAAK,EAAOD,CAFD;AAGXE,cAAAA,KAAK,EAAOH,CAAC,CAACI,OAHH;AAIXd,cAAAA,IAAI,EAAQU;AAJD,aAAf;;AAMA,gBAAGA,CAAC,CAACK,KAAF,KAAY,EAAZ,IAAkBL,CAAC,CAACK,KAAF,KAAY,IAAjC,EAAuC;AACnCR,cAAAA,MAAM,CAACI,CAAD,CAAN,GAAY;AACRf,gBAAAA,EAAE,EAAUc,CAAC,CAACd,EADN;AAERoB,gBAAAA,OAAO,EAAKN,CAAC,CAACM,OAFN;AAGRJ,gBAAAA,KAAK,EAAOD,CAHJ;AAIRE,gBAAAA,KAAK,EAAOH,CAAC,CAACK,KAJN;AAKRf,gBAAAA,IAAI,EAAQU;AALJ,eAAZ;AAOH;AACJ,WAhBD;AAiBAH,UAAAA,MAAM,GAAczB,OAAO,CAACyB,MAAD,CAA3B;AACAD,UAAAA,SAAS,GAAWxB,OAAO,CAACwB,SAAD,CAA3B;;AAEA,cAAG,CAAC,CAACP,IAAI,CAACC,IAAV,EAAgB;AACZG,YAAAA,QAAQ,GAAgBJ,IAAI,CAACC,IAAL,IAAa,EAArC;AACH;;AA9DV;AAgES,iBAAMlC,GAAG,CAACQ,eAAe,CAAC2C,yBAAhB,CAA0C;AAChDb,YAAAA,QAAQ,EAAEA,QADsC;AAEhDC,YAAAA,QAAQ,EAAEA,QAFsC;AAGhDC,YAAAA,SAAS,EAAEA,SAHqC;AAIhDC,YAAAA,MAAM,EAAEA,MAJwC;AAKhDW,YAAAA,KAAK,EAAEf;AALyC,WAA1C,CAAD,CAAT;;AAhET;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0EChC,UAAAA,WAAW,aAAX;AACAgD,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAEC,OAAd;;AA3ED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAgFP;;AACA,OAAO,SAAUlE,cAAV,CAAyB+B,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAE6B,EAF7B;AAGCA,UAAAA,GAAG,mBAAkCD,MAAM,CAACc,IAAP,CAAYsB,IAA9C,CAAH;AAHD;AAIiC,iBAAMvD,IAAI,CAACU,SAAD,EAAY,KAAZ,EAAmBU,GAAnB,CAAV;;AAJjC;AAIOW,UAAAA,OAJP;;AAAA,eAOIA,OAAO,CAACE,IAAR,CAAa9B,KAPjB;AAAA;AAAA;AAAA;;AAAA;AAQK,iBAAMJ,GAAG,CAACQ,eAAe,CAACiD,yBAAhB,EAAD,CAAT;;AARL;AAAA,eAYIzB,OAAO,CAACE,IAZZ;AAAA;AAAA;AAAA;;AAAA;AAaK,iBAAMlC,GAAG,CAACQ,eAAe,CAACkD,2BAAhB,CAA4C1B,OAAO,CAACE,IAApD,CAAD,CAAT;;AAbL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBC7B,UAAAA,WAAW,CAAC,aAAEkD,OAAH,CAAX;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAEC,OAAd;;AAjBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAqBP;;AACA,OAAO,SAAUjE,eAAV,CAA0B8B,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAE6B,EAF7B;AAGCA,UAAAA,GAAG,mBAAkCD,MAAM,CAACc,IAAP,CAAYsB,IAA9C,CAAH;AAHD;AAIiC,iBAAMvD,IAAI,CAACW,cAAD,EAAiB,KAAjB,EAAwBS,GAAxB,CAAV;;AAJjC;AAIOW,UAAAA,OAJP;;AAMC;AACA,cAAGA,OAAO,CAACE,IAAR,CAAa9B,KAAhB,EAAsB,CAClB;AACH,WATF,CAWC;;;AACA,cAAG4B,OAAO,CAACE,IAAX,EAAgB,CACZ;AACH;;AAdF;AAAA;;AAAA;AAAA;AAAA;AAgBC7B,UAAAA,WAAW,CAAC,aAAEkD,OAAH,CAAX;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAEC,OAAd;;AAjBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAqBP;;AACA,OAAO,SAAUhE,UAAV,CAAqB6B,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAEyB,EAFzB;AAGCA,UAAAA,GAAG,UAAH;AAHD;AAIyB,iBAAMpB,IAAI,CAACS,OAAD,EAAU,MAAV,EAAkBW,GAAlB,EAAuBD,MAAM,CAACc,IAA9B,CAAV;;AAJzB;AAIOF,UAAAA,OAJP;;AAAA,eAOIA,OAAO,CAACE,IAAR,CAAa9B,KAPjB;AAAA;AAAA;AAAA;;AAQKiD,UAAAA,OAAO,CAACC,GAAR,CAAYtB,OAAO,CAACE,IAAR,CAAa9B,KAAzB;AARL;AASK,iBAAMJ,GAAG,CAACQ,eAAe,CAACmD,qBAAhB,EAAD,CAAT;;AATL;AAAA,eAaI3B,OAAO,CAACE,IAbZ;AAAA;AAAA;AAAA;;AAcK3B,UAAAA,aAAa,CAAC;AAACgD,YAAAA,OAAO,EAAE;AAAV,WAAD,CAAb;AAdL;AAeK,iBAAMvD,GAAG,CAACQ,eAAe,CAACoD,uBAAhB,CAAwC,EAAxC,CAAD,CAAT;;AAfL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBCvD,UAAAA,WAAW,CAAC,aAAEkD,OAAH,CAAX;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAEC,OAAd;;AAnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAuBP;;AACA,OAAO,SAAU/D,UAAV,CAAqB4B,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAEyB,EAFzB;AAGCA,UAAAA,GAAG,mBAA8BD,MAAM,CAACc,IAAP,CAAYsB,IAA1C,CAAH;AACItB,UAAAA,IAJL,GAIyB;AAAC,yBAAYrB,MAAM,GAAGgD,MAAT,CAAgB,GAAhB;AAAb,WAJzB;AAAA;AAKyB,iBAAM5D,IAAI,CAACS,OAAD,EAAU,QAAV,EAAoBW,GAApB,EAAyBa,IAAzB,CAAV;;AALzB;AAKOF,UAAAA,OALP;;AAAA,eAQIA,OAAO,CAACE,IAAR,CAAa9B,KARjB;AAAA;AAAA;AAAA;;AAAA;AASK,iBAAMJ,GAAG,CAACQ,eAAe,CAACsD,qBAAhB,EAAD,CAAT;;AATL;AAAA,eAaI9B,OAAO,CAACE,IAbZ;AAAA;AAAA;AAAA;;AAcK3B,UAAAA,aAAa,CAAC;AAACgD,YAAAA,OAAO,EAAE;AAAV,WAAD,CAAb;AAdL;AAeK,iBAAMvD,GAAG,CAACQ,eAAe,CAACuD,uBAAhB,CAAwC,EAAxC,CAAD,CAAT;;AAfL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBC1D,UAAAA,WAAW,CAAC,aAAEkD,OAAH,CAAX;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAEC,OAAd;;AAnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAuBP;;AACA,OAAO,SAAU9D,gBAAV,CAA2B2B,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAEyB,EAFzB;AAGCA,UAAAA,GAAG,0BAAqCD,MAAM,CAACc,IAAP,CAAYsB,IAAjD,CAAH;AACItB,UAAAA,IAJL,GAIyB;AAAC8B,YAAAA,WAAW,EAAC;AAACC,cAAAA,MAAM,EAAC7C,MAAM,CAACc,IAAP,CAAY+B;AAApB;AAAb,WAJzB;AAAA;AAKyB,iBAAMhE,IAAI,CAACS,OAAD,EAAU,KAAV,EAAiBW,GAAjB,EAAsBa,IAAtB,CAAV;;AALzB;AAKOF,UAAAA,OALP;;AAAA,eAQIA,OAAO,CAACE,IAAR,CAAa9B,KARjB;AAAA;AAAA;AAAA;;AAAA;AASK,iBAAMJ,GAAG,CAACQ,eAAe,CAAC0D,2BAAhB,EAAD,CAAT;;AATL;AAAA,eAaIlC,OAAO,CAACE,IAbZ;AAAA;AAAA;AAAA;;AAcK3B,UAAAA,aAAa,CAAC;AAACgD,YAAAA,OAAO,EAAE;AAAV,WAAD,CAAb;AAdL;AAeK,iBAAMvD,GAAG,CAACQ,eAAe,CAAC2D,6BAAhB,CAA8C,EAA9C,CAAD,CAAT;;AAfL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBC9D,UAAAA,WAAW,CAAC,aAAEkD,OAAH,CAAX;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAEC,OAAd;;AAnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAuBP;;AACA,OAAO,SAAU7D,QAAV,CAAmB0B,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAEyB,EAFzB;AAGCA,UAAAA,GAAG,mBAA8BD,MAAM,CAACc,IAAP,CAAYsB,IAA1C,CAAH;AACItB,UAAAA,IAJL,qBAI6Bd,MAAM,CAACc,IAAP,CAAYkC,MAJzC;AAAA;AAKyB,iBAAMnE,IAAI,CAACS,OAAD,EAAU,KAAV,EAAiBW,GAAjB,EAAsBa,IAAtB,CAAV;;AALzB;AAKOF,UAAAA,OALP;;AAAA,eAQIA,OAAO,CAACE,IAAR,CAAa9B,KARjB;AAAA;AAAA;AAAA;;AAAA;AASK,iBAAMJ,GAAG,CAACQ,eAAe,CAAC6D,mBAAhB,EAAD,CAAT;;AATL;AAAA,eAaIrC,OAAO,CAACE,IAbZ;AAAA;AAAA;AAAA;;AAcK;AACA3B,UAAAA,aAAa,CAAC;AAACgD,YAAAA,OAAO,EAAE;AAAV,WAAD,CAAb;AAfL;AAgBK,iBAAMvD,GAAG,CAACQ,eAAe,CAAC8D,qBAAhB,CAAsC,EAAtC,CAAD,CAAT;;AAhBL;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmBC;AACA,cAAG,aAAEC,QAAF,IAAc,CAAC,CAAC,aAAEA,QAAF,CAAWrC,IAA9B,EAAoC;AAChC7B,YAAAA,WAAW,CAAC;AAACkD,cAAAA,OAAO,EAAE,aAAEgB,QAAF,CAAWrC,IAAX,CAAgBqB,OAAhB,CAAwBiB;AAAlC,aAAD,CAAX;AACH,WAFD,MAEO;AACHnE,YAAAA,WAAW,CAAC;AAACkD,cAAAA,OAAO,EAAE,aAAEA;AAAZ,aAAD,CAAX;AACH;;AACDF,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAEC,OAAd;;AAzBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CA6BP;;AACA,OAAO,SAAU5D,MAAV,CAAiByB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAE6B,EAF7B;AAGCA,UAAAA,GAAG,iBAAH;AACIa,UAAAA,IAJL,GAI6B;AACxBuC,YAAAA,QAAQ,EAAQrD,MAAM,CAACc,IAAP,CAAYS,SADJ;AAExB+B,YAAAA,QAAQ,EAAQtD,MAAM,CAACc,IAAP,CAAYyC,IAFJ;AAGxBC,YAAAA,QAAQ,EAAQxD,MAAM,CAACc,IAAP,CAAYY;AAHJ,WAJ7B;;AASC,cAAG,CAAC,CAAC1B,MAAM,CAACc,IAAP,CAAY2C,QAAjB,EAA2B;AACvB3C,YAAAA,IAAI,CAAC2C,QAAL,GAAyBzD,MAAM,CAACc,IAAP,CAAY2C,QAArC;AACH;;AAXF;AAY8B,iBAAM5E,IAAI,CAACU,SAAD,EAAY,MAAZ,EAAoBU,GAApB,EAAyBa,IAAzB,CAAV;;AAZ9B;AAYOF,UAAAA,OAZP;;AAAA,eAeIA,OAAO,CAACE,IAAR,CAAa9B,KAfjB;AAAA;AAAA;AAAA;;AAAA;AAgBK,iBAAMJ,GAAG,CAACQ,eAAe,CAACsE,iBAAhB,EAAD,CAAT;;AAhBL;AAAA,eAoBI9C,OAAO,CAACE,IAAR,CAAaE,MApBjB;AAAA;AAAA;AAAA;;AAqBSA,UAAAA,MArBT,GAqBkBJ,OAAO,CAACE,IAAR,CAAaE,MArB/B;AAsBS2C,UAAAA,KAtBT,GAsBiB,EAtBjB;;AAuBK,cAAG3C,MAAM,CAAC2C,KAAP,CAAaC,MAAb,GAAsB,CAAzB,EAA4B;AACxB5C,YAAAA,MAAM,CAAC2C,KAAP,CAAanD,GAAb,CAAiB,UAACqD,GAAD,EAAMC,GAAN,EAAc;AAC3B,kBAAIC,aAAa,GAAO,KAAxB;AACA,kBAAIC,YAAY,GAAQ,EAAxB;AACA,kBAAIC,WAAW,GAAS,EAAxB;AACA,kBAAIC,SAAS,GAAW,WAAxB;;AACA,kBAAGL,GAAG,CAACK,SAAJ,KAAkB,cAArB,EAAqC;AACjCA,gBAAAA,SAAS,GAAW,WAApB;AACH,eAFD,MAEO,IAAGL,GAAG,CAACK,SAAJ,KAAkB,iBAArB,EAAwC;AAC3CA,gBAAAA,SAAS,GAAW,WAApB;AACH,eAFM,MAEA,IAAGL,GAAG,CAACK,SAAJ,KAAkB,cAAlB,IAAoCL,GAAG,CAACM,YAAJ,KAAqB,qBAA5D,EAAmF;AACtFD,gBAAAA,SAAS,GAAW,WAApB;AACH,eAFM,MAEA,IAAGL,GAAG,CAACK,SAAJ,KAAkB,cAArB,EAAqC;AACxCA,gBAAAA,SAAS,GAAW,YAApB;AACH,eAFM,MAEA,IAAGL,GAAG,CAACK,SAAJ,KAAkB,SAArB,EAAgC;AACnCA,gBAAAA,SAAS,GAAW,WAApB;AACH,eAFM,MAEA,IAAGL,GAAG,CAACK,SAAJ,KAAkB,aAArB,EAAoC;AACvCA,gBAAAA,SAAS,GAAW,SAApB;AACH,eAFM,MAEA,IAAGL,GAAG,CAACK,SAAJ,KAAkB,YAArB,EAAmC;AACtCA,gBAAAA,SAAS,GAAW,SAApB;AACH;;AACD,kBAAIE,EAAE,GAAkBP,GAAG,CAACQ,WAAJ,CAAgBC,KAAhB,CAAsB,GAAtB,CAAxB;AACA,kBAAIC,CAAC,GAAmBH,EAAE,CAAC,CAAD,CAAF,CAAME,KAAN,CAAY,GAAZ,CAAxB;AACA,kBAAIE,UAAU,GAAUD,CAAC,CAAC,CAAD,CAAD,GAAK,GAAL,GAASA,CAAC,CAAC,CAAD,CAAV,GAAc,GAAd,GAAkBA,CAAC,CAAC,CAAD,CAA3C;AAEA,kBAAIE,aAAa,GAAO,EAAxB;AACA,kBAAIC,cAAc,GAAM,EAAxB;;AAEA,kBAAGb,GAAG,CAACc,QAAJ,KAAiB,EAApB,EAAwB;AACpBF,gBAAAA,aAAa,GAAO5E,WAAW,CAAC+E,QAAQ,CAACf,GAAG,CAACgB,aAAL,CAAR,GAA8B,IAA/B,EAAqChB,GAAG,CAACc,QAAzC,EAAmD,gBAAnD,CAA/B;AACAD,gBAAAA,cAAc,GAAM7E,WAAW,CAAC+E,QAAQ,CAACf,GAAG,CAACiB,cAAL,CAAR,GAA+B,IAAhC,EAAsCjB,GAAG,CAACc,QAA1C,EAAoD,QAApD,CAA/B;AACH,eAHD,MAGO;AACPF,gBAAAA,aAAa,GAAW3E,cAAc,CAAC8E,QAAQ,CAACf,GAAG,CAACgB,aAAL,CAAR,GAA8B,IAA/B,EAAqC,gBAArC,CAAtC;AACAH,gBAAAA,cAAc,GAAU5E,cAAc,CAAC8E,QAAQ,CAACf,GAAG,CAACiB,cAAL,CAAR,GAA+B,IAAhC,EAAsC,QAAtC,CAAtC;AACC;;AACD,kBAAG,CAACnF,OAAO,CAACkE,GAAG,CAACkB,iBAAJ,CAAsBC,MAAvB,CAAR,IACC,CAAC,CAACnB,GAAG,CAACkB,iBAAJ,CAAsBC,MAAtB,CAA6BC,gBADnC,EACqD;AACjDlB,gBAAAA,aAAa,GAAO,IAApB;AACH;;AACD,kBAAG,CAACpE,OAAO,CAACkE,GAAG,CAACkB,iBAAJ,CAAsBC,MAAvB,CAAR,IACC,CAAC,CAACnB,GAAG,CAACkB,iBAAJ,CAAsBC,MAAtB,CAA6BC,gBADnC,EACqD;AACjDlB,gBAAAA,aAAa,GAAO,IAApB;AACH;;AAED,kBAAG,CAAC,CAACF,GAAG,CAACqB,kBAAT,EAA6B;AACzBlB,gBAAAA,YAAY,GAAQ,oBAApB;AACAC,gBAAAA,WAAW,GAASJ,GAAG,CAACqB,kBAAxB;AACH;;AAED,kBAAG,CAAC,CAACrB,GAAG,CAACsB,gBAAT,EAA2B;AACvBnB,gBAAAA,YAAY,GAAQ,qBAApB;AACAC,gBAAAA,WAAW,GAASJ,GAAG,CAACsB,gBAAxB;AACH;;AAED,kBAAG,CAAC,CAAC,CAACxB,KAAK,CAACE,GAAG,CAACuB,UAAL,CAAX,EAA6B;AACzBzB,gBAAAA,KAAK,CAACE,GAAG,CAACuB,UAAL,CAAL,GAA4B,EAA5B;AACAzB,gBAAAA,KAAK,CAACE,GAAG,CAACuB,UAAL,CAAL,CAAsBvB,GAAG,CAACwB,sBAA1B,IAAwD;AACpDC,kBAAAA,IAAI,EAAYzB,GAAG,CAAC0B,wBADgC;AAEpD7E,kBAAAA,EAAE,EAAcmD,GAAG,CAACuB,UAAJ,GAAevB,GAAG,CAACwB,sBAFiB;AAGpDG,kBAAAA,MAAM,EAAU;AAHoC,iBAAxD;AAKH,eAPD,MAOO;AACH,oBAAG,CAAC,CAAC,CAAC7B,KAAK,CAACE,GAAG,CAACuB,UAAL,CAAL,CAAsBvB,GAAG,CAACwB,sBAA1B,CAAN,EAAyD;AACrD1B,kBAAAA,KAAK,CAACE,GAAG,CAACuB,UAAL,CAAL,CAAsBvB,GAAG,CAACwB,sBAA1B,IAAwD;AACpDC,oBAAAA,IAAI,EAAYzB,GAAG,CAAC0B,wBADgC;AAEpD7E,oBAAAA,EAAE,EAAcmD,GAAG,CAACuB,UAAJ,GAAevB,GAAG,CAACwB,sBAFiB;AAGpDG,oBAAAA,MAAM,EAAU;AAHoC,mBAAxD;AAKH;AACJ;;AAED7B,cAAAA,KAAK,CAACE,GAAG,CAACuB,UAAL,CAAL,CAAsBvB,GAAG,CAACwB,sBAA1B,EAAkDG,MAAlD,CAAyDC,IAAzD,CAA8D;AAC1DjB,gBAAAA,UAAU,EAAkBA,UAD8B;AAE1DkB,gBAAAA,cAAc,EAAcjB,aAF8B;AAG1DkB,gBAAAA,eAAe,EAAajB,cAH8B;AAI1DkB,gBAAAA,cAAc,EAAc/B,GAAG,CAACgC,UAAJ,CAAejE,OAJe;AAK1DkE,gBAAAA,cAAc,EAAcjC,GAAG,CAACkC,QAAJ,CAAanE,OALiB;AAM1DoE,gBAAAA,YAAY,EAAgBnC,GAAG,CAACkC,QAAJ,CAAaE,KANiB;AAO1DC,gBAAAA,YAAY,EAAgBrC,GAAG,CAACgC,UAAJ,CAAeI,KAPe;AAQ1DE,gBAAAA,UAAU,EAAkBjC,SAR8B;AAS1D9B,gBAAAA,IAAI,EAAwByB,GAAG,CAACzB,IAT0B;AAU1DgE,gBAAAA,YAAY,EAAgBvC,GAAG,CAACwC,WAV0B;AAW1DC,gBAAAA,WAAW,EAAiBzC,GAAG,CAACyC,WAX0B;AAY1DvC,gBAAAA,aAAa,EAAeA,aAZ8B;AAa1DY,gBAAAA,QAAQ,EAAoBd,GAAG,CAACc,QAb0B;AAc1D4B,gBAAAA,eAAe,EAAa1C,GAAG,CAACkC,QAAJ,CAAaS,QAdiB;AAe1DC,gBAAAA,eAAe,EAAa5C,GAAG,CAACgC,UAAJ,CAAeW,QAfe;AAgB1DrB,gBAAAA,gBAAgB,EAAYtB,GAAG,CAACsB,gBAAJ,IAAwB,EAhBM;AAiB1DD,gBAAAA,kBAAkB,EAAUrB,GAAG,CAACqB,kBAAJ,IAA0B,EAjBI;AAkB1DlB,gBAAAA,YAAY,EAAgBA,YAlB8B;AAmB1DC,gBAAAA,WAAW,EAAiBA,WAnB8B;AAoB1DyC,gBAAAA,GAAG,EAAyB7C,GAAG,CAAC6C,GApB0B;AAqB1DtB,gBAAAA,UAAU,EAAkBvB,GAAG,CAACuB,UArB0B;AAsB1DC,gBAAAA,sBAAsB,EAAMxB,GAAG,CAACwB;AAtB0B,eAA9D;AAwBH,aA9FD;AA+FH;;AACGsB,UAAAA,IAxHT,GAwHyC,EAxHzC;;AAyHKjH,UAAAA,CAAC,CAACkH,IAAF,CAAOjD,KAAP,EAAc,UAACE,GAAD,EAAMC,GAAN,EAAc;AACxBpE,YAAAA,CAAC,CAACkH,IAAF,CAAO/C,GAAP,EAAY,UAACgD,EAAD,EAAKC,EAAL,EAAY;AACpBnD,cAAAA,KAAK,CAACG,GAAD,CAAL,CAAWgD,EAAX,EAAetB,MAAf,GAA4B9F,CAAC,CAACqH,MAAF,CAASpD,KAAK,CAACG,GAAD,CAAL,CAAWgD,EAAX,EAAetB,MAAxB,EAAgC,UAACwB,CAAD,EAAO;AAAE,uBAAOA,CAAC,CAACC,SAAT;AAAqB,eAA9D,CAA5B;AACH,aAFD;;AAGAN,YAAAA,IAAI,CAAC7C,GAAD,CAAJ,GAAgCpE,CAAC,CAACqH,MAAF,CAASpD,KAAK,CAACG,GAAD,CAAd,EAAqB,UAACkD,CAAD,EAAO;AAAE,qBAAOA,CAAC,CAAC1B,IAAT;AAAgB,aAA9C,CAAhC;AACH,WALD;;AAMA3B,UAAAA,KAAK,GAA+BgD,IAApC;AA/HL;AAgIK,iBAAM/H,GAAG,CAACQ,eAAe,CAAC8H,mBAAhB,CAAoC;AAACC,YAAAA,KAAK,EAAEnG,MAAM,CAAC2C,KAAP,CAAaC,MAArB;AAA6BD,YAAAA,KAAK,EAAEA;AAApC,WAApC,CAAD,CAAT;;AAhIL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmIC1E,UAAAA,WAAW,CAAC,aAAEkD,OAAH,CAAX;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAEC,OAAd;;AApID;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAwIP;;AACA,OAAO,SAAU3D,YAAV,CAAuBwB,MAAvB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAE6B,EAF7B;AAGCA,UAAAA,GAAG,iBAAH;AACIa,UAAAA,IAJL,GAI6B;AACxBsG,YAAAA,MAAM,EAAE;AACJtD,cAAAA,GAAG,EAAG,WADF;AAEJpC,cAAAA,KAAK,EAAGvB,IAAI,CAACkH,SAAL,CAAerH,MAAM,CAACc,IAAtB;AAFJ;AADgB,WAJ7B;AAAA;AAUC,iBAAMlC,GAAG,CAACS,YAAY,CAACiI,UAAb,CAAwB;AAC9BxD,YAAAA,GAAG,EAAG,WADwB;AAE9BpC,YAAAA,KAAK,EAAG1B,MAAM,CAACc;AAFe,WAAxB,CAAD,CAAT;;AAVD;AAAA;AAc8B,iBAAMjC,IAAI,CAACU,SAAD,EAAY,MAAZ,EAAoBU,GAApB,EAAyBa,IAAzB,CAAV;;AAd9B;AAcOF,UAAAA,OAdP;;AAgBC;AACA,cAAGA,OAAO,CAACE,IAAR,CAAa9B,KAAhB,EAAsB,CAClB;AACH,WAnBF,CAqBC;;;AArBD,eAsBI4B,OAAO,CAACE,IAtBZ;AAAA;AAAA;AAAA;;AAuBK;AACIyG,UAAAA,UAxBT,GAwB4BvH,MAAM,CAACc,IAAP,IAAe,EAxB3C;AAyBS0G,UAAAA,UAzBT,GAyB4BD,UAAU,CAACC,UAAX,IAAyB,EAzBrD;AA0BS1G,UAAAA,KA1BT,GA0B2B;AAClBS,YAAAA,SAAS,EAAIgG,UAAU,CAAChE,IADN;AAElBA,YAAAA,IAAI,EAAgB;AAFF,WA1B3B;;AA8BK,cAAG,CAAC5D,OAAO,CAAC6H,UAAD,CAAX,EAAyB;AACrB,gBAAGA,UAAU,CAACC,KAAX,CAAiB7D,MAAjB,KAA4B,CAA5B,IAAiC4D,UAAU,CAACE,IAAX,CAAgB9D,MAAhB,KAA2B,CAA5D,IAAiE4D,UAAU,CAACG,KAAX,CAAiB/D,MAAjB,GAA0B,CAA9F,EAAiG;AACzFrD,cAAAA,MADyF,GACrE,CAACiH,UAAU,CAACG,KAAX,IAAoB,EAArB,EAAyBnH,GAAzB,CAA6B,UAAAC,IAAI,EAAI;AAC7D;AACA,uBAAOA,IAAI,CAACiB,KAAZ;AACC,eAHuB,CADqE;;AAK7F,kBAAGnB,MAAM,CAACqD,MAAP,GAAgB,CAAnB,EAAqB;AACjB9C,gBAAAA,KAAI,GAAK;AACLyC,kBAAAA,IAAI,EAAI,OADH;AAELqE,kBAAAA,KAAK,EAAIrH;AAFJ,iBAAT,CADiB,CAKrB;AACA;AACC;AACJ;;AAED,gBAAGiH,UAAU,CAACC,KAAX,CAAiB7D,MAAjB,KAA4B,CAA5B,IAAiC4D,UAAU,CAACE,IAAX,CAAgB9D,MAAhB,GAAyB,CAA7D,EAAgE;AACxD5B,cAAAA,KADwD,GACrC,EADqC;AAE5D,eAACwF,UAAU,CAACE,IAAX,IAAmB,EAApB,EAAwBlH,GAAxB,CAA4B,UAACC,IAAD,EAAU;AACtC,oBAAIoH,KAAK,GAAI7F,KAAK,CAAC8F,SAAN,CAAgB,UAACC,CAAD;AAAA,yBAAOA,CAAC,CAACH,KAAF,KAAYnH,IAAI,CAACmH,KAAxB;AAAA,iBAAhB,CAAb,CADsC,CAEtC;;AACA,oBAAGC,KAAK,GAAG,CAAC,CAAZ,EAAc;AACV7F,kBAAAA,KAAK,CAAC6F,KAAD,CAAL,CAAa/F,OAAb,CAAqB2D,IAArB,CAA0BhF,IAAI,CAACC,EAA/B;AACH,iBAFD,MAEO;AACHsB,kBAAAA,KAAK,CAACyD,IAAN,CAAW;AACPmC,oBAAAA,KAAK,EAAEnH,IAAI,CAACmH,KADL;AAEP9F,oBAAAA,OAAO,EAAG,CAACrB,IAAI,CAACC,EAAN;AAFH,mBAAX;AAIH;AACA,eAXD;;AAaA,kBAAGsB,KAAK,CAAC4B,MAAN,GAAe,CAAlB,EAAoB;AACpB9C,gBAAAA,KAAI,GAAK;AACLyC,kBAAAA,IAAI,EAAI,OADH;AAELyE,kBAAAA,KAAK,EAAIhG;AAFJ,iBAAT,CADoB,CAKpB;AACA;AAEC;AACJ;;AAED,gBAAGwF,UAAU,CAACC,KAAX,CAAiB7D,MAAjB,GAA0B,CAA7B,EAAgC;AACxB/B,cAAAA,KADwB,GACJ,EADI;AAE5B,eAAC2F,UAAU,CAACC,KAAX,IAAoB,EAArB,EAAyBQ,OAAzB,CAAiC,UAAAxH,IAAI,EAAI;AACzCoB,gBAAAA,KAAK,CAAC4D,IAAN,CAAWhF,IAAI,CAACyH,QAAL,CAAcC,QAAd,EAAX;AACC,eAFD;;AAGA,kBAAGtG,KAAK,CAAC+B,MAAN,GAAe,CAAlB,EAAoB;AACpB9C,gBAAAA,KAAI,GAAK;AACLyC,kBAAAA,IAAI,EAAI,OADH;AAEL2E,kBAAAA,QAAQ,EAAGrG;AAFN,iBAAT,CADoB,CAKpB;AACA;AACC;AACJ;;AACDf,YAAAA,KAAI,CAACS,SAAL,GAAkBgG,UAAU,CAAChE,IAA7B;;AACA,gBAAG,CAAC,CAAC,CAACzC,KAAI,CAACyC,IAAX,EAAiB;AACbzC,cAAAA,KAAI,CAACyC,IAAL,GAAkB,SAAlB;AACH;AACJ;;AA1FN;AA2FK,iBAAM3E,GAAG,CAACQ,eAAe,CAACX,cAAhB,CAA+BqC,KAA/B,CAAD,CAAT;;AA3FL;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8FC7B,UAAAA,WAAW,cAAX;AACAgD,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAEC,OAAd;;AA/FD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAqGP;;AACA,OAAO,SAAU1D,cAAV,CAAyBuB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAE6B,EAF7B;AAGCA,UAAAA,GAAG,kBAAH;AAHD;AAI8B,iBAAMpB,IAAI,CAACU,SAAD,EAAY,MAAZ,EAAoBU,GAApB,EAAyBD,MAAM,CAACc,IAAhC,CAAV;;AAJ9B;AAIOF,UAAAA,OAJP;;AAAA,eAOIA,OAAO,CAACE,IAAR,CAAa9B,KAPjB;AAAA;AAAA;AAAA;;AAAA;AAQK,iBAAMJ,GAAG,CAACQ,eAAe,CAACgJ,sBAAhB,EAAD,CAAT;;AARL;AAAA,eAYIxH,OAAO,CAACE,IAAR,CAAaE,MAZjB;AAAA;AAAA;AAAA;;AAaSA,UAAAA,MAbT,GAaqCJ,OAAO,CAACE,IAAR,CAAaE,MAAb,IAAuB,EAb5D;AAcSqH,UAAAA,kBAdT,GAcqC,EAdrC;;AAeK,cAAGrH,MAAM,CAAC4C,MAAP,GAAgB,CAAnB,EAAsB;AAClB,gBAAG5D,MAAM,CAACc,IAAP,CAAYyC,IAAZ,KAAqB,SAAxB,EAAmC;AAC/B8E,cAAAA,kBAAkB,qBAAcrH,MAAM,CAAC,CAAD,CAApB,CAAlB;AACH;;AACD,gBAAGhB,MAAM,CAACc,IAAP,CAAYyC,IAAZ,KAAqB,OAAxB,EAAiC;AACzBhD,cAAAA,MADyB,GACL,EADK;AAE7BS,cAAAA,MAAM,CAACR,GAAP,CAAW,UAAAC,IAAI,EAAI;AACfF,gBAAAA,MAAM,CAACE,IAAI,CAAC2E,UAAN,CAAN,GAAgC;AAC5BkD,kBAAAA,YAAY,EAAI7H,IAAI,CAAC6H,YADO;AAE5BC,kBAAAA,qBAAqB,EAAE9H,IAAI,CAAC8H,qBAFA;AAG5BC,kBAAAA,YAAY,EAAE/H,IAAI,CAAC+H;AAHS,iBAAhC;AAKH,eAND;AAOAH,cAAAA,kBAAkB,qBAAc9H,MAAd,CAAlB;AACH;;AACD,gBAAGP,MAAM,CAACc,IAAP,CAAYyC,IAAZ,KAAqB,OAAxB,EAAiC;AACzBvB,cAAAA,KADyB,GACN,EADM;AAE7BhB,cAAAA,MAAM,CAACR,GAAP,CAAW,UAAAC,IAAI,EAAI;AACf,oBAAG,CAAC,CAACuB,KAAK,CAACvB,IAAI,CAAC2E,UAAN,CAAV,EAA6B;AACzBpD,kBAAAA,KAAK,CAACvB,IAAI,CAAC2E,UAAN,CAAL,CAAuB3E,IAAI,CAAC4E,sBAA5B,IAA4D;AACxDiD,oBAAAA,YAAY,EAAI7H,IAAI,CAAC6H,YADmC;AAExDC,oBAAAA,qBAAqB,EAAE9H,IAAI,CAAC8H,qBAF4B;AAGxDC,oBAAAA,YAAY,EAAE/H,IAAI,CAAC+H;AAHqC,mBAA5D;AAKH,iBAND,MAMO;AACHxG,kBAAAA,KAAK,CAACvB,IAAI,CAAC2E,UAAN,CAAL,GAA6B,EAA7B;AACApD,kBAAAA,KAAK,CAACvB,IAAI,CAAC2E,UAAN,CAAL,CAAuB3E,IAAI,CAAC4E,sBAA5B,IAA4D;AACxDiD,oBAAAA,YAAY,EAAI7H,IAAI,CAAC6H,YADmC;AAExDC,oBAAAA,qBAAqB,EAAE9H,IAAI,CAAC8H,qBAF4B;AAGxDC,oBAAAA,YAAY,EAAE/H,IAAI,CAAC+H;AAHqC,mBAA5D;AAKH;AACJ,eAfD;AAgBAH,cAAAA,kBAAkB,qBAAcrG,KAAd,CAAlB;AACH;;AACD,gBAAGhC,MAAM,CAACc,IAAP,CAAYyC,IAAZ,KAAqB,OAAxB,EAAiC;AACzB1B,cAAAA,KADyB,GACN,EADM;AAE7Bb,cAAAA,MAAM,CAACR,GAAP,CAAW,UAAAC,IAAI,EAAI;AACfoB,gBAAAA,KAAK,CAACpB,IAAI,CAACyH,QAAN,CAAL,GAA6B;AACzBI,kBAAAA,YAAY,EAAI7H,IAAI,CAAC6H,YADI;AAEzBC,kBAAAA,qBAAqB,EAAE9H,IAAI,CAAC8H,qBAFH;AAGzBC,kBAAAA,YAAY,EAAE/H,IAAI,CAAC+H;AAHM,iBAA7B;AAKH,eAND;AAOAH,cAAAA,kBAAkB,qBAAcxG,KAAd,CAAlB;AACH;AACJ,WA7DN,CA8DK;;;AA9DL;AA+DK,iBAAMjD,GAAG,CAACQ,eAAe,CAACqJ,wBAAhB,CAAyC;AAACC,YAAAA,OAAO,oBAAML,kBAAN,CAAR;AAAmC9E,YAAAA,IAAI,EAAEvD,MAAM,CAACc,IAAP,CAAYyC;AAArD,WAAzC,CAAD,CAAT;;AA/DL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkECtE,UAAAA,WAAW,CAAC,cAAEkD,OAAH,CAAX;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAEC,OAAd;;AAnED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuEP,OAAO,SAAUzD,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMC,SAAS,CAAEI,iBAAiB,CAAC4J,iBAApB,EAAuCzK,eAAvC,CAAf;;AAFD;AAAA;AAGC,iBAAMS,SAAS,CAAEI,iBAAiB,CAAC6J,gBAApB,EAAsC3K,cAAtC,CAAf;;AAHD;AAAA;AAIC,iBAAMU,SAAS,CAAEI,iBAAiB,CAAC8J,aAApB,EAAmC7K,YAAnC,CAAf;;AAJD;AAAA;AAKC,iBAAMW,SAAS,CAAEI,iBAAiB,CAAC+J,WAApB,EAAiC1K,UAAjC,CAAf;;AALD;AAAA;AAMC,iBAAMO,SAAS,CAAEI,iBAAiB,CAACgK,kBAApB,EAAwC1K,gBAAxC,CAAf;;AAND;AAAA;AAOC,iBAAMM,SAAS,CAAEI,iBAAiB,CAACiK,WAApB,EAAiC7K,UAAjC,CAAf;;AAPD;AAAA;AAQC,iBAAMQ,SAAS,CAAEI,iBAAiB,CAACkK,SAApB,EAA+B3K,QAA/B,CAAf;;AARD;AAAA;AASC,iBAAMK,SAAS,CAAEI,iBAAiB,CAACmK,WAApB,EAAiC3K,MAAjC,CAAf;;AATD;AAAA;AAUC,iBAAMI,SAAS,CAAEI,iBAAiB,CAACoK,aAApB,EAAmC3K,YAAnC,CAAf;;AAVD;AAAA;AAWC,iBAAMG,SAAS,CAAEI,iBAAiB,CAACqK,eAApB,EAAqC3K,cAArC,CAAf;;AAXD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaCwD,UAAAA,OAAO,CAACC,GAAR;;AAbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, put, call, all } from 'redux-saga/effects';\nimport * as dashboardConstant from '../constants';\nimport {error as notifyerror, success as notifysuccess} from '../../../util/notify';\nimport * as dashboardAction from '../actions';\nimport * as headerAction from '../../Header/actions';\nimport {callApi, callApiV2, callOnFleetApi} from '../../../Helper/api';\nimport moment from 'moment-timezone';\nimport * as _ from 'lodash';\nimport {isEmpty, compact} from 'lodash';\nimport { getDateTime, getSysDateTime, getFilter } from '../../../Helper/common';\n\n\n//Get Locations & Zones\nexport function* getLocations(action){\n    try {\n        let url                 =   '';\n        let statesLocalStorage  =   JSON.parse(localStorage.getItem('states') || '[]');\n        let states              =   statesLocalStorage.map(item => item.id);\n        url                     =   `location/all`;\n        const res   =   yield all([\n                                        call(callApi, 'GET', url),\n                                        call(callApiV2, 'POST', 'location/zones', {\"state\":states})\n                                    ]);\n\n        \n        if(res) {\n            let payload     =   res[0];\n            let zone        =   res[1];\n\n            // check for error    \n            if(payload.data.error){\n                yield put(dashboardAction.listenGetLocationsError());\n            }\n    \n            // handle success result\n            if(payload.data.result){\n                let zoneList    =   {};\n                let taskType    =   '';\n                let pharmacy    =   false;\n                let locations   =   [];\n                let stores      =   [];\n                let result      =   payload.data.result;\n                let user        =   payload.data.user;\n                if(user.user_type === 'pharmacy') {\n                    taskType    =   \"pharmacy\";\n                    pharmacy    =   true;\n                } else if(user.user_type === 'general'){\n                    taskType    =   \"general\";\n                    pharmacy    =   false;\n                } else { \n                    taskType    =   \"admin\";\n                    pharmacy    =   false;\n                }\n                result.map((v, k) => {\n                    locations[k] = {\n                        id      :   v.id,\n                        value   :   k,\n                        label   :   v.address,\n                        data    :   v\n                    };\t\n                    if(v.store !== '' && v.store !== null) {\n                        stores[k] = {\n                            id      :   v.id,\n                            zone_id :   v.zone_id,\n                            value   :   k,\n                            label   :   v.store,\n                            data    :   v\n                        };\n                    }\n                });\n                stores          =   compact(stores);\n                locations       =   compact(locations);\n\n                if(!!zone.data) {\n                    zoneList            =   zone.data || {};\n                }\n\n                yield put(dashboardAction.listenGetLocationsSuccess({\n                    taskType: taskType,\n                    pharmacy: pharmacy,\n                    locations: locations,\n                    stores: stores,\n                    zones: zoneList\n                }));\n            }\n        }\n    } catch (e) {\n        notifyerror(e);\n        console.log(e.message);\n    }\n}\n\n\n//Get Locations & Zones\nexport function* getTaskDetails(action){\n    try {\n        let url                 =   '';\n        url                     =   `tasks/${action.data.uuid}`;\n        const payload               =   yield call(callApiV2, 'GET', url);       \n\n        // check for error    \n        if(payload.data.error){\n            yield put(dashboardAction.listenGetTaskDetailsError());\n        }\n\n        // handle success result\n        if(payload.data){ \n            yield put(dashboardAction.listenGetTaskDetailsSuccess(payload.data));\n        }\n    } catch (e) {\n        notifyerror(e.message);\n        console.log(e.message);\n    }\n}\n\n//Get Track Details\nexport function* getTrackDetails(action){\n    try {\n        let url                 =   '';\n        url                     =   `tasks/${action.data.uuid}`;\n        const payload               =   yield call(callOnFleetApi, 'GET', url);       \n\n        // check for error    \n        if(payload.data.error){\n            //yield put(dashboardAction.listenGetTaskDetailsError());\n        }\n\n        // handle success result\n        if(payload.data){\n            //yield put(dashboardAction.listenGetTaskDetailsSuccess(payload.data));\n        }\n    } catch (e) {\n        notifyerror(e.message);\n        console.log(e.message);\n    }\n}\n\n//Create Task\nexport function* createTask(action){\n    try {\n        let url             =   '';\n        url                 =   `tasks`;\n        const payload       =   yield call(callApi, 'POST', url, action.data);\n\n        // check for error\n        if(payload.data.error){\n            console.log(payload.data.error);\n            yield put(dashboardAction.listenCreateTaskError());\n        }\n\n        // handle success result\n        if(payload.data){           \n            notifysuccess({message: 'Task has been created successfully'});    \n            yield put(dashboardAction.listenCreateTaskSuccess({}));\n        }\n    } catch (e) {\n        notifyerror(e.message);\n        console.log(e.message);\n    }\n}\n\n//Delete Task\nexport function* deleteTask(action){\n    try {\n        let url             =   '';\n        url                 =   `tasks/${action.data.uuid}`;\n        let data            =   {\"timestamp\":moment().format('X')}\n        const payload       =   yield call(callApi, 'DELETE', url, data);  \n\n        // check for error\n        if(payload.data.error){\n            yield put(dashboardAction.listenDeleteTaskError());\n        }\n\n        // handle success result\n        if(payload.data){           \n            notifysuccess({message: 'Task deleted successfully'});\n            yield put(dashboardAction.listenDeleteTaskSuccess({}));\n        }\n    } catch (e) {\n        notifyerror(e.message);\n        console.log(e.message);\n    }\n}\n\n//Update Task Status\nexport function* updateTaskStatus(action){\n    try {\n        let url             =   '';\n        url                 =   `tasks/status/${action.data.uuid}`;\n        let data            =   {orderStatus:{status:action.data.status}};\n        const payload       =   yield call(callApi, 'PUT', url, data);  \n\n        // check for error\n        if(payload.data.error){\n            yield put(dashboardAction.listenUpdateTaskStatusError());\n        }\n\n        // handle success result\n        if(payload.data){\n            notifysuccess({message: 'Task status updated successfully'});           \n            yield put(dashboardAction.listenUpdateTaskStatusSuccess({}));\n        }\n    } catch (e) {\n        notifyerror(e.message);\n        console.log(e.message);\n    }\n}\n\n//Edit Task\nexport function* editTask(action){\n    try {\n        let url             =   '';\n        url                 =   `tasks/${action.data.uuid}`;\n        let data            =   {...action.data.params};\n        const payload       =   yield call(callApi, 'PUT', url, data);  \n\n        // check for error\n        if(payload.data.error){\n            yield put(dashboardAction.listenEditTaskError());\n        }\n\n        // handle success result\n        if(payload.data){\n            //console.log('Success : ', payload.data);\n            notifysuccess({message: 'Task updated successfully'});           \n            yield put(dashboardAction.listenEditTaskSuccess({}));\n        }\n    } catch (e) {\n        //console.log('Catch : ', e, e.response, e.response.data, e.message.cause);\n        if(e.response && !!e.response.data) {\n            notifyerror({message: e.response.data.message.cause});\n        } else {\n            notifyerror({message: e.message});\n        }\n        console.log(e.message);\n    }\n}\n\n//Get Search\nexport function* search(action){\n    try {\n        let url                 =   '';\n        url                     =   `tasks/search`;\n        let data                =   {\n            userType    :   action.data.user_type,\n            valueOne    :   action.data.type,\n            valueTwo    :   action.data.value\n        }\n        if(!!action.data.dateType) {\n            data.dateType        =   action.data.dateType;\n        }\n        const payload            =   yield call(callApiV2, 'POST', url, data);\n\n        // check for error    \n        if(payload.data.error){\n            yield put(dashboardAction.listenSearchError());\n        }\n\n        // handle success result\n        if(payload.data.result){\n            let result = payload.data.result;\n            let tasks = {};\n            if(result.tasks.length > 0) {\n                result.tasks.map((val, key) => {\n                    let recipient_sig   =   false;                    \n                    let track_driver    =   '';\n                    let current_url     =   '';\n                    let tskStatus       =   'Scheduled';\n                    if(val.tskStatus === 'tsk_proc_hld') {\n                        tskStatus       =   'Scheduled'\n                    } else if(val.tskStatus === 'tsk_proc_mrchnt') {\n                        tskStatus       =   'Scheduled'\n                    } else if(val.tskStatus === 'tsk_proc_drv' && val.driverStatus === 'drv_strt_recpnt_tsk') {\n                        tskStatus       =   'Picked Up';\n                    } else if(val.tskStatus === 'tsk_proc_drv') {\n                        tskStatus       =   'Processing'\n                    } else if(val.tskStatus === 'tsk_cmp') {\n                        tskStatus       =   'Completed'\n                    } else if(val.tskStatus === 'tsk_cncling') {\n                        tskStatus       =   'Deleted'\n                    } else if(val.tskStatus === 'tsk_cncled') {\n                        tskStatus       =   'Deleted'\n                    }\n                    let dt              =   val.timeCreated.split('T');\n                    let d               =   dt[0].split('-');\n                    let created_at      =   d[1]+'/'+d[2]+'/'+d[0]; \n                    \n                    let completeafter   =   '';\n                    let completebefore  =   '';\n                    \n                    if(val.timezone !== '') {\n                        completeafter   =   getDateTime(parseInt(val.completeAfter) * 1000, val.timezone, 'MM/DD · hh:mma');\n                        completebefore  =   getDateTime(parseInt(val.completeBefore) * 1000, val.timezone, 'hh:mma');\n                    } else {\n                    completeafter       =   getSysDateTime(parseInt(val.completeAfter) * 1000, 'MM/DD · hh:mma');\n                    completebefore      =   getSysDateTime(parseInt(val.completeBefore) * 1000, 'hh:mma');\n                    }\n                    if(!isEmpty(val.completionDetails.events) && \n                        !!val.completionDetails.events.onflt_recpnt_sig) {\n                        recipient_sig   =   true;\n                    }\n                    if(!isEmpty(val.completionDetails.events) && \n                        !!val.completionDetails.events.onflt_recpnt_sig) {\n                        recipient_sig   =   true;\n                    }\n\n                    if(!!val.pickup_onfleet_url) {\n                        track_driver    =   'Driver to Merchant';\n                        current_url     =   val.pickup_onfleet_url;\n                    }\n                    \n                    if(!!val.drop_onfleet_url) {\n                        track_driver    =   'Driver to Recipient';\n                        current_url     =   val.drop_onfleet_url;\n                    }\n\n                    if(!!!tasks[val.state_code]) {\n                        tasks[val.state_code]   =   {};\n                        tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]   =   {\n                            name        :   val.mkt_ofc_cty_del_zne_name,\n                            id          :   val.state_code+val.mkt_ofc_cty_del_zne_id,\n                            orders      :   []\n                        };\n                    } else {\n                        if(!!!tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]) {\n                            tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]   =   {\n                                name        :   val.mkt_ofc_cty_del_zne_name,\n                                id          :   val.state_code+val.mkt_ofc_cty_del_zne_id,\n                                orders      :   []\n                            };\n                        }\n                    }\n                    \n                    tasks[val.state_code][val.mkt_ofc_cty_del_zne_id].orders.push({\n                        created_at              :   created_at,\n                        complete_after          :   completeafter,\n                        complete_before         :   completebefore,\n                        recpnt_address          :   val.recipients.address,\n                        mrchnt_address          :   val.merchant.address,\n                        mrchnt_notes            :   val.merchant.notes,\n                        recpnt_notes            :   val.recipients.notes,\n                        tsk_status              :   tskStatus,\n                        uuid                    :   val.uuid,\n                        order_number            :   val.orderNumber,\n                        driver_name             :   val.driver_name,\n                        recipient_sig           :   recipient_sig,\n                        timezone                :   val.timezone,\n                        mrchnt_location         :   val.merchant.location,\n                        recpnt_location         :   val.recipients.location,\n                        drop_onfleet_url        :   val.drop_onfleet_url || '',\n                        pickup_onfleet_url      :   val.pickup_onfleet_url || '',\n                        track_driver            :   track_driver,\n                        current_url             :   current_url,\n                        tip                     :   val.tip,\n                        state_code              :   val.state_code,\n                        mkt_ofc_cty_del_zne_id  :   val.mkt_ofc_cty_del_zne_id\n                    });\n                });\n            }\n            let temp                        =   {};\n            _.each(tasks, (val, key) => {\n                _.each(val, (vz, kz) => {\n                    tasks[key][kz].orders   =   _.sortBy(tasks[key][kz].orders, (o) => { return o.timestamp; })\n                });\n                temp[key]                   =   _.sortBy(tasks[key], (o) => { return o.name; })\n            });\n            tasks                           =   temp;\n            yield put(dashboardAction.listenSearchSuccess({count: result.tasks.length, tasks: tasks}));\n        }\n    } catch (e) {\n        notifyerror(e.message);\n        console.log(e.message);\n    }\n}\n\n//Update filter\nexport function* updateFilter(action){\n    try {\n        let url                 =   '';\n        url                     =   `tasks/filter`;\n        let data                =   {\n            filter: {\n                key : 'dashboard',\n                value : JSON.stringify(action.data)\n            }\n        }\n        yield put(headerAction.syncFilter({\n            key : 'dashboard',\n            value : action.data\n        }));\n        const payload            =   yield call(callApiV2, 'POST', url, data);\n\n        // check for error    \n        if(payload.data.error){\n            //yield put(dashboardAction.listenSearchError());\n        }\n\n        // handle success result\n        if(payload.data){\n            //console.log('Filtered Saved')\n            let filterData      =  action.data || {};\n            let filterKeys      =  filterData.filterKeys || {};\n            let data            =\t{\n                user_type\t\t:\tfilterData.type,\n                type            :   'default'\n            }\n            if(!isEmpty(filterKeys)) {   \n                if(filterKeys.Store.length === 0 && filterKeys.Area.length === 0 && filterKeys.State.length > 0) {\n                    let states           =  (filterKeys.State || []).map(item => {\n                    //return {state: item.value, zone_id: []};\n                    return item.value;\n                    });\n                    if(states.length > 0){\n                        data\t\t\t=\t{\n                            type\t\t:\t'state',\n                            state\t\t:\tstates\n                        }\n                    //value_one         =  'state';\n                    //value_two         =  states;\n                    }\n                }\n        \n                if(filterKeys.Store.length === 0 && filterKeys.Area.length > 0) {         \n                    let zones           =  [];\n                    (filterKeys.Area || []).map((item) => {\n                    let index\t\t=\tzones.findIndex((z) => z.state === item.state);\n                    //console.log(filterKeys.Area, index);\n                    if(index > -1){\n                        zones[index].zone_id.push(item.id)\n                    } else {\n                        zones.push({\n                            state: item.state,\n                            zone_id : [item.id]\n                        })\n                    }\n                    });\n\n                    if(zones.length > 0){\n                    data\t\t\t=\t{\n                        type\t\t:\t'place',\n                        place\t\t:\tzones\n                    }\n                    //type         \t\t=  'place';\n                    //place         \t=  zones; \n                    \n                    }\n                }\n        \n                if(filterKeys.Store.length > 0) {\n                    let store            =  [];\n                    (filterKeys.Store || []).forEach(item => {\n                    store.push(item.store_id.toString());\n                    })\n                    if(store.length > 0){\n                    data\t\t\t=\t{\n                        type\t\t:\t'store',\n                        store_id\t:\tstore\n                    }\n                    //type         \t\t=  'store';\n                    //store_id         \t=  store;\n                    }\n                }\n                data.user_type\t\t=\tfilterData.type;\n                if(!!!data.type) {\n                    data.type      =  'default';\n                }\n            }\n            yield put(dashboardAction.getShoppedLate(data));\n        }\n    } catch (e) {\n        notifyerror(e);\n        console.log(e.message);\n    }\n}\n\n\n\n//Get Search\nexport function* getShoppedLate(action){\n    try {\n        let url                 =   '';\n        url                     =   `tasks/summary`;\n        const payload            =   yield call(callApiV2, 'POST', url, action.data);\n\n        // check for error    \n        if(payload.data.error){\n            yield put(dashboardAction.listenShoppedLateError());\n        }\n\n        // handle success result\n        if(payload.data.result){\n            let result                  =   payload.data.result || [];\n            let shoppedLateSummary      =   {};\n            if(result.length > 0) {\n                if(action.data.type === 'default') {\n                    shoppedLateSummary      =   {...result[0]};\n                }\n                if(action.data.type === 'state') {\n                    let states          =   {};\n                    result.map(item => {\n                        states[item.state_code]     =   {\n                            shopped_late:   item.shopped_late,\n                            shopping_late_percent: item.shopping_late_percent,\n                            total_orders: item.total_orders\n                        }\n                    })\n                    shoppedLateSummary      =   {...states};\n                }\n                if(action.data.type === 'place') {\n                    let zones          =   {};\n                    result.map(item => {\n                        if(!!zones[item.state_code]) {                            \n                            zones[item.state_code][item.mkt_ofc_cty_del_zne_id]     =   {\n                                shopped_late:   item.shopped_late,\n                                shopping_late_percent: item.shopping_late_percent,\n                                total_orders: item.total_orders\n                            }\n                        } else {\n                            zones[item.state_code]   =   {};\n                            zones[item.state_code][item.mkt_ofc_cty_del_zne_id]     =   {\n                                shopped_late:   item.shopped_late,\n                                shopping_late_percent: item.shopping_late_percent,\n                                total_orders: item.total_orders\n                            }\n                        }\n                    })\n                    shoppedLateSummary      =   {...zones};\n                }\n                if(action.data.type === 'store') {\n                    let store          =   {};\n                    result.map(item => {\n                        store[item.store_id]     =   {\n                            shopped_late:   item.shopped_late,\n                            shopping_late_percent: item.shopping_late_percent,\n                            total_orders: item.total_orders\n                        }\n                    })\n                    shoppedLateSummary      =   {...store};\n                }\n            }\n            //console.log(shoppedLateSummary);\n            yield put(dashboardAction.listenShoppedLateSuccess({summary: {...shoppedLateSummary}, type: action.data.type}));\n        }\n    } catch (e) {\n        notifyerror(e.message);\n        console.log(e.message);\n    }\n}\n\nexport function* watchDashboardStore() {\n    try{\n        yield takeEvery( dashboardConstant.GET_TRACK_DETAILS, getTrackDetails );\n        yield takeEvery( dashboardConstant.GET_TASK_DETAILS, getTaskDetails );\n        yield takeEvery( dashboardConstant.GET_LOCATIONS, getLocations );\n        yield takeEvery( dashboardConstant.DELETE_TASK, deleteTask );\n        yield takeEvery( dashboardConstant.UPDATE_TASK_STATUS, updateTaskStatus );\n        yield takeEvery( dashboardConstant.CREATE_TASK, createTask );\n        yield takeEvery( dashboardConstant.EDIT_TASK, editTask );\n        yield takeEvery( dashboardConstant.TASK_SEARCH, search );\n        yield takeEvery( dashboardConstant.UPDATE_FILTER, updateFilter );\n        yield takeEvery( dashboardConstant.GET_SHOPPEDLATE, getShoppedLate );\n    } catch(e){\n        console.log(e)\n    }\n}"]},"metadata":{},"sourceType":"module"}