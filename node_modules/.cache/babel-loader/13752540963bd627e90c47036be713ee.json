{"ast":null,"code":"import _objectSpread from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/biplab/Desktop/foodjets/src/containers/Feedbacks/feedback.js\";\nimport React from 'react';\nimport List from './list';\nimport lodash from 'lodash';\nimport moment from 'moment-timezone';\nimport { isEqual, isEmpty } from 'lodash';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { PropTypes as PT } from 'prop-types';\nimport FeedbackFilter from './feedbackFilter';\nimport { withRouter } from 'react-router-dom';\nimport { setFilter, getFilter, clearFilter } from '../../Helper/common';\n\nvar FeedbackComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(FeedbackComponent, _React$Component);\n\n  var _super = _createSuper(FeedbackComponent);\n\n  function FeedbackComponent(props) {\n    var _this;\n\n    _classCallCheck(this, FeedbackComponent);\n\n    _this = _super.call(this, props);\n    /* let filter = getFilter('FeedBack');\n    let endDate = moment().format('YYYY-MM-DD');\n    let startDate = moment().subtract(1, 'days').format('YYYY-MM-DD'); */\n\n    _this.state = {\n      sOpen: false,\n      aOpen: false,\n      stOpen: false,\n      //type: (filter && filter.type)?filter.type:'general',\n      allRatings: true,\n      //endDate: endDate,\n      filterByStart: [],\n      advSearchData: {},\n      showSearch: false,\n      //selectedState: null,\n      //selectedArea: null,\n      //selectedStore: null,\n      //startDate: startDate,\n      filteredFeedbackData: [] //filterKeys: !isEmpty(filter)?filter.filterKeys:{ State:[], Area: [], Store: [] },\n      //noofdays: ''\n\n    };\n    _this.searchFilter = _this.searchFilter.bind(_assertThisInitialized(_this)); //this.handleTypeChange = this.handleTypeChange.bind(this);\n\n    return _this;\n  }\n\n  _createClass(FeedbackComponent, [{\n    key: \"searchFilter\",\n\n    /* handleTypeChange(type) {\n    \tlet makeSummeryFilterObj =  {...this.state.makeSummeryFilterObj};\n    \tlet makeFeedbackFilterObj =  {...this.state.makeFeedbackFilterObj};\n    \t\tmakeFeedbackFilterObj.page = 1;\n    \tthis.setState({ \n    \t\ttype: type, \n    \t\tallRatings: true, \n    \t\tfilterByStart: [], \n    \t\tmakeFeedbackFilterObj: makeFeedbackFilterObj\n    \t}, ()=>{\n    \t\tthis.updateFeedbackSummery();\n    \t\tthis.updateFeedbackList();\n    \t\t\tif(!isEmpty(this.state.advSearchData)){\n    \t\t\tthis.props.feedbackSearch({ ...this.state.advSearchData, user_type: type });\n    \t\t}\n    \t});\n          \tsetFilter('FeedBack', { makeFeedbackFilterObj: makeFeedbackFilterObj, makeSummeryFilterObj: makeSummeryFilterObj, user_type:this.props.userType, type: type, filterKeys: this.state.filterKeys || {}});\n    }; */\n    value: function searchFilter(searchData) {\n      var _this2 = this;\n\n      this.setState({\n        advSearchData: searchData\n      }, function () {\n        //this.props.feedbackSearch({ ...searchData, user_type: this.state.type });\n        _this2.props.feedbackSearch(_objectSpread({}, searchData));\n      });\n    }\n  }, {\n    key: \"handleCheckboxFilter\",\n    value: function handleCheckboxFilter(event, type) {\n      var _this3 = this;\n\n      event.persist();\n\n      if (event.target.checked && event.target.value === \"all\") {\n        this.setState({\n          allRatings: true,\n          filterByStart: [],\n          filteredFeedbackData: this.props.feedbackData\n        });\n      } else {\n        this.setState({\n          allRatings: false\n        });\n\n        if (event.target.value !== \"all\") {\n          var filterByStart = this.state.filterByStart || {};\n          var selIndex = filterByStart.findIndex(function (item) {\n            return item === event.target.value;\n          });\n\n          if (selIndex === -1) {\n            filterByStart.push(event.target.value);\n          } else {\n            filterByStart.splice(selIndex, 1);\n          }\n\n          this.setState({\n            filterByStart: filterByStart\n          }, function () {\n            var sortedArray = lodash.filter(_this3.props.feedbackData ? _this3.props.feedbackData : [], function (v) {\n              return lodash.includes(filterByStart, v.rating);\n            });\n\n            _this3.setState({\n              filteredFeedbackData: sortedArray\n            });\n          });\n        } else {\n          this.setState({\n            filterByStart: [],\n            filteredFeedbackData: this.props.feedbackData\n          });\n        }\n      }\n\n      if (this.state.filterByStart.length === 0) {\n        this.setState({\n          allRatings: true,\n          filterByStart: [],\n          filteredFeedbackData: []\n        }, function () {\n          _this3.setState({\n            filteredFeedbackData: _this3.props.feedbackData\n          });\n        });\n      }\n    }\n  }, {\n    key: \"changePage\",\n    value: function changePage(data) {\n      var currentPage = data.currentPage;\n\n      var savedFilterData = _objectSpread({}, this.props.savedFilterData);\n\n      var makeFeedbackFilterObj = savedFilterData.makeFeedbackFilterObj; //console.log('Api Data From Change Page : ', makeFeedbackFilterObj.page, currentPage, makeFeedbackFilterObj.page !== currentPage);\n\n      if (makeFeedbackFilterObj.page !== currentPage) {\n        makeFeedbackFilterObj.page = currentPage;\n\n        var _data = _objectSpread(_objectSpread({}, makeFeedbackFilterObj), {}, {\n          filter: savedFilterData\n        });\n\n        this.props.getFeedback(_data);\n      }\n      /* this.setState({ makeFeedbackFilterObj: makeFeedbackFilterObj, allRatings: true, filterByStart: []  }, ()=> {\n      \tthis.updateFeedbackList();\n      }); */\n\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      //console.log(props.locations)\n\n      /* if(!!props.userType && !isEqual(this.props.userType, props.userType)) {\n       \tlet filterKeys = this.state.filterKeys;\n      \tlet type = (props.userType === 'admin') ? 'general' : props.userType;\n      \t\tif(!!props.userType){\n      \t\tlet filter = getFilter('FeedBack');\n      \t\tif(!isEmpty(filter) && filter.user_type === props.userType) {\n      \t\t\ttype       = filter.type;\n      \t\t\tfilterKeys = filter.filterKeys;\n      \t\t} else {\n      \t\t\tclearFilter('FeedBack');\n      \t\t}\n      \t};\n      \t\tthis.setState({ type: type, filterKeys: filterKeys });\n      };\n      \tthis.setState({ filteredFeedbackData: props.feedbackData, feedBackCount: props.feedBackCount }); */\n      this.setState({\n        filteredFeedbackData: props.feedbackData,\n        feedBackCount: props.feedBackCount\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.getLocations();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {//this.props.getLocations();\n\n      /* let filterKeys = this.state.filterKeys;\n      let type = (this.props.userType === 'admin') ? 'general' : this.props.userType;\n      if(!!this.props.userType){\n      let filter = getFilter('FeedBack');\n      if(!isEmpty(filter) && filter.user_type === this.props.userType) {\n      \ttype        =  filter.type;\n      \tfilterKeys  =  filter.filterKeys;\n      } else {\n      \tclearFilter('FeedBack');\n      }\n      };\n      this.setState({ filteredFeedbackData: this.props.feedbackData, feedBackCount: this.props.feedBackCount, type: type, filterKeys: filterKeys });\n      this.updateFeedbackSummery();\n      this.updateFeedbackList(); */\n      //this.setState({ filteredFeedbackData: props.feedbackData, feedBackCount: props.feedBackCount });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          type = _this$state.type,\n          makeFilterObj = _this$state.makeFilterObj,\n          filterKeys = _this$state.filterKeys,\n          startDate = _this$state.startDate,\n          endDate = _this$state.endDate,\n          noofdays = _this$state.noofdays,\n          allRatings = _this$state.allRatings,\n          filterByStart = _this$state.filterByStart,\n          filteredFeedbackData = _this$state.filteredFeedbackData,\n          feedBackCount = _this$state.feedBackCount;\n      var locationData = this.props.locations || {};\n      var stores = locationData.stores || [];\n      var zones = locationData.zones || {};\n      var userType = this.props.userType || {};\n      var settingsData = this.props.settingsData || {}; //console.log('Filter Loaded : ', this.props.isFilterLoaded && !isEmpty(this.props.locations));\n\n      return /*#__PURE__*/React.createElement(\"main\", {\n        className: \"dash right_sec feedP\".concat(userType !== 'admin' ? ' noAdmin' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 4\n        }\n      }, this.props.isFilterLoaded && !isEmpty(this.props.locations) ? /*#__PURE__*/React.createElement(FeedbackFilter, {\n        userType: this.props.userType //type={type}\n        ,\n        area: zones,\n        stores: stores //endDate={endDate}\n        //startDate={startDate}\n        //noofdays={noofdays}\n        //filterKeys={filterKeys} \n        ,\n        reply: this.props.reply,\n        feedBackCount: feedBackCount,\n        searchFilter: this.searchFilter,\n        isReplying: this.props.isReplying,\n        replyResult: this.props.replyResult,\n        isSearching: this.props.isSearching,\n        filteredList: this.props.filteredList,\n        getFeedback: this.props.getFeedback,\n        getSummary: this.props.getSummary,\n        savedFilterData: this.props.savedFilterData\n        /* handleTypeChange={this.handleTypeChange}\t\t\t\t\n        onDateRange = {this.onDateRange.bind(this)}\t\n        onSelectEndDate = {this.onSelectEndDate.bind(this)} */\n        ,\n        searchResultList: this.props.searchResultList || []\n        /* handleAreaChange = {this.handleAreaChange.bind(this)}\t\t\t\t\n        handleStateChange = {this.handleStateChange.bind(this)}\n        handleStoreChange = {this.handleStoreChange.bind(this)}\n        onSelectStartDate = {this.onSelectStartDate.bind(this)}\t\n        handleRemoveFilter = {this.handleRemoveFilter.bind(this)} */\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 6\n        }\n      }) : null, /*#__PURE__*/React.createElement(List, {\n        type: type,\n        endDate: endDate,\n        startDate: startDate,\n        allRatings: allRatings,\n        reply: this.props.reply,\n        filterByStart: filterByStart,\n        feedBackCount: feedBackCount,\n        isLoading: this.props.isLoading,\n        isReplying: this.props.isReplying,\n        replyResult: this.props.replyResult,\n        isFiltering: this.props.isFiltering,\n        changePage: this.changePage.bind(this),\n        filteredFeedbackData: filteredFeedbackData || [],\n        feedbackSummeryData: this.props.feedbackSummeryData || {},\n        handleCheckboxFilter: this.handleCheckboxFilter.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 14\n        }\n      }));\n    }\n  }]);\n\n  return FeedbackComponent;\n}(React.Component);\n\nFeedbackComponent.propTypes = {\n  reply: PT.func,\n  isLoading: PT.bool,\n  isFiltering: PT.bool,\n  isSearching: PT.bool,\n  getFeedback: PT.func,\n  getSummary: PT.func,\n  getLocations: PT.func,\n  locations: PT.object,\n  feedbackData: PT.array,\n  feedBackCount: PT.number,\n  feedbackSearch: PT.func,\n  isReplying: PT.bool,\n  replyResult: PT.object,\n  feedbackSummeryData: PT.object\n};\nFeedbackComponent.defaultProps = {\n  feedbackData: [],\n  feedBackCount: 0,\n  replyResult: {},\n  searchResultList: [],\n  feedbackSummeryData: {}\n};\n;\nexport default withRouter(FeedbackComponent);","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/Feedbacks/feedback.js"],"names":["React","List","lodash","moment","isEqual","isEmpty","PropTypes","PT","FeedbackFilter","withRouter","setFilter","getFilter","clearFilter","FeedbackComponent","props","state","sOpen","aOpen","stOpen","allRatings","filterByStart","advSearchData","showSearch","filteredFeedbackData","searchFilter","bind","searchData","setState","feedbackSearch","event","type","persist","target","checked","value","feedbackData","selIndex","findIndex","item","push","splice","sortedArray","filter","v","includes","rating","length","data","currentPage","savedFilterData","makeFeedbackFilterObj","page","getFeedback","feedBackCount","getLocations","makeFilterObj","filterKeys","startDate","endDate","noofdays","locationData","locations","stores","zones","userType","settingsData","isFilterLoaded","reply","isReplying","replyResult","isSearching","filteredList","getSummary","searchResultList","isLoading","isFiltering","changePage","feedbackSummeryData","handleCheckboxFilter","Component","propTypes","func","bool","object","array","number","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport List from './list';\nimport lodash from 'lodash';\nimport moment from 'moment-timezone';\nimport { isEqual, isEmpty } from 'lodash';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { PropTypes as PT } from 'prop-types';\nimport FeedbackFilter from './feedbackFilter';\nimport { withRouter } from 'react-router-dom';\nimport {setFilter, getFilter, clearFilter} from '../../Helper/common';\n\nclass FeedbackComponent extends React.Component {\n\tstatic propTypes = {\n\t\treply: PT.func,\n\t\tisLoading: PT.bool,\n\t\tisFiltering: PT.bool,\n\t\tisSearching: PT.bool,\n\t\tgetFeedback: PT.func,\n\t\tgetSummary: PT.func,\n\t\tgetLocations: PT.func,\n\t\tlocations: PT.object,\n\t\tfeedbackData: PT.array,\n\t\tfeedBackCount: PT.number,\n\t\tfeedbackSearch: PT.func,\n\t\tisReplying: PT.bool,\n\t\treplyResult: PT.object,\n\t\tfeedbackSummeryData: PT.object\n\t};\n\n\tstatic defaultProps = {\n\t\tfeedbackData: [],\n\t\tfeedBackCount: 0,\n\t\treplyResult: {},\n\t\tsearchResultList:  [],\n\t\tfeedbackSummeryData:  {}\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t/* let filter = getFilter('FeedBack');\n\t\tlet endDate = moment().format('YYYY-MM-DD');\n\t\tlet startDate = moment().subtract(1, 'days').format('YYYY-MM-DD'); */\n\n\t\tthis.state = {\t\n\t\t\tsOpen: false,\n\t\t\taOpen: false,\n\t\t\tstOpen: false,\t\n\t\t\t//type: (filter && filter.type)?filter.type:'general',\n\t\t\tallRatings: true, \n\t\t\t//endDate: endDate,\n          \tfilterByStart: [], \n          \tadvSearchData: {},\n\t\t\tshowSearch: false,\t\t\n\t\t \t//selectedState: null,\n\t\t \t//selectedArea: null,\n          \t//selectedStore: null,\n\t\t\t//startDate: startDate,\n\t\t\tfilteredFeedbackData: [],\n\t\t\t//filterKeys: !isEmpty(filter)?filter.filterKeys:{ State:[], Area: [], Store: [] },\n\t\t\t//noofdays: ''\n\t\t}; \n\n\t\tthis.searchFilter = this.searchFilter.bind(this);\n\t  \t//this.handleTypeChange = this.handleTypeChange.bind(this);\n\t};\n\n\t/* handleTypeChange(type) {\n\t\tlet makeSummeryFilterObj =  {...this.state.makeSummeryFilterObj};\n\t\tlet makeFeedbackFilterObj =  {...this.state.makeFeedbackFilterObj};\n\n\t\tmakeFeedbackFilterObj.page = 1;\n\t\tthis.setState({ \n\t\t\ttype: type, \n\t\t\tallRatings: true, \n\t\t\tfilterByStart: [], \n\t\t\tmakeFeedbackFilterObj: makeFeedbackFilterObj\n\t\t}, ()=>{\n\t\t\tthis.updateFeedbackSummery();\n\t\t\tthis.updateFeedbackList();\n\n\t\t\tif(!isEmpty(this.state.advSearchData)){\n\t\t\t\tthis.props.feedbackSearch({ ...this.state.advSearchData, user_type: type });\n\t\t\t}\n\t\t});\n\n      \tsetFilter('FeedBack', { makeFeedbackFilterObj: makeFeedbackFilterObj, makeSummeryFilterObj: makeSummeryFilterObj, user_type:this.props.userType, type: type, filterKeys: this.state.filterKeys || {}});\n\t}; */\n\n\tsearchFilter (searchData) {\n\t\tthis.setState({ advSearchData: searchData }, ()=> {\n\t\t\t//this.props.feedbackSearch({ ...searchData, user_type: this.state.type });\n\t\t\tthis.props.feedbackSearch({ ...searchData });\n\t\t});\n   \t};\n\n\thandleCheckboxFilter(event, type){\n\t\tevent.persist();\n\n\t\tif(event.target.checked && (event.target.value === \"all\")){\n\t\t\tthis.setState({ allRatings: true, filterByStart: [], filteredFeedbackData: this.props.feedbackData});\n\t\t} else {\n\t\t\tthis.setState({ allRatings: false });\n\n\t\t\tif(event.target.value !== \"all\") {\t\n\t\t\t\tlet filterByStart = this.state.filterByStart || {};\n\t\t\t\tlet selIndex = filterByStart.findIndex((item) => {\n\t\t\t\t\treturn item === event.target.value;\n\t\t\t\t});\n\n\t\t\t\tif(selIndex === -1) {\n\t\t\t\t\tfilterByStart.push(event.target.value);\n\t\t\t\t} else {\n\t\t\t\t\tfilterByStart.splice(selIndex, 1);\n\t\t\t\t}\n\n\t\t\t\tthis.setState({ filterByStart: filterByStart }, ()=> {\n\t\t\t\t\tlet sortedArray = lodash.filter((this.props.feedbackData)?this.props.feedbackData:[], (v) => lodash.includes(filterByStart, v.rating));\t\n\n\t\t\t\t\tthis.setState({ filteredFeedbackData: sortedArray });\n\t\t\t\t});\t\n\t\t\t} else {\t\n\t\t\t\tthis.setState({ filterByStart: [], filteredFeedbackData: this.props.feedbackData});\n\t\t\t}\n\t\t}\n\n\t\tif(this.state.filterByStart.length === 0){\n\t\t\tthis.setState({ allRatings: true, filterByStart: [], filteredFeedbackData: []}, ()=> {\n\t\t\t\tthis.setState({ filteredFeedbackData: this.props.feedbackData });\t\t\t\t\n\t\t\t});\n\t\t}\t\t\n\t};\n\n\tchangePage(data){\n\t\tconst { currentPage } =\tdata;\n\t\tlet savedFilterData\t\t\t=\t{...this.props.savedFilterData};\n\t\tlet makeFeedbackFilterObj\t=\tsavedFilterData.makeFeedbackFilterObj;\n\t\t//console.log('Api Data From Change Page : ', makeFeedbackFilterObj.page, currentPage, makeFeedbackFilterObj.page !== currentPage);\n\t\tif(makeFeedbackFilterObj.page !== currentPage) {\n\t\t\tmakeFeedbackFilterObj.page = currentPage;\n\t\t\tlet data\t=\t{\n\t\t\t\t...makeFeedbackFilterObj,\n\t\t\t\tfilter: savedFilterData\n\t\t\t}\n\t\t\tthis.props.getFeedback(data);\n\t\t}\n\t\t/* this.setState({ makeFeedbackFilterObj: makeFeedbackFilterObj, allRatings: true, filterByStart: []  }, ()=> {\n\t\t\tthis.updateFeedbackList();\n\t\t}); */\n\t};\n\n\tcomponentWillReceiveProps(props) {\n\t\t//console.log(props.locations)\n\t\t/* if(!!props.userType && !isEqual(this.props.userType, props.userType)) {\n\t\t \tlet filterKeys = this.state.filterKeys;\n\t\t\tlet type = (props.userType === 'admin') ? 'general' : props.userType;\n\n\t\t\tif(!!props.userType){\n\t\t\t\tlet filter = getFilter('FeedBack');\n\t\t\t\tif(!isEmpty(filter) && filter.user_type === props.userType) {\n\t\t\t\t\ttype       = filter.type;\n\t\t\t\t\tfilterKeys = filter.filterKeys;\n\t\t\t\t} else {\n\t\t\t\t\tclearFilter('FeedBack');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.setState({ type: type, filterKeys: filterKeys });\n\t\t};\n\n\t\tthis.setState({ filteredFeedbackData: props.feedbackData, feedBackCount: props.feedBackCount }); */\n\t\tthis.setState({ filteredFeedbackData: props.feedbackData, feedBackCount: props.feedBackCount });\n\t};\n\n\tcomponentWillMount() {\t\t\n\t\tthis.props.getLocations();\n\t}\n\n\tcomponentDidMount(){\n\t\t//this.props.getLocations();\n\t \t/* let filterKeys = this.state.filterKeys;\n\t\tlet type = (this.props.userType === 'admin') ? 'general' : this.props.userType;\n\n\t\tif(!!this.props.userType){\n\t\t\tlet filter = getFilter('FeedBack');\n\t\t\tif(!isEmpty(filter) && filter.user_type === this.props.userType) {\n\t\t\t\ttype        =  filter.type;\n\t\t\t\tfilterKeys  =  filter.filterKeys;\n\t\t\t} else {\n\t\t\t\tclearFilter('FeedBack');\n\t\t\t}\n\t\t};\n\n\t\tthis.setState({ filteredFeedbackData: this.props.feedbackData, feedBackCount: this.props.feedBackCount, type: type, filterKeys: filterKeys });\n\n\t\tthis.updateFeedbackSummery();\n\t\tthis.updateFeedbackList(); */\n\t\t//this.setState({ filteredFeedbackData: props.feedbackData, feedBackCount: props.feedBackCount });\n\t};\n\n\trender() {\n\t\tconst { type, makeFilterObj, filterKeys, startDate, endDate, noofdays, allRatings, filterByStart, filteredFeedbackData, feedBackCount } = this.state;\n\t \tlet locationData = this.props.locations || {};\n\t \tlet stores = locationData.stores || [];\n\t\tlet zones = locationData.zones || {};\n\t\tlet userType = this.props.userType || {};\n\t\tlet settingsData = this.props.settingsData || {};\n\t\t//console.log('Filter Loaded : ', this.props.isFilterLoaded && !isEmpty(this.props.locations));\n\t\treturn (\n\t\t\t<main className={`dash right_sec feedP${(userType !== 'admin') ? ' noAdmin' : ''}`}>\n\t\t\t\t{\n\t\t\t\t\t(this.props.isFilterLoaded && !isEmpty(this.props.locations)) ? \n\t\t\t\t\t<FeedbackFilter \n\t\t\t\t\t\tuserType={this.props.userType}\n\t\t\t\t\t\t//type={type}\n\t\t\t\t\t\tarea={zones}\n\t\t\t\t\t\tstores={stores}\n\t\t\t\t\t\t//endDate={endDate}\n\t\t\t\t\t\t//startDate={startDate}\n\t\t\t\t\t\t//noofdays={noofdays}\n\t\t\t\t\t\t//filterKeys={filterKeys} \n\t\t\t\t\t\treply={this.props.reply}\n\t\t\t\t\t\tfeedBackCount={feedBackCount}\n\t\t\t\t\t\tsearchFilter={this.searchFilter}\n\t\t\t\t\t\tisReplying={this.props.isReplying}\n\t\t\t\t\t\treplyResult={this.props.replyResult}\n\t\t\t\t\t\tisSearching={this.props.isSearching} \n\t\t\t\t\t\tfilteredList={this.props.filteredList}\n\t\t\t\t\t\tgetFeedback={this.props.getFeedback} \n\t\t\t\t\t\tgetSummary={this.props.getSummary} \n\t\t\t\t\t\tsavedFilterData={this.props.savedFilterData}\n\t\t\t\t\t\t/* handleTypeChange={this.handleTypeChange}\t\t\t\t\n\t\t\t\t\t\tonDateRange = {this.onDateRange.bind(this)}\t\n\t\t\t\t\t\tonSelectEndDate = {this.onSelectEndDate.bind(this)} */\n\t\t\t\t\t\tsearchResultList={this.props.searchResultList || []} \n\t\t\t\t\t\t/* handleAreaChange = {this.handleAreaChange.bind(this)}\t\t\t\t\n\t\t\t\t\t\thandleStateChange = {this.handleStateChange.bind(this)}\n\t\t\t\t\t\thandleStoreChange = {this.handleStoreChange.bind(this)}\n\t\t\t\t\t\tonSelectStartDate = {this.onSelectStartDate.bind(this)}\t\n\t\t\t\t\t\thandleRemoveFilter = {this.handleRemoveFilter.bind(this)} */\n\t\t\t\t\t/> : null\n\t\t\t\t}\n\t\t\t\t\n\n\t            <List \n\t            \ttype={type}\n\t            \tendDate={endDate}\n\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\tallRatings={allRatings}\n\t\t\t\t\treply={this.props.reply}\n\t\t\t\t\tfilterByStart={filterByStart}\t\t            \n\t\t            feedBackCount={feedBackCount}\t\t\n\t\t            isLoading={this.props.isLoading} \n\t\t\t\t\tisReplying={this.props.isReplying}\n\t\t\t\t\treplyResult={this.props.replyResult}\n\t\t            isFiltering={this.props.isFiltering}   \n\t\t\t\t\tchangePage = {this.changePage.bind(this)}         \n\t\t            filteredFeedbackData={filteredFeedbackData || []} \n\t\t            feedbackSummeryData={this.props.feedbackSummeryData || {}} \n\t\t\t\t\thandleCheckboxFilter = {this.handleCheckboxFilter.bind(this)}\n\t            />  \n\t\t\t</main>\n\t\t);\n\t};\n};\n\nexport default withRouter(FeedbackComponent);"]},"metadata":{},"sourceType":"module"}