{"ast":null,"code":"import _regeneratorRuntime from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(reset_password),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchRsetPasswordStore);\n\nimport { takeEvery, put, call, takeLatest } from 'redux-saga/effects';\nimport * as resetpasswordConstant from '../constants';\nimport { error as notifyerror, success as notifysuccess } from '../../../util/notify';\nimport * as resetPasswordAction from '../actions';\nimport { callApi } from '../../../Helper/api'; //Do Login\n\nexport function reset_password(action) {\n  var url, payload, result;\n  return _regeneratorRuntime.wrap(function reset_password$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          url = '';\n          url = \"auth/reset-password\";\n          _context.next = 5;\n          return call(callApi, 'POST', url, action.data);\n\n        case 5:\n          payload = _context.sent;\n\n          if (!payload.data.error) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 9;\n          return put(resetPasswordAction.listenresetPasswordError(payload.data.error));\n\n        case 9:\n          if (!payload.data.result) {\n            _context.next = 13;\n            break;\n          }\n\n          result = payload.data.result; //notifysuccess({message: 'Login Successful'});\n\n          _context.next = 13;\n          return put(resetPasswordAction.listenresetPasswordSuccess(result));\n\n        case 13:\n          _context.next = 19;\n          break;\n\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](0);\n          notifyerror(_context.t0);\n          console.log(_context.t0.message);\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 15]]);\n}\nexport function watchRsetPasswordStore() {\n  return _regeneratorRuntime.wrap(function watchRsetPasswordStore$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return takeLatest(resetpasswordConstant.RESET_PASSWORD, reset_password);\n\n        case 3:\n          _context2.next = 8;\n          break;\n\n        case 5:\n          _context2.prev = 5;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 5]]);\n}","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/ResetPassword/Saga/index.js"],"names":["reset_password","watchRsetPasswordStore","takeEvery","put","call","takeLatest","resetpasswordConstant","error","notifyerror","success","notifysuccess","resetPasswordAction","callApi","action","url","data","payload","listenresetPasswordError","result","listenresetPasswordSuccess","console","log","message","RESET_PASSWORD"],"mappings":";;oDAOiBA,c;qDAsBAC,sB;;AA7BjB,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAO,KAAKC,qBAAZ,MAAuC,cAAvC;AACA,SAAQC,KAAK,IAAIC,WAAjB,EAA8BC,OAAO,IAAIC,aAAzC,QAA6D,sBAA7D;AACA,OAAO,KAAKC,mBAAZ,MAAqC,YAArC;AACA,SAAQC,OAAR,QAAsB,qBAAtB,C,CAEA;;AACA,OAAO,SAAUZ,cAAV,CAAyBa,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAEwB,EAFxB;AAGCA,UAAAA,GAAG,wBAAH;AAHD;AAIiB,iBAAMV,IAAI,CAACQ,OAAD,EAAU,MAAV,EAAkBE,GAAlB,EAAuBD,MAAM,CAACE,IAA9B,CAAV;;AAJjB;AAIOC,UAAAA,OAJP;;AAAA,eAMIA,OAAO,CAACD,IAAR,CAAaR,KANjB;AAAA;AAAA;AAAA;;AAAA;AAOK,iBAAMJ,GAAG,CAACQ,mBAAmB,CAACM,wBAApB,CAA6CD,OAAO,CAACD,IAAR,CAAaR,KAA1D,CAAD,CAAT;;AAPL;AAAA,eAWIS,OAAO,CAACD,IAAR,CAAaG,MAXjB;AAAA;AAAA;AAAA;;AAYSA,UAAAA,MAZT,GAYkBF,OAAO,CAACD,IAAR,CAAaG,MAZ/B,EAaK;;AAbL;AAcK,iBAAMf,GAAG,CAACQ,mBAAmB,CAACQ,0BAApB,CAA+CD,MAA/C,CAAD,CAAT;;AAdL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBCV,UAAAA,WAAW,aAAX;AACAY,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAEC,OAAd;;AAlBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBP,OAAO,SAAUrB,sBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMI,UAAU,CAAEC,qBAAqB,CAACiB,cAAxB,EAAwCvB,cAAxC,CAAhB;;AAFD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAICoB,UAAAA,OAAO,CAACC,GAAR;;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, put, call, takeLatest } from 'redux-saga/effects';\nimport * as resetpasswordConstant from '../constants';\nimport {error as notifyerror, success as notifysuccess} from '../../../util/notify';\nimport * as resetPasswordAction from '../actions';\nimport {callApi} from '../../../Helper/api';\n\n//Do Login\nexport function* reset_password(action){\n    try {\n        let url             =  '';\n        url                 =  `auth/reset-password`;\n        const payload = yield call(callApi, 'POST', url, action.data);\n        // check for error\n        if(payload.data.error){\n            yield put(resetPasswordAction.listenresetPasswordError(payload.data.error));\n        }\n\n        // handle success result\n        if(payload.data.result){\n            let result = payload.data.result;\n            //notifysuccess({message: 'Login Successful'});\n            yield put(resetPasswordAction.listenresetPasswordSuccess(result));\n        }\n    } catch (e) {\n        notifyerror(e);\n        console.log(e.message);\n    }\n}\n\nexport function* watchRsetPasswordStore() {\n    try{\n        yield takeLatest( resetpasswordConstant.RESET_PASSWORD, reset_password );\n    } catch(e){\n        console.log(e)\n    }\n}"]},"metadata":{},"sourceType":"module"}