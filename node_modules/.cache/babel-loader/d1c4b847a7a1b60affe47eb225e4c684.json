{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/biplab/Desktop/foodjets/src/containers/TaskHistory/index.js\";\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { PropTypes as PT } from 'prop-types';\nimport * as actions from './actions';\nimport * as dashboardActions from '../Dashboard/actions';\nimport * as headerActions from '../Header/actions';\nimport TaskHistory from './taskHistory';\n\nvar TaskHistoryContainer = function TaskHistoryContainer(_ref) {\n  var userData = _ref.userData,\n      getLocations = _ref.getLocations,\n      locations = _ref.locations,\n      settingsData = _ref.settingsData,\n      userType = _ref.userType,\n      isProcessing = _ref.isProcessing,\n      isError = _ref.isError,\n      isSuccess = _ref.isSuccess,\n      getHistory = _ref.getHistory,\n      taskHistory = _ref.taskHistory,\n      getTaskDetails = _ref.getTaskDetails,\n      taskDetails = _ref.taskDetails,\n      deleteTask = _ref.deleteTask,\n      editTask = _ref.editTask,\n      updateTaskStatus = _ref.updateTaskStatus,\n      getTrackDetails = _ref.getTrackDetails,\n      search = _ref.search,\n      resetSearch = _ref.resetSearch,\n      filteredList = _ref.filteredList,\n      exportTaskCsv = _ref.exportTaskCsv,\n      csvUrl = _ref.csvUrl,\n      isTaskCsvExporting = _ref.isTaskCsvExporting,\n      getSettings = _ref.getSettings,\n      filterData = _ref.filterData,\n      isFilterLoaded = _ref.isFilterLoaded,\n      isEditTaskProcessing = _ref.isEditTaskProcessing;\n  return /*#__PURE__*/React.createElement(TaskHistory, {\n    userData: userData,\n    getLocations: getLocations,\n    locations: locations,\n    settingsData: settingsData,\n    userType: userType,\n    isProcessing: isProcessing,\n    isError: isError,\n    isSuccess: isSuccess,\n    getHistory: getHistory,\n    taskHistory: taskHistory,\n    getTaskDetails: getTaskDetails,\n    taskDetails: taskDetails,\n    deleteTask: deleteTask,\n    editTask: editTask,\n    updateTaskStatus: updateTaskStatus,\n    getTrackDetails: getTrackDetails,\n    search: search,\n    resetSearch: resetSearch,\n    filteredList: filteredList,\n    exportTaskCsv: exportTaskCsv,\n    csvUrl: csvUrl,\n    isTaskCsvExporting: isTaskCsvExporting,\n    getSettings: getSettings,\n    filterData: filterData,\n    isFilterLoaded: isFilterLoaded,\n    isEditTaskProcessing: isEditTaskProcessing,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  });\n};\n\nTaskHistoryContainer.propTypes = {\n  userData: PT.object,\n  getLocations: PT.func,\n  locations: PT.object,\n  isProcessing: PT.bool,\n  isError: PT.bool,\n  isSuccess: PT.bool,\n  getHistory: PT.func,\n  settingsData: PT.object,\n  userType: PT.string,\n  taskHistory: PT.object,\n  getTaskDetails: PT.func,\n  getTrackDetails: PT.func,\n  deleteTask: PT.func,\n  editTask: PT.func,\n  updateTaskStatus: PT.func,\n  search: PT.func,\n  resetSearch: PT.func,\n  exportTaskCsv: PT.func,\n  csvUrl: PT.object,\n  isTaskCsvExporting: PT.bool,\n  getSettings: PT.func,\n  filterData: PT.object,\n  isFilterLoaded: PT.bool,\n  isEditTaskProcessing: PT.bool\n};\n\nvar mapStateToProps = function mapStateToProps(_ref2, ownProps) {\n  var dashboardReducer = _ref2.dashboardReducer,\n      taskHistoryReducer = _ref2.taskHistoryReducer,\n      headerReducer = _ref2.headerReducer;\n  return {\n    userData: ownProps.userData,\n    userType: headerReducer.userType,\n    locations: dashboardReducer.locations,\n    settingsData: headerReducer.settingsData,\n    isProcessing: taskHistoryReducer.isProcessing,\n    isError: taskHistoryReducer.isError,\n    isSuccess: taskHistoryReducer.isSuccess,\n    taskHistory: taskHistoryReducer.taskHistory,\n    taskDetails: dashboardReducer.taskDetails,\n    filteredList: dashboardReducer.filteredList,\n    csvUrl: taskHistoryReducer.csvUrl,\n    isTaskCsvExporting: taskHistoryReducer.isTaskCsvExporting,\n    filterData: headerReducer.filterData,\n    isFilterLoaded: headerReducer.isFilterLoaded,\n    isEditTaskProcessing: dashboardReducer.isEditTaskProcessing\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateTaskStatus: function updateTaskStatus(data) {\n      return dispatch(dashboardActions.updateTaskStatus(data));\n    },\n    deleteTask: function deleteTask(data) {\n      return dispatch(dashboardActions.deleteTask(data));\n    },\n    getLocations: function getLocations(data) {\n      return dispatch(dashboardActions.getLocations(data));\n    },\n    editTask: function editTask(data) {\n      return dispatch(dashboardActions.editTask(data));\n    },\n    getTaskDetails: function getTaskDetails(data) {\n      return dispatch(dashboardActions.getTaskDetails(data));\n    },\n    getTrackDetails: function getTrackDetails(data) {\n      return dispatch(dashboardActions.getTrackDetails(data));\n    },\n    search: function search(data) {\n      return dispatch(dashboardActions.search(data));\n    },\n    resetSearch: function resetSearch(data) {\n      return dispatch(dashboardActions.resetSearch(data));\n    },\n    getSettings: function getSettings(data) {\n      return dispatch(headerActions.getSettings(data));\n    },\n    getHistory: function getHistory(data) {\n      return dispatch(actions.getHistory(data));\n    },\n    exportTaskCsv: function exportTaskCsv(data) {\n      return dispatch(actions.exportTaskCsv(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(TaskHistoryContainer));","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/TaskHistory/index.js"],"names":["React","connect","withRouter","PropTypes","PT","actions","dashboardActions","headerActions","TaskHistory","TaskHistoryContainer","userData","getLocations","locations","settingsData","userType","isProcessing","isError","isSuccess","getHistory","taskHistory","getTaskDetails","taskDetails","deleteTask","editTask","updateTaskStatus","getTrackDetails","search","resetSearch","filteredList","exportTaskCsv","csvUrl","isTaskCsvExporting","getSettings","filterData","isFilterLoaded","isEditTaskProcessing","propTypes","object","func","bool","string","mapStateToProps","ownProps","dashboardReducer","taskHistoryReducer","headerReducer","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {PropTypes as PT} from 'prop-types';\nimport * as actions from './actions';\nimport * as dashboardActions from '../Dashboard/actions';\nimport * as headerActions from '../Header/actions';\nimport TaskHistory from './taskHistory';\n\nconst TaskHistoryContainer = ({\n  userData,\n  getLocations,\n  locations,\n  settingsData,\n  userType,\n  isProcessing,\n  isError,\n  isSuccess,\n  getHistory,\n  taskHistory,\n  getTaskDetails,\n  taskDetails,\n  deleteTask,\n  editTask,\n  updateTaskStatus,\n  getTrackDetails,\n  search,\n  resetSearch,\n  filteredList,\n  exportTaskCsv,\n  csvUrl,\n  isTaskCsvExporting,\n\tgetSettings,\n  filterData,\n  isFilterLoaded,\n  isEditTaskProcessing\n}) => {\n  return (\n    <TaskHistory\n      userData          = {userData}\n      getLocations      = {getLocations}\n      locations         = {locations}\n      settingsData      = {settingsData}\n      userType          = {userType}\n      isProcessing      = {isProcessing}\n      isError           = {isError}\n      isSuccess         = {isSuccess}\n      getHistory        = {getHistory}\n      taskHistory       = {taskHistory}\n      getTaskDetails    = {getTaskDetails}\n      taskDetails       = {taskDetails}\n      deleteTask        = {deleteTask}\n      editTask          = {editTask}\n      updateTaskStatus  = {updateTaskStatus}\n      getTrackDetails   = {getTrackDetails}\n      search            = {search}\n      resetSearch       = {resetSearch}\n      filteredList      = {filteredList}\n      exportTaskCsv     = {exportTaskCsv}\n      csvUrl            = {csvUrl}\n      isTaskCsvExporting= {isTaskCsvExporting}\n\t\t\tgetSettings       = {getSettings}\n\t\t\tfilterData        = {filterData}\n\t\t\tisFilterLoaded    = {isFilterLoaded}\n\t\t\tisEditTaskProcessing    = {isEditTaskProcessing}\n    />\n  )\n};\n\n TaskHistoryContainer.propTypes   = {\n  userData          : PT.object,\n  getLocations      : PT.func,\n  locations         : PT.object,\n  isProcessing      : PT.bool,\n  isError           : PT.bool,\n  isSuccess         : PT.bool,\n  getHistory        : PT.func,\n  settingsData      : PT.object,\n  userType          : PT.string,\n  taskHistory       : PT.object,\n  getTaskDetails    : PT.func,\n  getTrackDetails   : PT.func,\n  deleteTask        : PT.func,\n  editTask          : PT.func,\n  updateTaskStatus  : PT.func,\n  search            : PT.func,\n  resetSearch       : PT.func,\n  exportTaskCsv     : PT.func,\n  csvUrl            : PT.object,\n  isTaskCsvExporting : PT.bool,\n\tgetSettings       : PT.func,\n  filterData        : PT.object,\n  isFilterLoaded    : PT.bool,\n  isEditTaskProcessing    : PT.bool\n }\n\n  const  mapStateToProps   = ({dashboardReducer, taskHistoryReducer, headerReducer}, ownProps) => {\n    return ({\n      userData      : ownProps.userData,\n      userType      : headerReducer.userType,\n      locations     : dashboardReducer.locations,\n      settingsData  : headerReducer.settingsData,\n      isProcessing  : taskHistoryReducer.isProcessing,\n      isError       : taskHistoryReducer.isError,\n      isSuccess     : taskHistoryReducer.isSuccess,\n      taskHistory   : taskHistoryReducer.taskHistory,\n      taskDetails   : dashboardReducer.taskDetails,\n      filteredList  : dashboardReducer.filteredList,\n      csvUrl        : taskHistoryReducer.csvUrl,\n      isTaskCsvExporting : taskHistoryReducer.isTaskCsvExporting,\n      filterData    : headerReducer.filterData,\n      isFilterLoaded    : headerReducer.isFilterLoaded,\n      isEditTaskProcessing    : dashboardReducer.isEditTaskProcessing\n    })\n  }\n\n\nconst mapDispatchToProps  = dispatch => ({\n  updateTaskStatus    : (data) => dispatch(dashboardActions.updateTaskStatus(data)),\n  deleteTask          : (data) => dispatch(dashboardActions.deleteTask(data)),\n  getLocations        : (data) => dispatch(dashboardActions.getLocations(data)),\n  editTask            : (data) => dispatch(dashboardActions.editTask(data)),\n  getTaskDetails      : (data) => dispatch(dashboardActions.getTaskDetails(data)),\n  getTrackDetails     : (data) => dispatch(dashboardActions.getTrackDetails(data)),\n  search              : (data) => dispatch(dashboardActions.search(data)),\n  resetSearch         : (data) => dispatch(dashboardActions.resetSearch(data)),\n  getSettings         : (data) => dispatch(headerActions.getSettings(data)),\n  getHistory          : (data) => dispatch(actions.getHistory(data)),\n  exportTaskCsv       : (data) => dispatch(actions.exportTaskCsv(data))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(TaskHistoryContainer));"]},"metadata":{},"sourceType":"module"}