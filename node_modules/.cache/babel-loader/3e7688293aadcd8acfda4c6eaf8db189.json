{"ast":null,"code":"import _objectSpread from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{withRouter}from'react-router-dom';import'bootstrap/dist/css/bootstrap.css';import DashboardList from'./dashboardList';import{isEqual,isEmpty,sortBy as _sortBy,remove as _remove}from'lodash';import Filter from'./filter';import StateFilter from'../Filter/stateFilter';import{setFilter,getFilter,clearFilter}from'../../Helper/common';var DashboardComponent=/*#__PURE__*/function(_Component){_inherits(DashboardComponent,_Component);var _super=_createSuper(DashboardComponent);function DashboardComponent(props){var _this;_classCallCheck(this,DashboardComponent);_this=_super.call(this,props);_this.updateFilter=function(data){_this.setState({filterData:_objectSpread({},data)});_this.props.updateFilter(_objectSpread({},data));};_this.updateTotalCount=function(count){_this.setState({liveOrderCount:count});};_this.getShoppedLate=function(){var filterData=_this.state.filterData||{};var filterKeys=filterData.filterKeys||{};var type=_this.props.userType==='admin'?'general':_this.props.userType;var data={};if(!isEmpty(filterKeys)){if(filterKeys.Store.length===0&&filterKeys.Area.length===0&&filterKeys.State.length>0){var states=(filterKeys.State||[]).map(function(item){//return {state: item.value, zone_id: []};\nreturn item.value;});if(states.length>0){data={type:'state',state:states};//value_one         =  'state';\n//value_two         =  states;\n}}if(filterKeys.Store.length===0&&filterKeys.Area.length>0){var zones=[];(filterKeys.Area||[]).map(function(item){var index=zones.findIndex(function(z){return z.state===item.state;});//console.log(filterKeys.Area, index);\nif(index>-1){zones[index].zone_id.push(item.id);}else{zones.push({state:item.state,zone_id:[item.id]});}});if(zones.length>0){data={type:'place',place:zones};//type         \t\t=  'place';\n//place         \t=  zones; \n}}if(filterKeys.Store.length>0){var store=[];(filterKeys.Store||[]).forEach(function(item){store.push(item.store_id.toString());});if(store.length>0){data={type:'store',store_id:store};//type         \t\t=  'store';\n//store_id         \t=  store;\n}}data.user_type=filterData.type||type;if(!!!data.type){data.type='default';}_this.props.getShoppedLate(data);}//console.log('Filter Data : ', data);\n};_this.state={org_id:!!_this.props.userData?_this.props.userData.org_id:'',//selectedState  :  null,\n//selectedArea   :  null,\n//selectedStore  :  null,\n//filterKeys     :  {State:[], Area: [], Store: []},\n//type           :  'general',\nsearchTxt:'',sOpen:false,selOrder:{},liveOrderCount:'',filterData:{}};_this.timings=[];//this.handleTypeChange         =  this.handleTypeChange.bind(this);\n//this.handleRemoveFilter       =  this.handleRemoveFilter.bind(this);\n_this.searchFilter=_this.searchFilter.bind(_assertThisInitialized(_this));return _this;}/* handleTypeChange(type) {\n      this.setState({\n         type        :  type\n      })\n      setFilter('dashboard', {user_type:this.props.userType, type: type, filterKeys: this.state.filterKeys || {}});\n      this.props.updateFilter();\n   } */_createClass(DashboardComponent,[{key:\"searchFilter\",value:function searchFilter(searchData){//console.log('Search Data : ', searchData);\nthis.props.search(_objectSpread({},searchData));}/* handleRemoveFilter (type, index) {\n      let filters          =  this.state.filterKeys || [];\n      if(type === 'State') {\n         let stateCode     =  filters[type][index].value;\n         _remove(filters.Area, function (area) {\n            return area.state === stateCode;\n         });\n      }\n      filters[type].splice(index, 1);\n      let selectedState    =  (type !== 'State') ? this.state.selectedState : null;\n      let selectedArea     =  (type !== 'Area') ? this.state.selectedArea : null;\n      let selectedStore    =  (type !== 'Store') ? this.state.selectedStore : null;\n      if(filters.State.length === 0){\n         filters.Store     =  [];\n         filters.Area      =  [];\n      }\n      if(filters.Area.length === 0){\n         filters.Store      =  [];\n      }\n\n      this.setState({\n         filterKeys : filters,\n         selectedState: selectedState,\n         selectedArea: selectedArea,\n         selectedStore: selectedStore\n      });      \n      setFilter('dashboard', {user_type:this.props.userType, type: this.state.type, filterKeys: filters});\n      this.props.updateFilter();\n   } */},{key:\"componentDidMount\",value:function componentDidMount(){//console.log('Props Added : ', this.props);\nthis.setState({filterData:this.props.filterData.dashboard||{}});/* let type       =  '';\n      let filterKeys =  this.state.filterKeys;\n      if(!!this.props.userType){\n         //let filter     =  getFilter('dashboard');         \n\t\t   let filter     =\tthis.props.filterData.reports || {};\n         if(!isEmpty(filter) && filter.user_type === this.props.userType) {\n            type        =  filter.type;\n            filterKeys  =  filter.filterKeys;\n         } else {\n            type       =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n            this.props.updateFilter();\n         }\n      }\n      this.setState({\n         type        :  type,\n         filterKeys  :  filterKeys\n      }) */}},{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(props){//console.log('Props Updated : ', props.shoppedLate);\nthis.setState({filterData:props.filterData.dashboard||{}});/* if(!!props.userType && !isEqual(this.props.userType, props.userType)) {\n         let type       =  (props.userType === 'admin') ? 'general' : props.userType;\n         //let filterKeys =  this.state.filterKeys;\n         //let filter     =  this.props.filterData.reports || {};\n         \n         if(!!props.userType){\n            //let filter     =  getFilter('');\n            let filter     =\tprops.filterData.reports || {};\n            if(!isEmpty(filter) && filter.user_type === props.userType) {\n               type        =  filter.type;\n               filterKeys  =  filter.filterKeys;\n            } else {\n               type       =  (props.userType === 'admin') ? 'general' : props.userType;\n               this.props.updateFilter();\n            }\n         }\n         this.setState({\n            type        :  type,\n            filterKeys  :  filterKeys\n         })\n      } */}},{key:\"render\",value:function render(){//console.log('Filter Data : ', this.state.filterKeys, this.state.type);\nvar locationData=this.props.locations||{};var pharmacy=!!locationData.pharmacy?locationData.pharmacy:false;var stores=locationData.stores||[];var locations=locationData.locations||[];var taskType=locationData.taskType||'';var zones=locationData.zones||{};var userType=this.props.userType||{};/* let filterData             =  {};\n      if(!!this.props.userType){\n         //let filter     =  getFilter('');\n         let filter     =\tthis.props.filterData.dashboard || {};\n         if(!isEmpty(filter) && filter.user_type === this.props.userType) {\n            filterData.type         =  filter.type;\n            filterData.filterKeys   =  filter.filterKeys;\n         } else {\n            filterData.type         =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n            filterData.filterKeys   =  this.state.filterKeys;\n            //this.props.updateFilter();\n         }\n      }\n\n      console.log('Filter Data : ', filterData); */var filterData=this.state.filterData;//let filterData\t=\tthis.props.filterData.dashboard;\nvar type='';var filterKeys={};if(!isEmpty(filterData)){type=filterData.type;filterKeys=filterData.filterKeys;}//console.log('Dashboard Render : ', type, filterKeys, filterData);\nreturn/*#__PURE__*/React.createElement(\"main\",{className:\"dash right_sec\".concat(userType!=='admin'?' noAdmin':'')},!isEmpty(this.props.settingsData)?/*#__PURE__*/React.createElement(Filter,{liveOrderCount:this.state.liveOrderCount//type                 =  {this.state.type}\n,filterData:filterData,userType:userType,stores:stores,zones:zones//handleTypeChange     =  {this.handleTypeChange}\n//handleStateChange    =  {this.handleStateChange}\n//handleAreaChange     =  {this.handleAreaChange}\n//handleStoreChange    =  {this.handleStoreChange}\n,searchFilter:this.searchFilter,resetSearch:this.props.resetSearch//handleRemoveFilter   =  {this.handleRemoveFilter}\n//filterKeys           =  {this.state.filterKeys}\n,getLocations:this.props.getLocations,taskType:taskType,locations:locations,pharmacy:pharmacy,timings:this.timings,userData:this.props.userData,settingsData:this.props.settingsData,createTask:this.props.createTask,filteredList:this.props.filteredList,getTaskDetails:this.props.getTaskDetails,taskDetails:this.props.taskDetails,deleteTask:this.props.deleteTask,updateTaskStatus:this.props.updateTaskStatus,editTask:this.props.editTask,getTrackDetails:this.props.getTrackDetails,isTaskProcessing:this.props.isTaskProcessing,updateFilter:this.updateFilter,getShoppedLate:this.getShoppedLate}):null,/*#__PURE__*/React.createElement(\"div\",null,!isEmpty(filterData)&&!isEmpty(this.props.settingsData)?/*#__PURE__*/React.createElement(DashboardList,{updateTotalCount:this.updateTotalCount,type:type,org_id:this.state.org_id,statefilter:filterKeys.State,areafilter:filterKeys.Area,storefilter:filterKeys.Store,searchTxt:this.state.searchTxt,taskType:taskType,stores:stores,locations:locations,pharmacy:pharmacy,timings:this.timings,getTaskDetails:this.props.getTaskDetails,taskDetails:this.props.taskDetails,deleteTask:this.props.deleteTask,updateTaskStatus:this.props.updateTaskStatus,editTask:this.props.editTask,settingsData:this.props.settingsData,getTrackDetails:this.props.getTrackDetails,shoppedLate:this.props.shoppedLate}):null));}}]);return DashboardComponent;}(Component);DashboardComponent.defaultProps={userData:{}};export default withRouter(DashboardComponent);","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/Dashboard/dashboard.js"],"names":["React","Component","withRouter","DashboardList","isEqual","isEmpty","sortBy","_sortBy","remove","_remove","Filter","StateFilter","setFilter","getFilter","clearFilter","DashboardComponent","props","updateFilter","data","setState","filterData","updateTotalCount","count","liveOrderCount","getShoppedLate","state","filterKeys","type","userType","Store","length","Area","State","states","map","item","value","zones","index","findIndex","z","zone_id","push","id","place","store","forEach","store_id","toString","user_type","org_id","userData","searchTxt","sOpen","selOrder","timings","searchFilter","bind","searchData","search","dashboard","locationData","locations","pharmacy","stores","taskType","settingsData","resetSearch","getLocations","createTask","filteredList","getTaskDetails","taskDetails","deleteTask","updateTaskStatus","editTask","getTrackDetails","isTaskProcessing","shoppedLate","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes as PT } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport DashboardList from './dashboardList';\nimport {isEqual, isEmpty, sortBy as _sortBy, remove as _remove} from 'lodash';\nimport Filter from './filter';\nimport StateFilter from '../Filter/stateFilter';\nimport {setFilter, getFilter, clearFilter} from '../../Helper/common';\n\nclass DashboardComponent extends Component {\n   static propTypes = {\n      userData    :  PT.object\n   }\n\n   static defaultProps = {\n      userData    :  {}\n   }\n\n   constructor(props) {\n      super(props);\n      this.state                    =  {\n                                          org_id         :  (!!this.props.userData) ? this.props.userData.org_id : '',\n                                          //selectedState  :  null,\n                                          //selectedArea   :  null,\n                                          //selectedStore  :  null,\n                                          //filterKeys     :  {State:[], Area: [], Store: []},\n                                          //type           :  'general',\n                                          searchTxt      :  '',\n                                          sOpen          :  false,\n                                          selOrder       :  {},\n                                          liveOrderCount :  '',\n                                          filterData     :  {}\n                                       }\n      this.timings                  =  [];\n      //this.handleTypeChange         =  this.handleTypeChange.bind(this);\n      //this.handleRemoveFilter       =  this.handleRemoveFilter.bind(this);\n      this.searchFilter             =  this.searchFilter.bind(this);\n   }\n\n   /* handleTypeChange(type) {\n      this.setState({\n         type        :  type\n      })\n      setFilter('dashboard', {user_type:this.props.userType, type: type, filterKeys: this.state.filterKeys || {}});\n      this.props.updateFilter();\n   } */\n\n   searchFilter (searchData) {\n      //console.log('Search Data : ', searchData);\n      this.props.search({\n         ...searchData,\n         //user_type: this.state.type\n      })\n   }\n\n   /* handleRemoveFilter (type, index) {\n      let filters          =  this.state.filterKeys || [];\n      if(type === 'State') {\n         let stateCode     =  filters[type][index].value;\n         _remove(filters.Area, function (area) {\n            return area.state === stateCode;\n         });\n      }\n      filters[type].splice(index, 1);\n      let selectedState    =  (type !== 'State') ? this.state.selectedState : null;\n      let selectedArea     =  (type !== 'Area') ? this.state.selectedArea : null;\n      let selectedStore    =  (type !== 'Store') ? this.state.selectedStore : null;\n      if(filters.State.length === 0){\n         filters.Store     =  [];\n         filters.Area      =  [];\n      }\n      if(filters.Area.length === 0){\n         filters.Store      =  [];\n      }\n\n      this.setState({\n         filterKeys : filters,\n         selectedState: selectedState,\n         selectedArea: selectedArea,\n         selectedStore: selectedStore\n      });      \n      setFilter('dashboard', {user_type:this.props.userType, type: this.state.type, filterKeys: filters});\n      this.props.updateFilter();\n   } */\n\n   componentDidMount() {\n      //console.log('Props Added : ', this.props);\n      this.setState({\n         filterData: this.props.filterData.dashboard || {}\n      })\n      /* let type       =  '';\n      let filterKeys =  this.state.filterKeys;\n      if(!!this.props.userType){\n         //let filter     =  getFilter('dashboard');         \n\t\t   let filter     =\tthis.props.filterData.reports || {};\n         if(!isEmpty(filter) && filter.user_type === this.props.userType) {\n            type        =  filter.type;\n            filterKeys  =  filter.filterKeys;\n         } else {\n            type       =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n            this.props.updateFilter();\n         }\n      }\n      this.setState({\n         type        :  type,\n         filterKeys  :  filterKeys\n      }) */\n   }\n\n   componentWillReceiveProps(props) {\n      //console.log('Props Updated : ', props.shoppedLate);\n      this.setState({\n         filterData: props.filterData.dashboard || {}\n      })\n      /* if(!!props.userType && !isEqual(this.props.userType, props.userType)) {\n         let type       =  (props.userType === 'admin') ? 'general' : props.userType;\n         //let filterKeys =  this.state.filterKeys;\n         //let filter     =  this.props.filterData.reports || {};\n         \n         if(!!props.userType){\n            //let filter     =  getFilter('');\n            let filter     =\tprops.filterData.reports || {};\n            if(!isEmpty(filter) && filter.user_type === props.userType) {\n               type        =  filter.type;\n               filterKeys  =  filter.filterKeys;\n            } else {\n               type       =  (props.userType === 'admin') ? 'general' : props.userType;\n               this.props.updateFilter();\n            }\n         }\n         this.setState({\n            type        :  type,\n            filterKeys  :  filterKeys\n         })\n      } */\n   }\n\n   updateFilter = (data) => {\n      this.setState({\n         filterData: {...data}\n      })\n      this.props.updateFilter({...data});\n   }\n   updateTotalCount = (count) => {\n      this.setState({\n         liveOrderCount    :  count\n      })\n   }\n\n   getShoppedLate = () => {\n      let filterData    =  this.state.filterData || {};\n      let filterKeys    =  filterData.filterKeys || {};\n      let type          =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n      let data\t\t\t\t=\t{}\n      if(!isEmpty(filterKeys)) {   \n         if(filterKeys.Store.length === 0 && filterKeys.Area.length === 0 && filterKeys.State.length > 0) {\n               let states           =  (filterKeys.State || []).map(item => {\n               //return {state: item.value, zone_id: []};\n               return item.value;\n            });\n            if(states.length > 0){\n                  data\t\t\t=\t{\n                     type\t\t:\t'state',\n                     state\t\t:\tstates\n                  }\n               //value_one         =  'state';\n               //value_two         =  states;\n            }\n         }\n   \n         if(filterKeys.Store.length === 0 && filterKeys.Area.length > 0) {         \n            let zones           =  [];\n            (filterKeys.Area || []).map((item) => {\n               let index\t\t=\tzones.findIndex((z) => z.state === item.state);\n               //console.log(filterKeys.Area, index);\n               if(index > -1){\n                  zones[index].zone_id.push(item.id)\n               } else {\n                  zones.push({\n                     state: item.state,\n                     zone_id : [item.id]\n                  })\n               }\n            });\n\n            if(zones.length > 0){\n               data\t\t\t=\t{\n                  type\t\t:\t'place',\n                  place\t\t:\tzones\n               }\n               //type         \t\t=  'place';\n               //place         \t=  zones; \n               \n            }\n         }\n   \n         if(filterKeys.Store.length > 0) {\n            let store            =  [];\n            (filterKeys.Store || []).forEach(item => {\n               store.push(item.store_id.toString());\n            })\n            if(store.length > 0){\n               data\t\t\t=\t{\n                  type\t\t:\t'store',\n                  store_id\t:\tstore\n               }\n               //type         \t\t=  'store';\n               //store_id         \t=  store;\n            }\n         }\n         data.user_type\t\t=\tfilterData.type || type;\n         if(!!!data.type) {\n            data.type      =  'default';\n         }\n         this.props.getShoppedLate(data);\n      }\n      //console.log('Filter Data : ', data);\n   }\n\n   render() {\n      //console.log('Filter Data : ', this.state.filterKeys, this.state.type);\n      let locationData           =  this.props.locations || {};\n      let pharmacy               =  (!!locationData.pharmacy) ? locationData.pharmacy : false;\n      let stores                 =  locationData.stores || [];\n      let locations              =  locationData.locations || [];\n      let taskType               =  locationData.taskType || '';\n      let zones                  =  locationData.zones || {};\n      let userType               =  this.props.userType || {};\n      /* let filterData             =  {};\n      if(!!this.props.userType){\n         //let filter     =  getFilter('');\n         let filter     =\tthis.props.filterData.dashboard || {};\n         if(!isEmpty(filter) && filter.user_type === this.props.userType) {\n            filterData.type         =  filter.type;\n            filterData.filterKeys   =  filter.filterKeys;\n         } else {\n            filterData.type         =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n            filterData.filterKeys   =  this.state.filterKeys;\n            //this.props.updateFilter();\n         }\n      }\n\n      console.log('Filter Data : ', filterData); */\n      \n      let filterData\t=\tthis.state.filterData;\n      //let filterData\t=\tthis.props.filterData.dashboard;\n      let type       =  '';\n      let filterKeys =  {};\n      if(!isEmpty(filterData)) {\n         type                          =  filterData.type;\n         filterKeys                    =  filterData.filterKeys;\n      }\n      //console.log('Dashboard Render : ', type, filterKeys, filterData);\n      return (\n         <main className={`dash right_sec${(userType !== 'admin') ? ' noAdmin' : ''}`}>            \n            {\n               (!isEmpty(this.props.settingsData)) ? \n               <Filter\n                  liveOrderCount       =  {this.state.liveOrderCount}\n                  //type                 =  {this.state.type}\n                  filterData           =  {filterData}\n                  userType             =  {userType}\n                  stores               =  {stores}\n                  zones                =  {zones}\n                  //handleTypeChange     =  {this.handleTypeChange}\n                  //handleStateChange    =  {this.handleStateChange}\n                  //handleAreaChange     =  {this.handleAreaChange}\n                  //handleStoreChange    =  {this.handleStoreChange}\n                  searchFilter         =  {this.searchFilter}\n                  resetSearch          =  {this.props.resetSearch}\n                  //handleRemoveFilter   =  {this.handleRemoveFilter}\n                  //filterKeys           =  {this.state.filterKeys}\n                  getLocations         =  {this.props.getLocations}\n                  taskType             =  {taskType}\n                  locations            =  {locations}\n                  pharmacy             =  {pharmacy}\n                  timings              =  {this.timings}\n                  userData             =  {this.props.userData}\n                  settingsData         =  {this.props.settingsData}\n                  createTask           =  {this.props.createTask}\n                  filteredList         =  {this.props.filteredList}\n                  getTaskDetails       =  {this.props.getTaskDetails}\n                  taskDetails          =  {this.props.taskDetails}\n                  deleteTask           =  {this.props.deleteTask}\n                  updateTaskStatus     =  {this.props.updateTaskStatus}\n                  editTask             =  {this.props.editTask}\n                  getTrackDetails      =  {this.props.getTrackDetails}\n                  isTaskProcessing     =  {this.props.isTaskProcessing}\n                  updateFilter         =  {this.updateFilter}\n                  getShoppedLate       =  {this.getShoppedLate}\n               /> : null\n            }\n            <div>\n               {\n                  (!isEmpty(filterData) && !isEmpty(this.props.settingsData)) ?                  \n                     <DashboardList\n                        updateTotalCount  =  {this.updateTotalCount}\n                        type              =  {type}\n                        org_id            =  {this.state.org_id}\n                        statefilter       =  {filterKeys.State}\n                        areafilter        =  {filterKeys.Area}\n                        storefilter       =  {filterKeys.Store}\n                        searchTxt         =  {this.state.searchTxt}\n                        taskType          =  {taskType}\n                        stores            =  {stores}\n                        locations         =  {locations}\n                        pharmacy          =  {pharmacy}\n                        timings           =  {this.timings}\n                        getTaskDetails    =  {this.props.getTaskDetails}\n                        taskDetails       =  {this.props.taskDetails}\n                        deleteTask        =  {this.props.deleteTask}\n                        updateTaskStatus  =  {this.props.updateTaskStatus}\n                        editTask          =  {this.props.editTask}\n                        settingsData      =  {this.props.settingsData}\n                        getTrackDetails   =  {this.props.getTrackDetails}\n                        shoppedLate       =  {this.props.shoppedLate}\n                     /> : null\n               }\n            </div>\n         </main>\n      )\n   }\n}\nexport default withRouter(DashboardComponent);"]},"metadata":{},"sourceType":"module"}