{"ast":null,"code":"import _regeneratorRuntime from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(do_login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoginStore);\n\nimport { takeEvery, put, call } from 'redux-saga/effects';\nimport * as loginConstant from '../constants';\nimport { error as notifyerror, success as notifysuccess } from '../../../util/notify';\nimport * as loginAction from '../actions';\nimport { callApi } from '../../../Helper/api';\nimport { setCookie, removeCookie, setLifetimeCookie, set as setDomainCookie } from '../../../util/cookies';\nimport Config from '../../../config'; //Do Login\n\nexport function do_login(action) {\n  var url, rawdata, remember, payload, result;\n  return _regeneratorRuntime.wrap(function do_login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          url = '';\n          url = \"auth/login\";\n          rawdata = action.data;\n          remember = rawdata.remember;\n          delete rawdata.remember;\n          _context.next = 8;\n          return call(callApi, 'POST', url, rawdata);\n\n        case 8:\n          payload = _context.sent;\n\n          if (!payload.data.error) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 12;\n          return put(loginAction.listenLoginError(payload.data.error));\n\n        case 12:\n          if (!payload.data.result) {\n            _context.next = 20;\n            break;\n          }\n\n          result = payload.data.result;\n          notifysuccess({\n            message: 'You have successfully logged In. Please wait...'\n          }); //localStorage.setItem('user', JSON.stringify(result.user || {}));\n          //console.log('States : ', Config.states);\n          //localStorage.setItem('states', JSON.stringify(result.states || []));\n\n          if (remember) {\n            removeCookie(\"foodjets_merchant\");\n            setLifetimeCookie(result.user, 'foodjets_merchant');\n          } else {\n            removeCookie(\"foodjets_merchant\");\n            setCookie(result.user, 'foodjets_merchant');\n          }\n\n          localStorage.setItem('states', JSON.stringify(Config.states || []));\n          setDomainCookie(result.user);\n          _context.next = 20;\n          return put(loginAction.listenLoginSuccess(result));\n\n        case 20:\n          _context.next = 26;\n          break;\n\n        case 22:\n          _context.prev = 22;\n          _context.t0 = _context[\"catch\"](0);\n          notifyerror(_context.t0);\n          console.log(_context.t0.message);\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 22]]);\n}\nexport function watchLoginStore() {\n  return _regeneratorRuntime.wrap(function watchLoginStore$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return takeEvery(loginConstant.DO_LOGIN, do_login);\n\n        case 3:\n          _context2.next = 8;\n          break;\n\n        case 5:\n          _context2.prev = 5;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 5]]);\n}","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/Login/Saga/index.js"],"names":["do_login","watchLoginStore","takeEvery","put","call","loginConstant","error","notifyerror","success","notifysuccess","loginAction","callApi","setCookie","removeCookie","setLifetimeCookie","set","setDomainCookie","Config","action","url","rawdata","data","remember","payload","listenLoginError","result","message","user","localStorage","setItem","JSON","stringify","states","listenLoginSuccess","console","log","DO_LOGIN"],"mappings":";;oDASiBA,Q;qDAgDAC,e;;AAzDjB,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,OAAO,KAAKC,aAAZ,MAA+B,cAA/B;AACA,SAAQC,KAAK,IAAIC,WAAjB,EAA8BC,OAAO,IAAIC,aAAzC,QAA6D,sBAA7D;AACA,OAAO,KAAKC,WAAZ,MAA6B,YAA7B;AACA,SAAQC,OAAR,QAAsB,qBAAtB;AACA,SAAQC,SAAR,EAAkBC,YAAlB,EAAgCC,iBAAhC,EAAmDC,GAAG,IAAIC,eAA1D,QAAgF,uBAAhF;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;;AACA,OAAO,SAAUjB,QAAV,CAAmBkB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,GAFL,GAEwB,EAFxB;AAGCA,UAAAA,GAAG,eAAH;AACIC,UAAAA,OAJL,GAIwBF,MAAM,CAACG,IAJ/B;AAKMC,UAAAA,QALN,GAKwBF,OAAO,CAACE,QALhC;AAMC,iBAASF,OAAO,CAACE,QAAjB;AAND;AAOiB,iBAAMlB,IAAI,CAACO,OAAD,EAAU,MAAV,EAAkBQ,GAAlB,EAAuBC,OAAvB,CAAV;;AAPjB;AAOOG,UAAAA,OAPP;;AAAA,eASIA,OAAO,CAACF,IAAR,CAAaf,KATjB;AAAA;AAAA;AAAA;;AAAA;AAUK,iBAAMH,GAAG,CAACO,WAAW,CAACc,gBAAZ,CAA6BD,OAAO,CAACF,IAAR,CAAaf,KAA1C,CAAD,CAAT;;AAVL;AAAA,eAcIiB,OAAO,CAACF,IAAR,CAAaI,MAdjB;AAAA;AAAA;AAAA;;AAeSA,UAAAA,MAfT,GAekBF,OAAO,CAACF,IAAR,CAAaI,MAf/B;AAkBKhB,UAAAA,aAAa,CAAC;AAACiB,YAAAA,OAAO,EAAE;AAAV,WAAD,CAAb,CAlBL,CAmBK;AACA;AACA;;AAEA,cAAGJ,QAAH,EAAa;AACTT,YAAAA,YAAY,CAAC,mBAAD,CAAZ;AACAC,YAAAA,iBAAiB,CAACW,MAAM,CAACE,IAAR,EAAc,mBAAd,CAAjB;AAEH,WAJD,MAIQ;AACJd,YAAAA,YAAY,CAAC,mBAAD,CAAZ;AACAD,YAAAA,SAAS,CAACa,MAAM,CAACE,IAAR,EAAc,mBAAd,CAAT;AACH;;AAODC,UAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BC,IAAI,CAACC,SAAL,CAAed,MAAM,CAACe,MAAP,IAAiB,EAAhC,CAA/B;AAEAhB,UAAAA,eAAe,CAACS,MAAM,CAACE,IAAR,CAAf;AAvCL;AAwCK,iBAAMxB,GAAG,CAACO,WAAW,CAACuB,kBAAZ,CAA+BR,MAA/B,CAAD,CAAT;;AAxCL;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2CClB,UAAAA,WAAW,aAAX;AACA2B,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAET,OAAd;;AA5CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDP,OAAO,SAAUzB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMC,SAAS,CAAEG,aAAa,CAAC+B,QAAhB,EAA0BpC,QAA1B,CAAf;;AAFD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAICkC,UAAAA,OAAO,CAACC,GAAR;;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\nimport * as loginConstant from '../constants';\nimport {error as notifyerror, success as notifysuccess} from '../../../util/notify';\nimport * as loginAction from '../actions';\nimport {callApi} from '../../../Helper/api';\nimport {setCookie,removeCookie, setLifetimeCookie, set as setDomainCookie} from '../../../util/cookies';\nimport Config from '../../../config';\n\n//Do Login\nexport function* do_login(action){\n    try {\n        let url             =  '';\n        url                 =  `auth/login`;\n        let rawdata         =  action.data ;\n        let  remember       =  rawdata.remember;  \n        delete   rawdata.remember;\n        const payload = yield call(callApi, 'POST', url, rawdata);\n        // check for error\n        if(payload.data.error){\n            yield put(loginAction.listenLoginError(payload.data.error));\n        }\n\n        // handle success result\n        if(payload.data.result){\n            let result = payload.data.result;\n\n\n            notifysuccess({message: 'You have successfully logged In. Please wait...'});\n            //localStorage.setItem('user', JSON.stringify(result.user || {}));\n            //console.log('States : ', Config.states);\n            //localStorage.setItem('states', JSON.stringify(result.states || []));\n\n            if(remember) {\n                removeCookie(\"foodjets_merchant\");\n                setLifetimeCookie(result.user, 'foodjets_merchant');\n               \n            }  else {\n                removeCookie(\"foodjets_merchant\");\n                setCookie(result.user, 'foodjets_merchant');\n            }\n\n            \n\n\n\n\n            localStorage.setItem('states', JSON.stringify(Config.states || []));\n           \n            setDomainCookie(result.user);\n            yield put(loginAction.listenLoginSuccess(result));\n        }\n    } catch (e) {\n        notifyerror(e);\n        console.log(e.message);\n    }\n}\n\nexport function* watchLoginStore() {\n    try{\n        yield takeEvery( loginConstant.DO_LOGIN, do_login );\n    } catch(e){\n        console.log(e)\n    }\n}"]},"metadata":{},"sourceType":"module"}