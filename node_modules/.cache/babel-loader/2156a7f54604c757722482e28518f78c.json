{"ast":null,"code":"import _objectSpread from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/biplab/Desktop/foodjets/src/containers/Dashboard/dashboard.js\";\nimport React, { Component } from 'react';\nimport { PropTypes as PT } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport DashboardList from './dashboardList';\nimport { isEqual, isEmpty, sortBy as _sortBy, remove as _remove } from 'lodash';\nimport Filter from './filter';\nimport StateFilter from '../Filter/stateFilter';\nimport { setFilter, getFilter, clearFilter } from '../../Helper/common';\n\nvar DashboardComponent = /*#__PURE__*/function (_Component) {\n  _inherits(DashboardComponent, _Component);\n\n  var _super = _createSuper(DashboardComponent);\n\n  function DashboardComponent(props) {\n    var _this;\n\n    _classCallCheck(this, DashboardComponent);\n\n    _this = _super.call(this, props);\n\n    _this.updateFilter = function (data) {\n      _this.setState({\n        filterData: _objectSpread({}, data)\n      });\n\n      _this.props.updateFilter(_objectSpread({}, data));\n    };\n\n    _this.updateTotalCount = function (count) {\n      _this.setState({\n        liveOrderCount: count\n      });\n    };\n\n    _this.getShoppedLate = function () {\n      var filterData = _this.state.filterData || {};\n      var filterKeys = filterData.filterKeys || {};\n      var type = _this.props.userType === 'admin' ? 'general' : _this.props.userType;\n      var data = {};\n\n      if (!isEmpty(filterKeys)) {\n        if (filterKeys.Store.length === 0 && filterKeys.Area.length === 0 && filterKeys.State.length > 0) {\n          var states = (filterKeys.State || []).map(function (item) {\n            //return {state: item.value, zone_id: []};\n            return item.value;\n          });\n\n          if (states.length > 0) {\n            data = {\n              type: 'state',\n              state: states\n            }; //value_one         =  'state';\n            //value_two         =  states;\n          }\n        }\n\n        if (filterKeys.Store.length === 0 && filterKeys.Area.length > 0) {\n          var zones = [];\n          (filterKeys.Area || []).map(function (item) {\n            var index = zones.findIndex(function (z) {\n              return z.state === item.state;\n            }); //console.log(filterKeys.Area, index);\n\n            if (index > -1) {\n              zones[index].zone_id.push(item.id);\n            } else {\n              zones.push({\n                state: item.state,\n                zone_id: [item.id]\n              });\n            }\n          });\n\n          if (zones.length > 0) {\n            data = {\n              type: 'place',\n              place: zones\n            }; //type         \t\t=  'place';\n            //place         \t=  zones; \n          }\n        }\n\n        if (filterKeys.Store.length > 0) {\n          var store = [];\n          (filterKeys.Store || []).forEach(function (item) {\n            store.push(item.store_id.toString());\n          });\n\n          if (store.length > 0) {\n            data = {\n              type: 'store',\n              store_id: store\n            }; //type         \t\t=  'store';\n            //store_id         \t=  store;\n          }\n        }\n\n        data.user_type = filterData.type || type;\n\n        if (!!!data.type) {\n          data.type = 'default';\n        }\n\n        _this.props.getShoppedLate(data);\n      } //console.log('Filter Data : ', data);\n\n    };\n\n    _this.state = {\n      org_id: !!_this.props.userData ? _this.props.userData.org_id : '',\n      //selectedState  :  null,\n      //selectedArea   :  null,\n      //selectedStore  :  null,\n      //filterKeys     :  {State:[], Area: [], Store: []},\n      //type           :  'general',\n      searchTxt: '',\n      sOpen: false,\n      selOrder: {},\n      liveOrderCount: '',\n      filterData: {}\n    };\n    _this.timings = []; //this.handleTypeChange         =  this.handleTypeChange.bind(this);\n    //this.handleRemoveFilter       =  this.handleRemoveFilter.bind(this);\n\n    _this.searchFilter = _this.searchFilter.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /* handleTypeChange(type) {\n     this.setState({\n        type        :  type\n     })\n     setFilter('dashboard', {user_type:this.props.userType, type: type, filterKeys: this.state.filterKeys || {}});\n     this.props.updateFilter();\n  } */\n\n\n  _createClass(DashboardComponent, [{\n    key: \"searchFilter\",\n    value: function searchFilter(searchData) {\n      //console.log('Search Data : ', searchData);\n      this.props.search(_objectSpread({}, searchData));\n    }\n    /* handleRemoveFilter (type, index) {\n       let filters          =  this.state.filterKeys || [];\n       if(type === 'State') {\n          let stateCode     =  filters[type][index].value;\n          _remove(filters.Area, function (area) {\n             return area.state === stateCode;\n          });\n       }\n       filters[type].splice(index, 1);\n       let selectedState    =  (type !== 'State') ? this.state.selectedState : null;\n       let selectedArea     =  (type !== 'Area') ? this.state.selectedArea : null;\n       let selectedStore    =  (type !== 'Store') ? this.state.selectedStore : null;\n       if(filters.State.length === 0){\n          filters.Store     =  [];\n          filters.Area      =  [];\n       }\n       if(filters.Area.length === 0){\n          filters.Store      =  [];\n       }\n        this.setState({\n          filterKeys : filters,\n          selectedState: selectedState,\n          selectedArea: selectedArea,\n          selectedStore: selectedStore\n       });      \n       setFilter('dashboard', {user_type:this.props.userType, type: this.state.type, filterKeys: filters});\n       this.props.updateFilter();\n    } */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //console.log('Props Added : ', this.props);\n      this.setState({\n        filterData: this.props.filterData.dashboard || {}\n      });\n      /* let type       =  '';\n      let filterKeys =  this.state.filterKeys;\n      if(!!this.props.userType){\n         //let filter     =  getFilter('dashboard');         \n      let filter     =\tthis.props.filterData.reports || {};\n         if(!isEmpty(filter) && filter.user_type === this.props.userType) {\n            type        =  filter.type;\n            filterKeys  =  filter.filterKeys;\n         } else {\n            type       =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n            this.props.updateFilter();\n         }\n      }\n      this.setState({\n         type        :  type,\n         filterKeys  :  filterKeys\n      }) */\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      //console.log('Props Updated : ', props.shoppedLate);\n      this.setState({\n        filterData: props.filterData.dashboard || {}\n      });\n      /* if(!!props.userType && !isEqual(this.props.userType, props.userType)) {\n         let type       =  (props.userType === 'admin') ? 'general' : props.userType;\n         //let filterKeys =  this.state.filterKeys;\n         //let filter     =  this.props.filterData.reports || {};\n         \n         if(!!props.userType){\n            //let filter     =  getFilter('');\n            let filter     =\tprops.filterData.reports || {};\n            if(!isEmpty(filter) && filter.user_type === props.userType) {\n               type        =  filter.type;\n               filterKeys  =  filter.filterKeys;\n            } else {\n               type       =  (props.userType === 'admin') ? 'general' : props.userType;\n               this.props.updateFilter();\n            }\n         }\n         this.setState({\n            type        :  type,\n            filterKeys  :  filterKeys\n         })\n      } */\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log('Filter Data : ', this.state.filterKeys, this.state.type);\n      var locationData = this.props.locations || {};\n      var pharmacy = !!locationData.pharmacy ? locationData.pharmacy : false;\n      var stores = locationData.stores || [];\n      var locations = locationData.locations || [];\n      var taskType = locationData.taskType || '';\n      var zones = locationData.zones || {};\n      var userType = this.props.userType || {};\n      /* let filterData             =  {};\n      if(!!this.props.userType){\n         //let filter     =  getFilter('');\n         let filter     =\tthis.props.filterData.dashboard || {};\n         if(!isEmpty(filter) && filter.user_type === this.props.userType) {\n            filterData.type         =  filter.type;\n            filterData.filterKeys   =  filter.filterKeys;\n         } else {\n            filterData.type         =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n            filterData.filterKeys   =  this.state.filterKeys;\n            //this.props.updateFilter();\n         }\n      }\n       console.log('Filter Data : ', filterData); */\n\n      var filterData = this.state.filterData; //let filterData\t=\tthis.props.filterData.dashboard;\n\n      var type = '';\n      var filterKeys = {};\n\n      if (!isEmpty(filterData)) {\n        type = filterData.type;\n        filterKeys = filterData.filterKeys;\n      } //console.log('Dashboard Render : ', type, filterKeys, filterData);\n\n\n      return /*#__PURE__*/React.createElement(\"main\", {\n        className: \"dash right_sec\".concat(userType !== 'admin' ? ' noAdmin' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 10\n        }\n      }, !isEmpty(this.props.settingsData) ? /*#__PURE__*/React.createElement(Filter, {\n        liveOrderCount: this.state.liveOrderCount //type                 =  {this.state.type}\n        ,\n        filterData: filterData,\n        userType: userType,\n        stores: stores,\n        zones: zones //handleTypeChange     =  {this.handleTypeChange}\n        //handleStateChange    =  {this.handleStateChange}\n        //handleAreaChange     =  {this.handleAreaChange}\n        //handleStoreChange    =  {this.handleStoreChange}\n        ,\n        searchFilter: this.searchFilter,\n        resetSearch: this.props.resetSearch //handleRemoveFilter   =  {this.handleRemoveFilter}\n        //filterKeys           =  {this.state.filterKeys}\n        ,\n        getLocations: this.props.getLocations,\n        taskType: taskType,\n        locations: locations,\n        pharmacy: pharmacy,\n        timings: this.timings,\n        userData: this.props.userData,\n        settingsData: this.props.settingsData,\n        createTask: this.props.createTask,\n        filteredList: this.props.filteredList,\n        getTaskDetails: this.props.getTaskDetails,\n        taskDetails: this.props.taskDetails,\n        deleteTask: this.props.deleteTask,\n        updateTaskStatus: this.props.updateTaskStatus,\n        editTask: this.props.editTask,\n        getTrackDetails: this.props.getTrackDetails,\n        isTaskProcessing: this.props.isTaskProcessing,\n        updateFilter: this.updateFilter,\n        getShoppedLate: this.getShoppedLate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 16\n        }\n      }) : null, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }\n      }, !isEmpty(filterData) && !isEmpty(this.props.settingsData) ? /*#__PURE__*/React.createElement(DashboardList, {\n        updateTotalCount: this.updateTotalCount,\n        type: type,\n        org_id: this.state.org_id,\n        statefilter: filterKeys.State,\n        areafilter: filterKeys.Area,\n        storefilter: filterKeys.Store,\n        searchTxt: this.state.searchTxt,\n        taskType: taskType,\n        stores: stores,\n        locations: locations,\n        pharmacy: pharmacy,\n        timings: this.timings,\n        getTaskDetails: this.props.getTaskDetails,\n        taskDetails: this.props.taskDetails,\n        deleteTask: this.props.deleteTask,\n        updateTaskStatus: this.props.updateTaskStatus,\n        editTask: this.props.editTask,\n        settingsData: this.props.settingsData,\n        getTrackDetails: this.props.getTrackDetails,\n        shoppedLate: this.props.shoppedLate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 22\n        }\n      }) : null));\n    }\n  }]);\n\n  return DashboardComponent;\n}(Component);\n\nDashboardComponent.propTypes = {\n  userData: PT.object\n};\nDashboardComponent.defaultProps = {\n  userData: {}\n};\nexport default withRouter(DashboardComponent);","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/Dashboard/dashboard.js"],"names":["React","Component","PropTypes","PT","withRouter","DashboardList","isEqual","isEmpty","sortBy","_sortBy","remove","_remove","Filter","StateFilter","setFilter","getFilter","clearFilter","DashboardComponent","props","updateFilter","data","setState","filterData","updateTotalCount","count","liveOrderCount","getShoppedLate","state","filterKeys","type","userType","Store","length","Area","State","states","map","item","value","zones","index","findIndex","z","zone_id","push","id","place","store","forEach","store_id","toString","user_type","org_id","userData","searchTxt","sOpen","selOrder","timings","searchFilter","bind","searchData","search","dashboard","locationData","locations","pharmacy","stores","taskType","settingsData","resetSearch","getLocations","createTask","filteredList","getTaskDetails","taskDetails","deleteTask","updateTaskStatus","editTask","getTrackDetails","isTaskProcessing","shoppedLate","propTypes","object","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes as PT } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport DashboardList from './dashboardList';\nimport {isEqual, isEmpty, sortBy as _sortBy, remove as _remove} from 'lodash';\nimport Filter from './filter';\nimport StateFilter from '../Filter/stateFilter';\nimport {setFilter, getFilter, clearFilter} from '../../Helper/common';\n\nclass DashboardComponent extends Component {\n   static propTypes = {\n      userData    :  PT.object\n   }\n\n   static defaultProps = {\n      userData    :  {}\n   }\n\n   constructor(props) {\n      super(props);\n      this.state                    =  {\n                                          org_id         :  (!!this.props.userData) ? this.props.userData.org_id : '',\n                                          //selectedState  :  null,\n                                          //selectedArea   :  null,\n                                          //selectedStore  :  null,\n                                          //filterKeys     :  {State:[], Area: [], Store: []},\n                                          //type           :  'general',\n                                          searchTxt      :  '',\n                                          sOpen          :  false,\n                                          selOrder       :  {},\n                                          liveOrderCount :  '',\n                                          filterData     :  {}\n                                       }\n      this.timings                  =  [];\n      //this.handleTypeChange         =  this.handleTypeChange.bind(this);\n      //this.handleRemoveFilter       =  this.handleRemoveFilter.bind(this);\n      this.searchFilter             =  this.searchFilter.bind(this);\n   }\n\n   /* handleTypeChange(type) {\n      this.setState({\n         type        :  type\n      })\n      setFilter('dashboard', {user_type:this.props.userType, type: type, filterKeys: this.state.filterKeys || {}});\n      this.props.updateFilter();\n   } */\n\n   searchFilter (searchData) {\n      //console.log('Search Data : ', searchData);\n      this.props.search({\n         ...searchData,\n         //user_type: this.state.type\n      })\n   }\n\n   /* handleRemoveFilter (type, index) {\n      let filters          =  this.state.filterKeys || [];\n      if(type === 'State') {\n         let stateCode     =  filters[type][index].value;\n         _remove(filters.Area, function (area) {\n            return area.state === stateCode;\n         });\n      }\n      filters[type].splice(index, 1);\n      let selectedState    =  (type !== 'State') ? this.state.selectedState : null;\n      let selectedArea     =  (type !== 'Area') ? this.state.selectedArea : null;\n      let selectedStore    =  (type !== 'Store') ? this.state.selectedStore : null;\n      if(filters.State.length === 0){\n         filters.Store     =  [];\n         filters.Area      =  [];\n      }\n      if(filters.Area.length === 0){\n         filters.Store      =  [];\n      }\n\n      this.setState({\n         filterKeys : filters,\n         selectedState: selectedState,\n         selectedArea: selectedArea,\n         selectedStore: selectedStore\n      });      \n      setFilter('dashboard', {user_type:this.props.userType, type: this.state.type, filterKeys: filters});\n      this.props.updateFilter();\n   } */\n\n   componentDidMount() {\n      //console.log('Props Added : ', this.props);\n      this.setState({\n         filterData: this.props.filterData.dashboard || {}\n      })\n      /* let type       =  '';\n      let filterKeys =  this.state.filterKeys;\n      if(!!this.props.userType){\n         //let filter     =  getFilter('dashboard');         \n\t\t   let filter     =\tthis.props.filterData.reports || {};\n         if(!isEmpty(filter) && filter.user_type === this.props.userType) {\n            type        =  filter.type;\n            filterKeys  =  filter.filterKeys;\n         } else {\n            type       =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n            this.props.updateFilter();\n         }\n      }\n      this.setState({\n         type        :  type,\n         filterKeys  :  filterKeys\n      }) */\n   }\n\n   componentWillReceiveProps(props) {\n      //console.log('Props Updated : ', props.shoppedLate);\n      this.setState({\n         filterData: props.filterData.dashboard || {}\n      })\n      /* if(!!props.userType && !isEqual(this.props.userType, props.userType)) {\n         let type       =  (props.userType === 'admin') ? 'general' : props.userType;\n         //let filterKeys =  this.state.filterKeys;\n         //let filter     =  this.props.filterData.reports || {};\n         \n         if(!!props.userType){\n            //let filter     =  getFilter('');\n            let filter     =\tprops.filterData.reports || {};\n            if(!isEmpty(filter) && filter.user_type === props.userType) {\n               type        =  filter.type;\n               filterKeys  =  filter.filterKeys;\n            } else {\n               type       =  (props.userType === 'admin') ? 'general' : props.userType;\n               this.props.updateFilter();\n            }\n         }\n         this.setState({\n            type        :  type,\n            filterKeys  :  filterKeys\n         })\n      } */\n   }\n\n   updateFilter = (data) => {\n      this.setState({\n         filterData: {...data}\n      })\n      this.props.updateFilter({...data});\n   }\n   updateTotalCount = (count) => {\n      this.setState({\n         liveOrderCount    :  count\n      })\n   }\n\n   getShoppedLate = () => {\n      let filterData    =  this.state.filterData || {};\n      let filterKeys    =  filterData.filterKeys || {};\n      let type          =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n      let data\t\t\t\t=\t{}\n      if(!isEmpty(filterKeys)) {   \n         if(filterKeys.Store.length === 0 && filterKeys.Area.length === 0 && filterKeys.State.length > 0) {\n               let states           =  (filterKeys.State || []).map(item => {\n               //return {state: item.value, zone_id: []};\n               return item.value;\n            });\n            if(states.length > 0){\n                  data\t\t\t=\t{\n                     type\t\t:\t'state',\n                     state\t\t:\tstates\n                  }\n               //value_one         =  'state';\n               //value_two         =  states;\n            }\n         }\n   \n         if(filterKeys.Store.length === 0 && filterKeys.Area.length > 0) {         \n            let zones           =  [];\n            (filterKeys.Area || []).map((item) => {\n               let index\t\t=\tzones.findIndex((z) => z.state === item.state);\n               //console.log(filterKeys.Area, index);\n               if(index > -1){\n                  zones[index].zone_id.push(item.id)\n               } else {\n                  zones.push({\n                     state: item.state,\n                     zone_id : [item.id]\n                  })\n               }\n            });\n\n            if(zones.length > 0){\n               data\t\t\t=\t{\n                  type\t\t:\t'place',\n                  place\t\t:\tzones\n               }\n               //type         \t\t=  'place';\n               //place         \t=  zones; \n               \n            }\n         }\n   \n         if(filterKeys.Store.length > 0) {\n            let store            =  [];\n            (filterKeys.Store || []).forEach(item => {\n               store.push(item.store_id.toString());\n            })\n            if(store.length > 0){\n               data\t\t\t=\t{\n                  type\t\t:\t'store',\n                  store_id\t:\tstore\n               }\n               //type         \t\t=  'store';\n               //store_id         \t=  store;\n            }\n         }\n         data.user_type\t\t=\tfilterData.type || type;\n         if(!!!data.type) {\n            data.type      =  'default';\n         }\n         this.props.getShoppedLate(data);\n      }\n      //console.log('Filter Data : ', data);\n   }\n\n   render() {\n      //console.log('Filter Data : ', this.state.filterKeys, this.state.type);\n      let locationData           =  this.props.locations || {};\n      let pharmacy               =  (!!locationData.pharmacy) ? locationData.pharmacy : false;\n      let stores                 =  locationData.stores || [];\n      let locations              =  locationData.locations || [];\n      let taskType               =  locationData.taskType || '';\n      let zones                  =  locationData.zones || {};\n      let userType               =  this.props.userType || {};\n      /* let filterData             =  {};\n      if(!!this.props.userType){\n         //let filter     =  getFilter('');\n         let filter     =\tthis.props.filterData.dashboard || {};\n         if(!isEmpty(filter) && filter.user_type === this.props.userType) {\n            filterData.type         =  filter.type;\n            filterData.filterKeys   =  filter.filterKeys;\n         } else {\n            filterData.type         =  (this.props.userType === 'admin') ? 'general' : this.props.userType;\n            filterData.filterKeys   =  this.state.filterKeys;\n            //this.props.updateFilter();\n         }\n      }\n\n      console.log('Filter Data : ', filterData); */\n      \n      let filterData\t=\tthis.state.filterData;\n      //let filterData\t=\tthis.props.filterData.dashboard;\n      let type       =  '';\n      let filterKeys =  {};\n      if(!isEmpty(filterData)) {\n         type                          =  filterData.type;\n         filterKeys                    =  filterData.filterKeys;\n      }\n      //console.log('Dashboard Render : ', type, filterKeys, filterData);\n      return (\n         <main className={`dash right_sec${(userType !== 'admin') ? ' noAdmin' : ''}`}>            \n            {\n               (!isEmpty(this.props.settingsData)) ? \n               <Filter\n                  liveOrderCount       =  {this.state.liveOrderCount}\n                  //type                 =  {this.state.type}\n                  filterData           =  {filterData}\n                  userType             =  {userType}\n                  stores               =  {stores}\n                  zones                =  {zones}\n                  //handleTypeChange     =  {this.handleTypeChange}\n                  //handleStateChange    =  {this.handleStateChange}\n                  //handleAreaChange     =  {this.handleAreaChange}\n                  //handleStoreChange    =  {this.handleStoreChange}\n                  searchFilter         =  {this.searchFilter}\n                  resetSearch          =  {this.props.resetSearch}\n                  //handleRemoveFilter   =  {this.handleRemoveFilter}\n                  //filterKeys           =  {this.state.filterKeys}\n                  getLocations         =  {this.props.getLocations}\n                  taskType             =  {taskType}\n                  locations            =  {locations}\n                  pharmacy             =  {pharmacy}\n                  timings              =  {this.timings}\n                  userData             =  {this.props.userData}\n                  settingsData         =  {this.props.settingsData}\n                  createTask           =  {this.props.createTask}\n                  filteredList         =  {this.props.filteredList}\n                  getTaskDetails       =  {this.props.getTaskDetails}\n                  taskDetails          =  {this.props.taskDetails}\n                  deleteTask           =  {this.props.deleteTask}\n                  updateTaskStatus     =  {this.props.updateTaskStatus}\n                  editTask             =  {this.props.editTask}\n                  getTrackDetails      =  {this.props.getTrackDetails}\n                  isTaskProcessing     =  {this.props.isTaskProcessing}\n                  updateFilter         =  {this.updateFilter}\n                  getShoppedLate       =  {this.getShoppedLate}\n               /> : null\n            }\n            <div>\n               {\n                  (!isEmpty(filterData) && !isEmpty(this.props.settingsData)) ?                  \n                     <DashboardList\n                        updateTotalCount  =  {this.updateTotalCount}\n                        type              =  {type}\n                        org_id            =  {this.state.org_id}\n                        statefilter       =  {filterKeys.State}\n                        areafilter        =  {filterKeys.Area}\n                        storefilter       =  {filterKeys.Store}\n                        searchTxt         =  {this.state.searchTxt}\n                        taskType          =  {taskType}\n                        stores            =  {stores}\n                        locations         =  {locations}\n                        pharmacy          =  {pharmacy}\n                        timings           =  {this.timings}\n                        getTaskDetails    =  {this.props.getTaskDetails}\n                        taskDetails       =  {this.props.taskDetails}\n                        deleteTask        =  {this.props.deleteTask}\n                        updateTaskStatus  =  {this.props.updateTaskStatus}\n                        editTask          =  {this.props.editTask}\n                        settingsData      =  {this.props.settingsData}\n                        getTrackDetails   =  {this.props.getTrackDetails}\n                        shoppedLate       =  {this.props.shoppedLate}\n                     /> : null\n               }\n            </div>\n         </main>\n      )\n   }\n}\nexport default withRouter(DashboardComponent);"]},"metadata":{},"sourceType":"module"}