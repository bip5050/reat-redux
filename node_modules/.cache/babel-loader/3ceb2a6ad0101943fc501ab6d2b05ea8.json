{"ast":null,"code":"import _objectSpread from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getSummary),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getFeedback),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(feedbackSearch),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(reply),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchFeedbackStore);\n\nimport * as feedbackAction from '../actions';\nimport * as headerAction from '../../Header/actions';\nimport { callApiV2 } from '../../../Helper/api';\nimport * as feedbackConstant from '../constants';\nimport { takeEvery, put, call, all } from 'redux-saga/effects';\nimport { error as notifyerror, success as notifysuccess, inform as notifyinform } from '../../../util/notify'; //Get Feedback\n\nexport function getSummary(action) {\n  var payload;\n  return _regeneratorRuntime.wrap(function getSummary$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(callApiV2, 'POST', 'feedback/summary', action.data);\n\n        case 3:\n          payload = _context.sent;\n\n          if (!payload.data.error) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 7;\n          return put(feedbackAction.listenGetSummeryError());\n\n        case 7:\n          ;\n\n          if (!payload.data.result) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 11;\n          return put(feedbackAction.listenGetSummerySuccess(payload.data.result));\n\n        case 11:\n          ;\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](0);\n          notifyerror(_context.t0);\n          console.log(_context.t0.message);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 14]]);\n}\n;\nexport function getFeedback(action) {\n  var data, payload;\n  return _regeneratorRuntime.wrap(function getFeedback$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          //console.log('Action Data : ', action.data);\n          data = _objectSpread(_objectSpread({}, action.data), {}, {\n            filter: {\n              key: 'feedback',\n              value: JSON.stringify(action.data.filter)\n            }\n          });\n          _context2.next = 4;\n          return put(headerAction.syncFilter({\n            key: 'feedback',\n            value: action.data.filter\n          }));\n\n        case 4:\n          _context2.next = 6;\n          return call(callApiV2, 'POST', 'feedback/list', data);\n\n        case 6:\n          payload = _context2.sent;\n\n          if (!payload.data.error) {\n            _context2.next = 10;\n            break;\n          }\n\n          _context2.next = 10;\n          return put(feedbackAction.listenGetFeedbackError());\n\n        case 10:\n          ;\n\n          if (!payload.data.result) {\n            _context2.next = 14;\n            break;\n          }\n\n          _context2.next = 14;\n          return put(feedbackAction.listenGetFeedbackSuccess(payload.data.result));\n\n        case 14:\n          ;\n          _context2.next = 21;\n          break;\n\n        case 17:\n          _context2.prev = 17;\n          _context2.t0 = _context2[\"catch\"](0);\n          notifyerror(_context2.t0);\n          console.log(_context2.t0.message);\n\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 17]]);\n}\n;\nexport function feedbackSearch(action) {\n  var payload;\n  return _regeneratorRuntime.wrap(function feedbackSearch$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(callApiV2, 'POST', 'feedback/search', action.data);\n\n        case 3:\n          payload = _context3.sent;\n\n          if (!payload.data.error) {\n            _context3.next = 7;\n            break;\n          }\n\n          _context3.next = 7;\n          return put(feedbackAction.listenFeedbackSearchError());\n\n        case 7:\n          ;\n\n          if (!payload.data.result) {\n            _context3.next = 11;\n            break;\n          }\n\n          _context3.next = 11;\n          return put(feedbackAction.listenFeedbackSearchSuccess(payload.data.result));\n\n        case 11:\n          ;\n          _context3.next = 18;\n          break;\n\n        case 14:\n          _context3.prev = 14;\n          _context3.t0 = _context3[\"catch\"](0);\n          notifyerror(_context3.t0);\n          console.log(_context3.t0.message);\n\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 14]]);\n}\n;\nexport function reply(action) {\n  var payload, replyData;\n  return _regeneratorRuntime.wrap(function reply$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(callApiV2, 'POST', 'feedback/reply', action.data);\n\n        case 3:\n          payload = _context4.sent;\n\n          if (!payload.data.error) {\n            _context4.next = 7;\n            break;\n          }\n\n          _context4.next = 7;\n          return put(feedbackAction.replyError());\n\n        case 7:\n          ;\n\n          if (!payload.data.result) {\n            _context4.next = 15;\n            break;\n          }\n\n          replyData = _objectSpread({}, payload.data.result);\n          replyData.task_id = action.data.task_id;\n          replyData.order_number = action.data.order_number;\n          _context4.next = 14;\n          return put(feedbackAction.replySuccess(replyData));\n\n        case 14:\n          notifyinform({\n            message: \"Email sent sucessfully.\"\n          });\n\n        case 15:\n          ;\n          _context4.next = 22;\n          break;\n\n        case 18:\n          _context4.prev = 18;\n          _context4.t0 = _context4[\"catch\"](0);\n          notifyerror(_context4.t0);\n          console.log(_context4.t0.message);\n\n        case 22:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 18]]);\n}\n;\nexport function watchFeedbackStore() {\n  return _regeneratorRuntime.wrap(function watchFeedbackStore$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return takeEvery(feedbackConstant.REPLY, reply);\n\n        case 3:\n          _context5.next = 5;\n          return takeEvery(feedbackConstant.GET_SUMMERY, getSummary);\n\n        case 5:\n          _context5.next = 7;\n          return takeEvery(feedbackConstant.GET_FEEDBACK, getFeedback);\n\n        case 7:\n          _context5.next = 9;\n          return takeEvery(feedbackConstant.FEEDBACK_SEARCH, feedbackSearch);\n\n        case 9:\n          _context5.next = 14;\n          break;\n\n        case 11:\n          _context5.prev = 11;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 11]]);\n}\n;","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/Feedbacks/Saga/index.js"],"names":["getSummary","getFeedback","feedbackSearch","reply","watchFeedbackStore","feedbackAction","headerAction","callApiV2","feedbackConstant","takeEvery","put","call","all","error","notifyerror","success","notifysuccess","inform","notifyinform","action","data","payload","listenGetSummeryError","result","listenGetSummerySuccess","console","log","message","filter","key","value","JSON","stringify","syncFilter","listenGetFeedbackError","listenGetFeedbackSuccess","listenFeedbackSearchError","listenFeedbackSearchSuccess","replyError","replyData","task_id","order_number","replySuccess","REPLY","GET_SUMMERY","GET_FEEDBACK","FEEDBACK_SEARCH"],"mappings":"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","sourcesContent":["import * as feedbackAction from '../actions';\nimport * as headerAction from '../../Header/actions';\nimport {callApiV2} from '../../../Helper/api';\nimport * as feedbackConstant from '../constants';\nimport { takeEvery, put, call, all } from 'redux-saga/effects';\nimport {error as notifyerror, success as notifysuccess, inform as notifyinform} from '../../../util/notify';\n\n//Get Feedback\nexport function* getSummary(action){\n    try {\n        const payload = yield call(callApiV2, 'POST', 'feedback/summary', action.data);\n\n        // check for error\n        if(payload.data.error){\n            yield put(feedbackAction.listenGetSummeryError());\n        };\n\n        if(payload.data.result){\n            yield put(feedbackAction.listenGetSummerySuccess(payload.data.result));\n        };\n    } catch (e) {\n        notifyerror(e);\n        console.log(e.message);\n    }\n};\n\nexport function* getFeedback(action){\n    try {\n        //console.log('Action Data : ', action.data);\n        let data    =   {\n            ...action.data,\n            filter: {\n                key: 'feedback',\n                value: JSON.stringify(action.data.filter)\n            }\n        }\n        yield put(headerAction.syncFilter({key: 'feedback', value: action.data.filter}));\n        const payload = yield call(callApiV2, 'POST', 'feedback/list', data);\n\n        // check for error\n        if(payload.data.error){\n            yield put(feedbackAction.listenGetFeedbackError());\n        };\n\n        if(payload.data.result){\n            yield put(feedbackAction.listenGetFeedbackSuccess(payload.data.result));\n        };\n    } catch (e) {\n        notifyerror(e);\n        console.log(e.message);\n    }\n};\n\nexport function* feedbackSearch(action){\n    try {\n        const payload = yield call(callApiV2, 'POST', 'feedback/search', action.data);\n\n        // check for error\n        if(payload.data.error){\n            yield put(feedbackAction.listenFeedbackSearchError());\n        };\n\n        if(payload.data.result){\n            yield put(feedbackAction.listenFeedbackSearchSuccess(payload.data.result));\n        };\n    } catch (e) {\n        notifyerror(e);\n        console.log(e.message);\n    }\n};\n\nexport function* reply(action){\n    try {\n        const payload = yield call(callApiV2, 'POST', 'feedback/reply', action.data);\n\n        // check for error\n        if(payload.data.error){\n            yield put(feedbackAction.replyError());\n        };\n\n        if(payload.data.result){\n            let replyData = {...payload.data.result};\n            replyData.task_id = action.data.task_id;\n            replyData.order_number = action.data.order_number;\n            yield put(feedbackAction.replySuccess(replyData));\n            notifyinform({message: \"Email sent sucessfully.\"});  \n        };\n    } catch (e) {\n        notifyerror(e);\n        console.log(e.message);\n    }\n};\n\nexport function* watchFeedbackStore() {\n    try{\n        yield takeEvery( feedbackConstant.REPLY, reply );\n        yield takeEvery( feedbackConstant.GET_SUMMERY, getSummary );\n        yield takeEvery( feedbackConstant.GET_FEEDBACK, getFeedback );\n        yield takeEvery( feedbackConstant.FEEDBACK_SEARCH, feedbackSearch );\n    } catch(e){\n        console.log(e)\n    }\n};"]},"metadata":{},"sourceType":"module"}