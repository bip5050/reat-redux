{"ast":null,"code":"import _regeneratorRuntime from \"/home/biplab/Desktop/foodjets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(get_history),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(exportTaskCsv),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchTaskHistoryStore);\n\nimport { takeEvery, put, call } from 'redux-saga/effects';\nimport * as taskHistoryConstant from '../constants';\nimport { error as notifyerror } from '../../../util/notify';\nimport * as taskHistoryAction from '../actions';\nimport { callApiV2 } from '../../../Helper/api';\nimport * as _ from 'lodash';\nimport { getDateTime, getSysDateTime } from '../../../Helper/common';\nimport * as headerAction from '../../Header/actions'; //Get History\n\nexport function get_history(action) {\n  var url, actionData, data, filtered, payload, result, tasks, storeName, temp, _temp;\n\n  return _regeneratorRuntime.wrap(function get_history$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          url = '';\n          url = \"tasks/history\";\n          actionData = action.data; //let filterData      =   getFilter('history');\n          //console.log('Filter Data : ', actionData);\n\n          _context.next = 6;\n          return put(headerAction.syncFilter({\n            key: actionData.filter.key || 'history',\n            value: JSON.parse(actionData.filter.value || '{}')\n          }));\n\n        case 6:\n          data = {\n            user_type: actionData.type,\n            page: actionData.pageno,\n            start: actionData.start,\n            end: actionData.end,\n            value_one: actionData.value_one,\n            value_two: actionData.value_two,\n            filter: actionData.filter\n          }; //console.log(actionData.storeName);\n\n          filtered = ['state', 'zone', 'store-id'].includes(data.value_one) ? false : true;\n          _context.next = 10;\n          return call(callApiV2, 'POST', url, data);\n\n        case 10:\n          payload = _context.sent;\n\n          if (!payload.data.error) {\n            _context.next = 14;\n            break;\n          }\n\n          _context.next = 14;\n          return put(taskHistoryAction.listenHistoryError());\n\n        case 14:\n          if (!payload.data.result) {\n            _context.next = 20;\n            break;\n          }\n\n          result = payload.data.result;\n          tasks = {}; //console.log('Length : ', result.tasks.length);\n\n          if (actionData.value_one === 'store-id') {\n            if (result.tasks.length > 0) {\n              storeName = actionData.storeName;\n              result.tasks.map(function (val, key) {\n                //console.log('Value : ', val);\n                var recipient_sig = false;\n                var track_driver = '';\n                var current_url = ''; //console.log(val, key)\n\n                var tskStatus = 'Scheduled';\n\n                if (val.tskStatus === 'tsk_proc_hld') {\n                  tskStatus = 'Scheduled';\n                } else if (val.tskStatus === 'tsk_proc_mrchnt') {\n                  tskStatus = 'Scheduled';\n                } else if (val.tskStatus === 'tsk_proc_drv' && val.driverStatus === 'drv_strt_recpnt_tsk') {\n                  tskStatus = 'Picked Up';\n                } else if (val.tskStatus === 'tsk_proc_drv') {\n                  tskStatus = 'Processing';\n                } else if (val.tskStatus === 'tsk_cmp') {\n                  tskStatus = 'Completed';\n                } else if (val.tskStatus === 'tsk_cncling') {\n                  tskStatus = 'Deleted';\n                } else if (val.tskStatus === 'tsk_cncled') {\n                  tskStatus = 'Deleted';\n                }\n\n                var dt = val.timeCreated.split('T');\n                var d = dt[0].split('-');\n                var created_at = d[1] + '/' + d[2] + '/' + d[0];\n                var completeafter = '';\n                var completebefore = '';\n\n                if (val.timezone !== '') {\n                  completeafter = getDateTime(parseInt(val.completeAfter) * 1000, val.timezone, 'MM/DD 路 hh:mma');\n                  completebefore = getDateTime(parseInt(val.completeBefore) * 1000, val.timezone, 'hh:mma');\n                } else {\n                  completeafter = getSysDateTime(parseInt(val.completeAfter) * 1000, 'MM/DD 路 hh:mma');\n                  completebefore = getSysDateTime(parseInt(val.completeBefore) * 1000, 'hh:mma');\n                }\n\n                if (!_.isEmpty(val.completionDetails.events) && !!val.completionDetails.events.onflt_recpnt_sig) {\n                  recipient_sig = true;\n                }\n\n                if (!_.isEmpty(val.completionDetails.events) && !!val.completionDetails.events.onflt_recpnt_sig) {\n                  recipient_sig = true;\n                }\n\n                if (!!val.pickup_onfleet_url) {\n                  track_driver = 'Driver to Merchant';\n                  current_url = val.pickup_onfleet_url;\n                }\n\n                if (!!val.drop_onfleet_url) {\n                  track_driver = 'Driver to Recipient';\n                  current_url = val.drop_onfleet_url;\n                }\n\n                if (!!!tasks[val.state_code]) {\n                  tasks[val.state_code] = {};\n                  tasks[val.state_code][val.store_id] = {\n                    name: storeName[val.store_id],\n                    id: val.state_code + val.store_id,\n                    orders: []\n                  };\n                } else {\n                  if (!!!tasks[val.state_code][val.store_id]) {\n                    tasks[val.state_code][val.store_id] = {\n                      name: storeName[val.store_id],\n                      id: val.state_code + val.store_id,\n                      orders: []\n                    };\n                  }\n                }\n\n                tasks[val.state_code][val.store_id].orders.push({\n                  created_at: created_at,\n                  timestamp: val.completeAfter,\n                  complete_after: completeafter,\n                  complete_before: completebefore,\n                  recpnt_address: val.recipients.address,\n                  mrchnt_address: val.merchant.address,\n                  mrchnt_notes: val.merchant.notes,\n                  recpnt_notes: val.recipients.notes,\n                  tsk_status: tskStatus,\n                  uuid: val.uuid,\n                  order_number: val.orderNumber,\n                  driver_name: val.driver_name,\n                  recipient_sig: recipient_sig,\n                  timezone: val.timezone,\n                  mrchnt_location: val.merchant.location,\n                  recpnt_location: val.recipients.location,\n                  drop_onfleet_url: val.drop_onfleet_url || '',\n                  pickup_onfleet_url: val.pickup_onfleet_url || '',\n                  track_driver: track_driver,\n                  current_url: current_url,\n                  tip: val.tip,\n                  state_code: val.state_code,\n                  store_id: val.store_id,\n                  mkt_ofc_cty_del_zne_id: val.mkt_ofc_cty_del_zne_id\n                });\n              });\n            }\n\n            temp = {};\n\n            _.each(tasks, function (val, key) {\n              _.each(val, function (vz, kz) {\n                tasks[key][kz].orders = _.orderBy(tasks[key][kz].orders, [function (o) {\n                  return o.timestamp;\n                }], ['desc']);\n              });\n\n              temp[key] = _.sortBy(tasks[key], function (o) {\n                return o.name;\n              });\n            });\n\n            tasks = temp;\n          } else if (actionData.value_one === 'state') {\n            if (result.tasks.length > 0) {\n              result.tasks.map(function (val, key) {\n                //console.log('Value : ', val);\n                var recipient_sig = false;\n                var track_driver = '';\n                var current_url = ''; //console.log(val, key)\n\n                var tskStatus = 'Scheduled';\n\n                if (val.tskStatus === 'tsk_proc_hld') {\n                  tskStatus = 'Scheduled';\n                } else if (val.tskStatus === 'tsk_proc_mrchnt') {\n                  tskStatus = 'Scheduled';\n                } else if (val.tskStatus === 'tsk_proc_drv' && val.driverStatus === 'drv_strt_recpnt_tsk') {\n                  tskStatus = 'Picked Up';\n                } else if (val.tskStatus === 'tsk_proc_drv') {\n                  tskStatus = 'Processing';\n                } else if (val.tskStatus === 'tsk_cmp') {\n                  tskStatus = 'Completed';\n                } else if (val.tskStatus === 'tsk_cncling') {\n                  tskStatus = 'Deleted';\n                } else if (val.tskStatus === 'tsk_cncled') {\n                  tskStatus = 'Deleted';\n                }\n\n                var dt = val.timeCreated.split('T');\n                var d = dt[0].split('-');\n                var created_at = d[1] + '/' + d[2] + '/' + d[0];\n                var completeafter = '';\n                var completebefore = '';\n\n                if (val.timezone !== '') {\n                  completeafter = getDateTime(parseInt(val.completeAfter) * 1000, val.timezone, 'MM/DD 路 hh:mma');\n                  completebefore = getDateTime(parseInt(val.completeBefore) * 1000, val.timezone, 'hh:mma');\n                } else {\n                  completeafter = getSysDateTime(parseInt(val.completeAfter) * 1000, 'MM/DD 路 hh:mma');\n                  completebefore = getSysDateTime(parseInt(val.completeBefore) * 1000, 'hh:mma');\n                }\n\n                if (!_.isEmpty(val.completionDetails.events) && !!val.completionDetails.events.onflt_recpnt_sig) {\n                  recipient_sig = true;\n                }\n\n                if (!_.isEmpty(val.completionDetails.events) && !!val.completionDetails.events.onflt_recpnt_sig) {\n                  recipient_sig = true;\n                }\n\n                if (!!val.pickup_onfleet_url) {\n                  track_driver = 'Driver to Merchant';\n                  current_url = val.pickup_onfleet_url;\n                }\n\n                if (!!val.drop_onfleet_url) {\n                  track_driver = 'Driver to Recipient';\n                  current_url = val.drop_onfleet_url;\n                }\n                /* if(!!!tasks[val.state_code]) {\n                    tasks[val.state_code]   =   {};\n                    tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]   =   {\n                                name        :   val.mkt_ofc_cty_del_zne_name,\n                                id          :   val.state_code+val.mkt_ofc_cty_del_zne_id,\n                                orders      :   []\n                    };\n                } else {\n                    if(!!!tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]) {\n                        tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]   =   {\n                            name        :   val.mkt_ofc_cty_del_zne_name,\n                            id          :   val.state_code+val.mkt_ofc_cty_del_zne_id,\n                            orders      :   []\n                        };\n                    }\n                } */\n\n\n                if (!!!tasks[val.state_code]) {\n                  tasks[val.state_code] = {\n                    name: val.state_code,\n                    orders: []\n                  };\n                } //console.log(tasks[val.state_code]);\n\n\n                tasks[val.state_code].orders.push({\n                  created_at: created_at,\n                  timestamp: val.completeAfter,\n                  complete_after: completeafter,\n                  complete_before: completebefore,\n                  recpnt_address: val.recipients.address,\n                  mrchnt_address: val.merchant.address,\n                  mrchnt_notes: val.merchant.notes,\n                  recpnt_notes: val.recipients.notes,\n                  tsk_status: tskStatus,\n                  uuid: val.uuid,\n                  order_number: val.orderNumber,\n                  driver_name: val.driver_name,\n                  recipient_sig: recipient_sig,\n                  timezone: val.timezone,\n                  mrchnt_location: val.merchant.location,\n                  recpnt_location: val.recipients.location,\n                  drop_onfleet_url: val.drop_onfleet_url || '',\n                  pickup_onfleet_url: val.pickup_onfleet_url || '',\n                  track_driver: track_driver,\n                  current_url: current_url,\n                  tip: val.tip,\n                  state_code: val.state_code,\n                  mkt_ofc_cty_del_zne_id: val.mkt_ofc_cty_del_zne_id\n                });\n              });\n            }\n\n            _.each(tasks, function (val, key) {\n              tasks[key].orders = _.orderBy(tasks[key].orders, [function (o) {\n                return o.timestamp;\n              }], ['desc']);\n            });\n          } else if (actionData.value_one === 'zone') {\n            if (result.tasks.length > 0) {\n              result.tasks.map(function (val, key) {\n                //console.log('Value : ', val);\n                var recipient_sig = false;\n                var track_driver = '';\n                var current_url = ''; //console.log(val, key)\n\n                var tskStatus = 'Scheduled';\n\n                if (val.tskStatus === 'tsk_proc_hld') {\n                  tskStatus = 'Scheduled';\n                } else if (val.tskStatus === 'tsk_proc_mrchnt') {\n                  tskStatus = 'Scheduled';\n                } else if (val.tskStatus === 'tsk_proc_drv' && val.driverStatus === 'drv_strt_recpnt_tsk') {\n                  tskStatus = 'Picked Up';\n                } else if (val.tskStatus === 'tsk_proc_drv') {\n                  tskStatus = 'Processing';\n                } else if (val.tskStatus === 'tsk_cmp') {\n                  tskStatus = 'Completed';\n                } else if (val.tskStatus === 'tsk_cncling') {\n                  tskStatus = 'Deleted';\n                } else if (val.tskStatus === 'tsk_cncled') {\n                  tskStatus = 'Deleted';\n                }\n\n                var dt = val.timeCreated.split('T');\n                var d = dt[0].split('-');\n                var created_at = d[1] + '/' + d[2] + '/' + d[0];\n                var completeafter = '';\n                var completebefore = '';\n\n                if (val.timezone !== '') {\n                  completeafter = getDateTime(parseInt(val.completeAfter) * 1000, val.timezone, 'MM/DD 路 hh:mma');\n                  completebefore = getDateTime(parseInt(val.completeBefore) * 1000, val.timezone, 'hh:mma');\n                } else {\n                  completeafter = getSysDateTime(parseInt(val.completeAfter) * 1000, 'MM/DD 路 hh:mma');\n                  completebefore = getSysDateTime(parseInt(val.completeBefore) * 1000, 'hh:mma');\n                }\n\n                if (!_.isEmpty(val.completionDetails.events) && !!val.completionDetails.events.onflt_recpnt_sig) {\n                  recipient_sig = true;\n                }\n\n                if (!_.isEmpty(val.completionDetails.events) && !!val.completionDetails.events.onflt_recpnt_sig) {\n                  recipient_sig = true;\n                }\n\n                if (!!val.pickup_onfleet_url) {\n                  track_driver = 'Driver to Merchant';\n                  current_url = val.pickup_onfleet_url;\n                }\n\n                if (!!val.drop_onfleet_url) {\n                  track_driver = 'Driver to Recipient';\n                  current_url = val.drop_onfleet_url;\n                }\n\n                if (!!!tasks[val.state_code]) {\n                  tasks[val.state_code] = {};\n                  tasks[val.state_code][val.mkt_ofc_cty_del_zne_id] = {\n                    name: val.mkt_ofc_cty_del_zne_name,\n                    id: val.state_code + val.mkt_ofc_cty_del_zne_id,\n                    orders: []\n                  };\n                } else {\n                  if (!!!tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]) {\n                    tasks[val.state_code][val.mkt_ofc_cty_del_zne_id] = {\n                      name: val.mkt_ofc_cty_del_zne_name,\n                      id: val.state_code + val.mkt_ofc_cty_del_zne_id,\n                      orders: []\n                    };\n                  }\n                }\n\n                tasks[val.state_code][val.mkt_ofc_cty_del_zne_id].orders.push({\n                  created_at: created_at,\n                  timestamp: val.completeAfter,\n                  complete_after: completeafter,\n                  complete_before: completebefore,\n                  recpnt_address: val.recipients.address,\n                  mrchnt_address: val.merchant.address,\n                  mrchnt_notes: val.merchant.notes,\n                  recpnt_notes: val.recipients.notes,\n                  tsk_status: tskStatus,\n                  uuid: val.uuid,\n                  order_number: val.orderNumber,\n                  driver_name: val.driver_name,\n                  recipient_sig: recipient_sig,\n                  timezone: val.timezone,\n                  mrchnt_location: val.merchant.location,\n                  recpnt_location: val.recipients.location,\n                  drop_onfleet_url: val.drop_onfleet_url || '',\n                  pickup_onfleet_url: val.pickup_onfleet_url || '',\n                  track_driver: track_driver,\n                  current_url: current_url,\n                  tip: val.tip,\n                  state_code: val.state_code,\n                  mkt_ofc_cty_del_zne_id: val.mkt_ofc_cty_del_zne_id\n                });\n              });\n            }\n\n            _temp = {};\n\n            _.each(tasks, function (val, key) {\n              _.each(val, function (vz, kz) {\n                tasks[key][kz].orders = _.orderBy(tasks[key][kz].orders, [function (o) {\n                  return o.timestamp;\n                }], ['desc']);\n              });\n\n              _temp[key] = _.sortBy(tasks[key], function (o) {\n                return o.name;\n              });\n            });\n\n            tasks = _temp;\n          } else {\n            tasks = result.tasks || []; //tasks                           =   _.orderBy(tasks, [o => o.completeAfter], ['desc'])\n          } //console.log('Saga : ', tasks)\n          //notifysuccess({message:result.message});\n\n\n          _context.next = 20;\n          return put(taskHistoryAction.listenHistorySuccess({\n            tasks: tasks,\n            task_count: result.task_count,\n            list_type: actionData.value_one\n          }));\n\n        case 20:\n          _context.next = 26;\n          break;\n\n        case 22:\n          _context.prev = 22;\n          _context.t0 = _context[\"catch\"](0);\n          notifyerror(_context.t0);\n          console.log(_context.t0.message);\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 22]]);\n}\nexport function exportTaskCsv(action) {\n  var actionData, data, payload;\n  return _regeneratorRuntime.wrap(function exportTaskCsv$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          actionData = action.data;\n          data = {\n            user_type: actionData.type,\n            page: actionData.pageno,\n            start: actionData.start,\n            end: actionData.end,\n            value_one: actionData.value_one,\n            value_two: actionData.value_two\n          };\n          _context2.next = 5;\n          return call(callApiV2, 'POST', 'tasks/download', data);\n\n        case 5:\n          payload = _context2.sent;\n\n          if (!payload.data.error) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.next = 9;\n          return put(taskHistoryAction.listenExportTaskCsvError());\n\n        case 9:\n          ;\n\n          if (!payload.data.result) {\n            _context2.next = 13;\n            break;\n          }\n\n          _context2.next = 13;\n          return put(taskHistoryAction.listenExportTaskCsvSuccess(payload.data.result));\n\n        case 13:\n          ;\n          _context2.next = 20;\n          break;\n\n        case 16:\n          _context2.prev = 16;\n          _context2.t0 = _context2[\"catch\"](0);\n          notifyerror(_context2.t0);\n          console.log(_context2.t0.message);\n\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 16]]);\n}\n;\nexport function watchTaskHistoryStore() {\n  return _regeneratorRuntime.wrap(function watchTaskHistoryStore$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return takeEvery(taskHistoryConstant.GET_HISTORY, get_history);\n\n        case 3:\n          _context3.next = 5;\n          return takeEvery(taskHistoryConstant.EXPORT_CSV_TASK_HISTORY, exportTaskCsv);\n\n        case 5:\n          _context3.next = 10;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}","map":{"version":3,"sources":["/home/biplab/Desktop/foodjets/src/containers/TaskHistory/Saga/index.js"],"names":["get_history","exportTaskCsv","watchTaskHistoryStore","takeEvery","put","call","taskHistoryConstant","error","notifyerror","taskHistoryAction","callApiV2","_","getDateTime","getSysDateTime","headerAction","action","url","actionData","data","syncFilter","key","filter","value","JSON","parse","user_type","type","page","pageno","start","end","value_one","value_two","filtered","includes","payload","listenHistoryError","result","tasks","length","storeName","map","val","recipient_sig","track_driver","current_url","tskStatus","driverStatus","dt","timeCreated","split","d","created_at","completeafter","completebefore","timezone","parseInt","completeAfter","completeBefore","isEmpty","completionDetails","events","onflt_recpnt_sig","pickup_onfleet_url","drop_onfleet_url","state_code","store_id","name","id","orders","push","timestamp","complete_after","complete_before","recpnt_address","recipients","address","mrchnt_address","merchant","mrchnt_notes","notes","recpnt_notes","tsk_status","uuid","order_number","orderNumber","driver_name","mrchnt_location","location","recpnt_location","tip","mkt_ofc_cty_del_zne_id","temp","each","vz","kz","orderBy","o","sortBy","mkt_ofc_cty_del_zne_name","listenHistorySuccess","task_count","list_type","console","log","message","listenExportTaskCsvError","listenExportTaskCsvSuccess","GET_HISTORY","EXPORT_CSV_TASK_HISTORY"],"mappings":"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","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\nimport * as taskHistoryConstant from '../constants';\nimport {error as notifyerror} from '../../../util/notify';\nimport * as taskHistoryAction from '../actions';\nimport {callApiV2} from '../../../Helper/api';\nimport * as _ from 'lodash';\nimport { getDateTime, getSysDateTime } from '../../../Helper/common';\nimport * as headerAction from '../../Header/actions';\n\n//Get History\nexport function* get_history(action){\n    try {        \n        let url             =   '';\n        url                 =   `tasks/history`;\n        let actionData      =   action.data;\n        //let filterData      =   getFilter('history');\n        //console.log('Filter Data : ', actionData);\n        yield put(headerAction.syncFilter({key: actionData.filter.key || 'history', value: JSON.parse(actionData.filter.value || '{}')}));\n        let data            =   {\n            user_type: actionData.type,\n            page: actionData.pageno,\n            start:  actionData.start,\n            end:actionData.end,\n            value_one:  actionData.value_one,\n            value_two:actionData.value_two,\n            filter: actionData.filter\n        }\n        //console.log(actionData.storeName);\n        let filtered        =   (['state', 'zone', 'store-id'].includes(data.value_one)) ? false : true;\n        const payload = yield call(callApiV2, 'POST', url, data);\n\n        // check for error\n        if(payload.data.error){\n            //notifyerror(payload.data.error);\n            yield put(taskHistoryAction.listenHistoryError());\n        }\n\n        // handle success result\n        if(payload.data.result){\n            let result = payload.data.result;\n            \n            let tasks = {};\n            //console.log('Length : ', result.tasks.length);\n            if(actionData.value_one === 'store-id'){\n                if(result.tasks.length > 0) {\n                    let storeName    =   actionData.storeName;\n                    result.tasks.map((val, key) => {\n                        //console.log('Value : ', val);\n                        let recipient_sig   =   false;                    \n                        let track_driver    =   '';\n                        let current_url     =   '';\n                        //console.log(val, key)\n                        let tskStatus = 'Scheduled';\n                        if(val.tskStatus === 'tsk_proc_hld') {\n                            tskStatus = 'Scheduled'\n                        } else if(val.tskStatus === 'tsk_proc_mrchnt') {\n                            tskStatus = 'Scheduled'\n                        } else if(val.tskStatus === 'tsk_proc_drv' && val.driverStatus === 'drv_strt_recpnt_tsk') {\n                            tskStatus = 'Picked Up';\n                        } else if(val.tskStatus === 'tsk_proc_drv') {\n                            tskStatus = 'Processing'\n                        } else if(val.tskStatus === 'tsk_cmp') {\n                            tskStatus = 'Completed'\n                        } else if(val.tskStatus === 'tsk_cncling') {\n                            tskStatus = 'Deleted'\n                        } else if(val.tskStatus === 'tsk_cncled') {\n                            tskStatus = 'Deleted'\n                        }\n                        let dt = val.timeCreated.split('T');\n                        let d = dt[0].split('-');\n                        let created_at = d[1]+'/'+d[2]+'/'+d[0]; \n                        \n                        let completeafter = '';\n                        let completebefore = '';\n                        \n                        if(val.timezone !== '') {\n                        completeafter = getDateTime(parseInt(val.completeAfter) * 1000, val.timezone, 'MM/DD 路 hh:mma');\n                        completebefore = getDateTime(parseInt(val.completeBefore) * 1000, val.timezone, 'hh:mma');\n                        } else {\n                        completeafter = getSysDateTime(parseInt(val.completeAfter) * 1000, 'MM/DD 路 hh:mma');\n                        completebefore = getSysDateTime(parseInt(val.completeBefore) * 1000, 'hh:mma');\n                        }\n                        if(!_.isEmpty(val.completionDetails.events) && \n                            !!val.completionDetails.events.onflt_recpnt_sig) {\n                            recipient_sig = true;\n                        }\n                        if(!_.isEmpty(val.completionDetails.events) && \n                            !!val.completionDetails.events.onflt_recpnt_sig) {\n                            recipient_sig = true;\n                        }\n\n                        if(!!val.pickup_onfleet_url) {\n                            track_driver        =   'Driver to Merchant';\n                            current_url         =   val.pickup_onfleet_url;\n                        }\n                        \n                        if(!!val.drop_onfleet_url) {\n                            track_driver        =   'Driver to Recipient';\n                            current_url         =   val.drop_onfleet_url;\n                        }\n\n                        if(!!!tasks[val.state_code]) {\n                            tasks[val.state_code]   =   {};\n                            tasks[val.state_code][val.store_id]   =   {\n                                        name        :   storeName[val.store_id],\n                                        id          :   val.state_code+val.store_id,\n                                        orders      :   []\n                            };\n                        } else {\n                            if(!!!tasks[val.state_code][val.store_id]) {\n                                tasks[val.state_code][val.store_id]   =   {\n                                    name        :   storeName[val.store_id],\n                                    id          :   val.state_code+val.store_id,\n                                    orders      :   []\n                                };\n                            }\n                        }\n                        \n                        tasks[val.state_code][val.store_id].orders.push({\n                            created_at              :   created_at,\n                            timestamp               :   val.completeAfter,\n                            complete_after          :   completeafter,\n                            complete_before         :   completebefore,\n                            recpnt_address          :   val.recipients.address,\n                            mrchnt_address          :   val.merchant.address,\n                            mrchnt_notes            :   val.merchant.notes,\n                            recpnt_notes            :   val.recipients.notes,\n                            tsk_status              :   tskStatus,\n                            uuid                    :   val.uuid,\n                            order_number            :   val.orderNumber,\n                            driver_name             :   val.driver_name,\n                            recipient_sig           :   recipient_sig,\n                            timezone                :   val.timezone,\n                            mrchnt_location         :   val.merchant.location,\n                            recpnt_location         :   val.recipients.location,\n                            drop_onfleet_url        :   val.drop_onfleet_url || '',\n                            pickup_onfleet_url      :   val.pickup_onfleet_url || '',\n                            track_driver            :   track_driver,\n                            current_url             :   current_url,\n                            tip                     :   val.tip,\n                            state_code              :   val.state_code,\n                            store_id                :   val.store_id,\n                            mkt_ofc_cty_del_zne_id  :   val.mkt_ofc_cty_del_zne_id\n                        });\n                    });\n                }\n                let temp                        =   {};\n                _.each(tasks, (val, key) => {\n                    _.each(val, (vz, kz) => {\n                        tasks[key][kz].orders   =   _.orderBy(tasks[key][kz].orders, [o => o.timestamp], ['desc'])\n                    });\n                    temp[key]                   =   _.sortBy(tasks[key], (o) => { return o.name; })\n                });\n                tasks                           =   temp;\n            } else if(actionData.value_one === 'state'){                \n                if(result.tasks.length > 0) {\n                    result.tasks.map((val, key) => {\n                        //console.log('Value : ', val);\n                        let recipient_sig   =   false;                    \n                        let track_driver    =   '';\n                        let current_url     =   '';\n                        //console.log(val, key)\n                        let tskStatus = 'Scheduled';\n                        if(val.tskStatus === 'tsk_proc_hld') {\n                            tskStatus = 'Scheduled'\n                        } else if(val.tskStatus === 'tsk_proc_mrchnt') {\n                            tskStatus = 'Scheduled'\n                        } else if(val.tskStatus === 'tsk_proc_drv' && val.driverStatus === 'drv_strt_recpnt_tsk') {\n                            tskStatus = 'Picked Up';\n                        } else if(val.tskStatus === 'tsk_proc_drv') {\n                            tskStatus = 'Processing'\n                        } else if(val.tskStatus === 'tsk_cmp') {\n                            tskStatus = 'Completed'\n                        } else if(val.tskStatus === 'tsk_cncling') {\n                            tskStatus = 'Deleted'\n                        } else if(val.tskStatus === 'tsk_cncled') {\n                            tskStatus = 'Deleted'\n                        }\n                        let dt = val.timeCreated.split('T');\n                        let d = dt[0].split('-');\n                        let created_at = d[1]+'/'+d[2]+'/'+d[0]; \n                        \n                        let completeafter = '';\n                        let completebefore = '';\n                        \n                        if(val.timezone !== '') {\n                        completeafter = getDateTime(parseInt(val.completeAfter) * 1000, val.timezone, 'MM/DD 路 hh:mma');\n                        completebefore = getDateTime(parseInt(val.completeBefore) * 1000, val.timezone, 'hh:mma');\n                        } else {\n                        completeafter = getSysDateTime(parseInt(val.completeAfter) * 1000, 'MM/DD 路 hh:mma');\n                        completebefore = getSysDateTime(parseInt(val.completeBefore) * 1000, 'hh:mma');\n                        }\n                        if(!_.isEmpty(val.completionDetails.events) && \n                            !!val.completionDetails.events.onflt_recpnt_sig) {\n                            recipient_sig = true;\n                        }\n                        if(!_.isEmpty(val.completionDetails.events) && \n                            !!val.completionDetails.events.onflt_recpnt_sig) {\n                            recipient_sig = true;\n                        }\n\n                        if(!!val.pickup_onfleet_url) {\n                            track_driver        =   'Driver to Merchant';\n                            current_url         =   val.pickup_onfleet_url;\n                        }\n                        \n                        if(!!val.drop_onfleet_url) {\n                            track_driver        =   'Driver to Recipient';\n                            current_url         =   val.drop_onfleet_url;\n                        }\n\n                        /* if(!!!tasks[val.state_code]) {\n                            tasks[val.state_code]   =   {};\n                            tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]   =   {\n                                        name        :   val.mkt_ofc_cty_del_zne_name,\n                                        id          :   val.state_code+val.mkt_ofc_cty_del_zne_id,\n                                        orders      :   []\n                            };\n                        } else {\n                            if(!!!tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]) {\n                                tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]   =   {\n                                    name        :   val.mkt_ofc_cty_del_zne_name,\n                                    id          :   val.state_code+val.mkt_ofc_cty_del_zne_id,\n                                    orders      :   []\n                                };\n                            }\n                        } */\n\n                        if(!!!tasks[val.state_code]) {\n                            tasks[val.state_code]   =   {\n                                name        :   val.state_code,\n                                orders      :   []\n                            };\n                        }\n\n                        //console.log(tasks[val.state_code]);\n                        \n                        tasks[val.state_code].orders.push({\n                            created_at              :   created_at,\n                            timestamp               :   val.completeAfter,\n                            complete_after          :   completeafter,\n                            complete_before         :   completebefore,\n                            recpnt_address          :   val.recipients.address,\n                            mrchnt_address          :   val.merchant.address,\n                            mrchnt_notes            :   val.merchant.notes,\n                            recpnt_notes            :   val.recipients.notes,\n                            tsk_status              :   tskStatus,\n                            uuid                    :   val.uuid,\n                            order_number            :   val.orderNumber,\n                            driver_name             :   val.driver_name,\n                            recipient_sig           :   recipient_sig,\n                            timezone                :   val.timezone,\n                            mrchnt_location         :   val.merchant.location,\n                            recpnt_location         :   val.recipients.location,\n                            drop_onfleet_url        :   val.drop_onfleet_url || '',\n                            pickup_onfleet_url      :   val.pickup_onfleet_url || '',\n                            track_driver            :   track_driver,\n                            current_url             :   current_url,\n                            tip                     :   val.tip,\n                            state_code              :   val.state_code,\n                            mkt_ofc_cty_del_zne_id  :   val.mkt_ofc_cty_del_zne_id\n                        });\n                    });\n                }\n                _.each(tasks, (val, key) => {\n                    tasks[key].orders               =  _.orderBy(tasks[key].orders, [o => o.timestamp], ['desc']);\n                });\n            } else if(actionData.value_one === 'zone') {\n                if(result.tasks.length > 0) {\n                    result.tasks.map((val, key) => {\n                        //console.log('Value : ', val);\n                        let recipient_sig   =   false;                    \n                        let track_driver    =   '';\n                        let current_url     =   '';\n                        //console.log(val, key)\n                        let tskStatus = 'Scheduled';\n                        if(val.tskStatus === 'tsk_proc_hld') {\n                            tskStatus = 'Scheduled'\n                        } else if(val.tskStatus === 'tsk_proc_mrchnt') {\n                            tskStatus = 'Scheduled'\n                        } else if(val.tskStatus === 'tsk_proc_drv' && val.driverStatus === 'drv_strt_recpnt_tsk') {\n                            tskStatus = 'Picked Up';\n                        } else if(val.tskStatus === 'tsk_proc_drv') {\n                            tskStatus = 'Processing'\n                        } else if(val.tskStatus === 'tsk_cmp') {\n                            tskStatus = 'Completed'\n                        } else if(val.tskStatus === 'tsk_cncling') {\n                            tskStatus = 'Deleted'\n                        } else if(val.tskStatus === 'tsk_cncled') {\n                            tskStatus = 'Deleted'\n                        }\n                        let dt = val.timeCreated.split('T');\n                        let d = dt[0].split('-');\n                        let created_at = d[1]+'/'+d[2]+'/'+d[0]; \n                        \n                        let completeafter = '';\n                        let completebefore = '';\n                        \n                        if(val.timezone !== '') {\n                        completeafter = getDateTime(parseInt(val.completeAfter) * 1000, val.timezone, 'MM/DD 路 hh:mma');\n                        completebefore = getDateTime(parseInt(val.completeBefore) * 1000, val.timezone, 'hh:mma');\n                        } else {\n                        completeafter = getSysDateTime(parseInt(val.completeAfter) * 1000, 'MM/DD 路 hh:mma');\n                        completebefore = getSysDateTime(parseInt(val.completeBefore) * 1000, 'hh:mma');\n                        }\n                        if(!_.isEmpty(val.completionDetails.events) && \n                            !!val.completionDetails.events.onflt_recpnt_sig) {\n                            recipient_sig = true;\n                        }\n                        if(!_.isEmpty(val.completionDetails.events) && \n                            !!val.completionDetails.events.onflt_recpnt_sig) {\n                            recipient_sig = true;\n                        }\n\n                        if(!!val.pickup_onfleet_url) {\n                            track_driver        =   'Driver to Merchant';\n                            current_url         =   val.pickup_onfleet_url;\n                        }\n                        \n                        if(!!val.drop_onfleet_url) {\n                            track_driver        =   'Driver to Recipient';\n                            current_url         =   val.drop_onfleet_url;\n                        }\n\n                        if(!!!tasks[val.state_code]) {\n                            tasks[val.state_code]   =   {};\n                            tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]   =   {\n                                        name        :   val.mkt_ofc_cty_del_zne_name,\n                                        id          :   val.state_code+val.mkt_ofc_cty_del_zne_id,\n                                        orders      :   []\n                            };\n                        } else {\n                            if(!!!tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]) {\n                                tasks[val.state_code][val.mkt_ofc_cty_del_zne_id]   =   {\n                                    name        :   val.mkt_ofc_cty_del_zne_name,\n                                    id          :   val.state_code+val.mkt_ofc_cty_del_zne_id,\n                                    orders      :   []\n                                };\n                            }\n                        }\n                        \n                        tasks[val.state_code][val.mkt_ofc_cty_del_zne_id].orders.push({\n                            created_at              :   created_at,\n                            timestamp               :   val.completeAfter,\n                            complete_after          :   completeafter,\n                            complete_before         :   completebefore,\n                            recpnt_address          :   val.recipients.address,\n                            mrchnt_address          :   val.merchant.address,\n                            mrchnt_notes            :   val.merchant.notes,\n                            recpnt_notes            :   val.recipients.notes,\n                            tsk_status              :   tskStatus,\n                            uuid                    :   val.uuid,\n                            order_number            :   val.orderNumber,\n                            driver_name             :   val.driver_name,\n                            recipient_sig           :   recipient_sig,\n                            timezone                :   val.timezone,\n                            mrchnt_location         :   val.merchant.location,\n                            recpnt_location         :   val.recipients.location,\n                            drop_onfleet_url        :   val.drop_onfleet_url || '',\n                            pickup_onfleet_url      :   val.pickup_onfleet_url || '',\n                            track_driver            :   track_driver,\n                            current_url             :   current_url,\n                            tip                     :   val.tip,\n                            state_code              :   val.state_code,\n                            mkt_ofc_cty_del_zne_id  :   val.mkt_ofc_cty_del_zne_id\n                        });\n                    });\n                }\n                let temp                        =   {};\n                _.each(tasks, (val, key) => {\n                    _.each(val, (vz, kz) => {\n                        tasks[key][kz].orders   =   _.orderBy(tasks[key][kz].orders, [o => o.timestamp], ['desc'])\n                    });\n                    temp[key]                   =   _.sortBy(tasks[key], (o) => { return o.name; })\n                });\n                tasks                           =   temp;\n            } else {\n                tasks                           =   result.tasks || [];\n                //tasks                           =   _.orderBy(tasks, [o => o.completeAfter], ['desc'])\n            }\n            //console.log('Saga : ', tasks)\n            //notifysuccess({message:result.message});\n            yield put(taskHistoryAction.listenHistorySuccess({tasks: tasks, task_count: result.task_count, list_type: actionData.value_one}));\n        }\n    } catch (e) {\n        notifyerror(e);\n        console.log(e.message);\n    }\n}\n\nexport function* exportTaskCsv(action){\n    try {\n        let actionData      =   action.data;\n        let data            =   {\n            user_type: actionData.type,\n            page: actionData.pageno,\n            start:  actionData.start,\n            end:actionData.end,\n            value_one:  actionData.value_one,\n            value_two:actionData.value_two\n        }\n        const payload = yield call(callApiV2, 'POST', 'tasks/download', data);\n\n        // check for error\n        if(payload.data.error){\n            yield put(taskHistoryAction.listenExportTaskCsvError());\n        };\n\n        if(payload.data.result){\n            yield put(taskHistoryAction.listenExportTaskCsvSuccess(payload.data.result));\n        };\n    } catch (e) {\n        notifyerror(e);\n        console.log(e.message);\n    }\n};\n\nexport function* watchTaskHistoryStore() {\n    try{\n        //yield takeEvery( taskHistoryConstant.GET_HISTORY_FILTER, get_history_filter );\n        yield takeEvery( taskHistoryConstant.GET_HISTORY, get_history );\n        yield takeEvery( taskHistoryConstant.EXPORT_CSV_TASK_HISTORY, exportTaskCsv );\n    } catch(e){\n        console.log(e)\n    }\n}"]},"metadata":{},"sourceType":"module"}